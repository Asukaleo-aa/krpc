Compiling kRPC
==============

kRPC uses the `Bazel build system <http://bazel.io>`_.

Bazel automatically downloads most of the required dependencies to build
kRPC. However the following will need to be installed on your system:

 * `Mono C# compiler and runtime <http://www.mono-project.com/download/>`_
 * Python, including virtualenv and pip
 * pdflatex
 * RSVG for converting SVGs to PNGs
 * libxml, libxslt and python development (for building Java documentation)

To install these dependencies on Ubuntu, follow the instructions on the `Mono
website
<http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives>`_
and install the required packages using:
``sudo apt-get install mono-complete python-virtualenv python-pip
texlive-latex-base texlive-latex-recommended texlive-fonts-recommended
texlive-latex-extra librsvg2-bin libxml2-dev libxslt1-dev python-dev``

Before building kRPC you need to make ``lib/ksp`` point to a directory
containing Kerbal Space Program. For example on Linux, if your KSP directory is
at ``/path/to/ksp`` and your kRPC source tree at ``/path/to/krpc`` you can
create a symlink using: ``ln -s /path/to/ksp /path/to/krpc/lib/ksp``

You may also need to modify the symlink at ``lib/mono-4.5`` to point to the
correct location of your Mono installation.

To build kRPC, run ``bazel build //:krpc``. The resulting archive containing the
GameData directory, client libraries etc. will be placed in the ``bazel-out``
directory.

Using an IDE
^^^^^^^^^^^^

A C# solution file is provided in the root of the project for use with
MonoDevelop or a similar C# IDE.

Some of the C# source files are generated by the Bazel build scripts. You need
to run ``bazel build //:csproj`` to generate these files before the C# solution
file and C# project files can be used.

Running the Tests
^^^^^^^^^^^^^^^^^

The tests can be run using ``bazel test //:test``. C# NUnit tests can be also
run from an IDE using the C# solution file.

Bazel automatically downloads most of the required dependencies to run the
tests, however you will also need to install Lua and LuaRocks on your
system. These can be install on Ubuntu using: ``sudo apt-get install lua5.1
luarocks``
