.. default-domain:: lua
.. highlight:: lua
.. currentmodule:: SpaceCenter

.. _lua-api-parts:

Parts
=====

The following classes allow interaction with a vessels individual parts.

.. contents::
   :local:

Parts
-----


.. class:: Parts

   Instances of this class are used to interact with the parts of a vessel.
   An instance can be obtained by calling :attr:`SpaceCenter.Vessel.parts`.

   .. attribute:: all

      A list of all of the vessels parts.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Part`

   .. attribute:: root

      The vessels root part.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-trees-of-parts`.

   .. attribute:: controlling

      The part from which the vessel is controlled.

      :Attribute: Can be read or written
      :rtype: :class:`SpaceCenter.Part`

   .. method:: with_name(name)

      A list of parts whose :attr:`SpaceCenter.Part.name` is *name*.

      :param string name:
      :rtype: List of :class:`SpaceCenter.Part`

   .. method:: with_title(title)

      A list of all parts whose :attr:`SpaceCenter.Part.title` is *title*.

      :param string title:
      :rtype: List of :class:`SpaceCenter.Part`

   .. method:: with_tag(tag)

      A list of all parts whose :attr:`SpaceCenter.Part.tag` is *tag*.

      :param string tag:
      :rtype: List of :class:`SpaceCenter.Part`

   .. method:: with_module(module_name)

      A list of all parts that contain a :class:`SpaceCenter.Module` whose
      :attr:`SpaceCenter.Module.name` is *module_name*.

      :param string module_name:
      :rtype: List of :class:`SpaceCenter.Part`

   .. method:: in_stage(stage)

      A list of all parts that are activated in the given *stage*.

      :param number stage:
      :rtype: List of :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-staging`.

   .. method:: in_decouple_stage(stage)

      A list of all parts that are decoupled in the given *stage*.

      :param number stage:
      :rtype: List of :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-staging`.

   .. method:: modules_with_name(module_name)

      A list of modules (combined across all parts in the vessel) whose
      :attr:`SpaceCenter.Module.name` is *module_name*.

      :param string module_name:
      :rtype: List of :class:`SpaceCenter.Module`

   .. attribute:: cargo_bays

      A list of all cargo bays in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.CargoBay`

   .. attribute:: control_surfaces

      A list of all control surfaces in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.ControlSurface`

   .. attribute:: decouplers

      A list of all decouplers in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Decoupler`

   .. attribute:: docking_ports

      A list of all docking ports in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.DockingPort`

   .. attribute:: engines

      A list of all engines in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Engine`

      .. note::

         This includes any part that generates thrust. This covers many different types of engine,
         including liquid fuel rockets, solid rocket boosters, jet engines and RCS thrusters.

   .. attribute:: experiments

      A list of all science experiments in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Experiment`

   .. attribute:: fairings

      A list of all fairings in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Fairing`

   .. attribute:: intakes

      A list of all intakes in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Intake`

   .. attribute:: landing_gear

      A list of all landing gear attached to the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.LandingGear`

   .. attribute:: landing_legs

      A list of all landing legs attached to the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.LandingLeg`

   .. attribute:: launch_clamps

      A list of all launch clamps attached to the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.LaunchClamp`

   .. attribute:: lights

      A list of all lights in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Light`

   .. attribute:: parachutes

      A list of all parachutes in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Parachute`

   .. attribute:: radiators

      A list of all radiators in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Radiator`

   .. attribute:: rcs

      A list of all RCS blocks/thrusters in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.RCS`

   .. attribute:: reaction_wheels

      A list of all reaction wheels in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.ReactionWheel`

   .. attribute:: resource_converters

      A list of all resource converters in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.ResourceConverter`

   .. attribute:: resource_harvesters

      A list of all resource harvesters in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.ResourceHarvester`

   .. attribute:: sensors

      A list of all sensors in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Sensor`

   .. attribute:: solar_panels

      A list of all solar panels in the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.SolarPanel`



Part
----


.. class:: Part

   Represents an individual part. Vessels are made up of multiple parts.
   Instances of this class can be obtained by several methods in :class:`SpaceCenter.Parts`.

   .. attribute:: name

      Internal name of the part, as used in
      `part cfg files <http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation>`_.
      For example "Mark1-2Pod".

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: title

      Title of the part, as shown when the part is right clicked in-game. For example "Mk1-2 Command Pod".

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: tag

      The name tag for the part. Can be set to a custom string using the in-game user interface.

      :Attribute: Can be read or written
      :rtype: string

      .. note::

         This requires either the `NameTag <http://github.com/krpc/NameTag/releases/latest>`_ or
         `kOS <http://forum.kerbalspaceprogram.com/index.php?/topic/61827-/>`_ mods to be installed.

   .. attribute:: cost

      The cost of the part, in units of funds.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: vessel

      The vessel that contains this part.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Vessel`

   .. attribute:: parent

      The parts parent. Returns ``nil`` if the part does not have a parent.
      This, in combination with :attr:`SpaceCenter.Part.children`, can be used to traverse the vessels parts tree.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-trees-of-parts`.

   .. attribute:: children

      The parts children. Returns an empty list if the part has no children.
      This, in combination with :attr:`SpaceCenter.Part.parent`, can be used to traverse the vessels parts tree.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-trees-of-parts`.

   .. attribute:: axially_attached

      Whether the part is axially attached to its parent, i.e. on the top
      or bottom of its parent. If the part has no parent, returns ``False``.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

      .. note:: See the discussion on :rst:ref:`lua-api-parts-attachment-modes`.

   .. attribute:: radially_attached

      Whether the part is radially attached to its parent, i.e. on the side of its parent.
      If the part has no parent, returns ``False``.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

      .. note:: See the discussion on :rst:ref:`lua-api-parts-attachment-modes`.

   .. attribute:: stage

      The stage in which this part will be activated. Returns -1 if the part is not activated by staging.

      :Attribute: Read-only, cannot be set
      :rtype: number

      .. note:: See the discussion on :rst:ref:`lua-api-parts-staging`.

   .. attribute:: decouple_stage

      The stage in which this part will be decoupled. Returns -1 if the part is never decoupled from the vessel.

      :Attribute: Read-only, cannot be set
      :rtype: number

      .. note:: See the discussion on :rst:ref:`lua-api-parts-staging`.

   .. attribute:: massless

      Whether the part is `massless <http://wiki.kerbalspaceprogram.com/wiki/Massless_part>`_.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: mass

      The current mass of the part, including resources it contains, in kilograms.
      Returns zero if the part is massless.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: dry_mass

      The mass of the part, not including any resources it contains, in kilograms. Returns zero if the part is massless.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: shielded

      Whether the part is shielded from the exterior of the vessel, for example by a fairing.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: dynamic_pressure

      The dynamic pressure acting on the part, in Pascals.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: impact_tolerance

      The impact tolerance of the part, in meters per second.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: temperature

      Temperature of the part, in Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: skin_temperature

      Temperature of the skin of the part, in Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: max_temperature

      Maximum temperature that the part can survive, in Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: max_skin_temperature

      Maximum temperature that the skin of the part can survive, in Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_mass

      A measure of how much energy it takes to increase the internal temperature of the part, in Joules per Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_skin_mass

      A measure of how much energy it takes to increase the skin temperature of the part, in Joules per Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_resource_mass

      A measure of how much energy it takes to increase the temperature of the resources contained in the part, in Joules per Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_conduction_flux

      The rate at which heat energy is conducting into or out of the part via contact with other parts.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_convection_flux

      The rate at which heat energy is convecting into or out of the part from the surrounding atmosphere.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_radiation_flux

      The rate at which heat energy is radiating into or out of the part from the surrounding environment.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_internal_flux

      The rate at which heat energy is begin generated by the part.
      For example, some engines generate heat by combusting fuel.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_skin_to_internal_flux

      The rate at which heat energy is transferring between the part's skin and its internals.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part's internals are gaining heat energy,
      and negative means its skin is gaining heat energy.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: resources

      A :class:`SpaceCenter.Resources` object for the part.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Resources`

   .. attribute:: crossfeed

      Whether this part is crossfeed capable.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: is_fuel_line

      Whether this part is a fuel line.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: fuel_lines_from

      The parts that are connected to this part via fuel lines, where the direction of the fuel line is into this part.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-fuel-lines`.

   .. attribute:: fuel_lines_to

      The parts that are connected to this part via fuel lines, where the direction of the fuel line is out of this part.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Part`

      .. note:: See the discussion on :rst:ref:`lua-api-parts-fuel-lines`.

   .. attribute:: modules

      The modules for this part.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Module`

   .. attribute:: cargo_bay

      A :class:`SpaceCenter.CargoBay` if the part is a cargo bay, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.CargoBay`

   .. attribute:: control_surface

      A :class:`SpaceCenter.ControlSurface` if the part is an aerodynamic control surface, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ControlSurface`

   .. attribute:: decoupler

      A :class:`SpaceCenter.Decoupler` if the part is a decoupler, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Decoupler`

   .. attribute:: docking_port

      A :class:`SpaceCenter.DockingPort` if the part is a docking port, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.DockingPort`

   .. attribute:: engine

      An :class:`SpaceCenter.Engine` if the part is an engine, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Engine`

   .. attribute:: experiment

      An :class:`SpaceCenter.Experiment` if the part is a science experiment, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Experiment`

   .. attribute:: fairing

      A :class:`SpaceCenter.Fairing` if the part is a fairing, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Fairing`

   .. attribute:: intake

      An :class:`SpaceCenter.Intake` if the part is an intake, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Intake`

      .. note::

         This includes any part that generates thrust. This covers many different types of engine,
         including liquid fuel rockets, solid rocket boosters and jet engines.
         For RCS thrusters see :class:`SpaceCenter.RCS`.

   .. attribute:: landing_gear

      A :class:`SpaceCenter.LandingGear` if the part is a landing gear, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.LandingGear`

   .. attribute:: landing_leg

      A :class:`SpaceCenter.LandingLeg` if the part is a landing leg, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.LandingLeg`

   .. attribute:: launch_clamp

      A :class:`SpaceCenter.LaunchClamp` if the part is a launch clamp, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.LaunchClamp`

   .. attribute:: light

      A :class:`SpaceCenter.Light` if the part is a light, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Light`

   .. attribute:: parachute

      A :class:`SpaceCenter.Parachute` if the part is a parachute, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Parachute`

   .. attribute:: radiator

      A :class:`SpaceCenter.Radiator` if the part is a radiator, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Radiator`

   .. attribute:: rcs

      A :class:`SpaceCenter.RCS` if the part is an RCS block/thruster, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.RCS`

   .. attribute:: reaction_wheel

      A :class:`SpaceCenter.ReactionWheel` if the part is a reaction wheel, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ReactionWheel`

   .. attribute:: resource_converter

      A :class:`SpaceCenter.ResourceConverter` if the part is a resource converter, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ResourceConverter`

   .. attribute:: resource_harvester

      A :class:`SpaceCenter.ResourceHarvester` if the part is a resource harvester, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ResourceHarvester`

   .. attribute:: sensor

      A :class:`SpaceCenter.Sensor` if the part is a sensor, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Sensor`

   .. attribute:: solar_panel

      A :class:`SpaceCenter.SolarPanel` if the part is a solar panel, otherwise ``nil``.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.SolarPanel`

   .. method:: position(reference_frame)

      The position of the part in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

      .. note::

         This is a fixed position in the part, defined by the parts model.
         It s not necessarily the same as the parts center of mass.
         Use :meth:`SpaceCenter.Part.center_of_mass` to get the parts center of mass.

   .. method:: center_of_mass(reference_frame)

      The position of the parts center of mass in the given reference frame.
      If the part is physicsless, this is equivalent to :meth:`SpaceCenter.Part.position`.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. method:: direction(reference_frame)

      The direction of the part in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. method:: velocity(reference_frame)

      The velocity of the part in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. method:: rotation(reference_frame)

      The rotation of the part in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number, number)

   .. attribute:: moment_of_inertia

      The moment of inertia of the part in :math:`kg.m^2` around its center of mass
      in the parts reference frame (:class:`SpaceCenter.ReferenceFrame`).

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)

   .. attribute:: inertia_tensor

      The inertia tensor of the part in the parts reference frame (:class:`SpaceCenter.ReferenceFrame`).
      Returns the 3x3 matrix as a list of elements, in row-major order.

      :Attribute: Read-only, cannot be set
      :rtype: List of number

   .. attribute:: reference_frame

      The reference frame that is fixed relative to this part, and centered on a fixed position within the part, defined by the parts model.

      * The origin is at the position of the part, as returned by :meth:`SpaceCenter.Part.position`.
      * The axes rotate with the part.
      * The x, y and z axis directions depend on the design of the part.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ReferenceFrame`

      .. note::

         For docking port parts, this reference frame is not necessarily equivalent to the reference frame
         for the docking port, returned by :attr:`SpaceCenter.DockingPort.reference_frame`.

      .. figure:: /images/reference-frames/part.png
         :align: center

         Mk1 Command Pod reference frame origin and axes

   .. attribute:: center_of_mass_reference_frame

      The reference frame that is fixed relative to this part, and centered on its center of mass.

      * The origin is at the center of mass of the part, as returned by :meth:`SpaceCenter.Part.center_of_mass`.
      * The axes rotate with the part.
      * The x, y and z axis directions depend on the design of the part.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ReferenceFrame`

      .. note::

         For docking port parts, this reference frame is not necessarily equivalent to the reference frame
         for the docking port, returned by :attr:`SpaceCenter.DockingPort.reference_frame`.

   .. method:: add_force(force, position, reference_frame)

      Exert a constant force on the part, acting at the given position.
      Returns an object that can be used to remove or modify the force.

      :param Tuple force:
      :param Tuple position:
      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: :class:`SpaceCenter.Force`

   .. method:: instantaneous_force(force, position, reference_frame)

      Exert an instantaneous force on the part, acting at the given position.

      :param Tuple force:
      :param Tuple position:
      :param SpaceCenter.ReferenceFrame reference_frame:

      .. note::

         The force is applied instantaneously in a single physics update.



.. class:: Force

   Obtained by calling :meth:`SpaceCenter.Part.add_force`.

   .. attribute:: part

      The part that this force is applied to.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: force_vector

      The force vector. The magnitude of the vector is the strength of the force in Newtons.

      :Attribute: Can be read or written
      :rtype: Tuple of (number, number, number)

   .. attribute:: position

      The position at which the force acts.

      :Attribute: Can be read or written
      :rtype: Tuple of (number, number, number)

   .. attribute:: reference_frame

      The reference frame of the force vector and position.

      :Attribute: Can be read or written
      :rtype: :class:`SpaceCenter.ReferenceFrame`

   .. method:: remove()

      Remove the force.



Module
------


.. class:: Module

   This can be used to interact with a specific part module. This includes part modules in stock KSP,
   and those added by mods.

   In KSP, each part has zero or more
   `PartModules <http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES>`_
   associated with it. Each one contains some of the functionality of the part.
   For example, an engine has a "ModuleEngines" part module that contains all the
   functionality of an engine.

   .. attribute:: name

      Name of the PartModule. For example, "ModuleEngines".

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: part

      The part that contains this module.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: fields

      The modules field names and their associated values, as a dictionary.
      These are the values visible in the right-click menu of the part.

      :Attribute: Read-only, cannot be set
      :rtype: Map from string to string

   .. method:: has_field(name)

      Returns ``True`` if the module has a field with the given name.

      :param string name: Name of the field.
      :rtype: boolean

   .. method:: get_field(name)

      Returns the value of a field.

      :param string name: Name of the field.
      :rtype: string

   .. method:: set_field_int(name, value)

      Set the value of a field to the given integer number.

      :param string name: Name of the field.
      :param number value: Value to set.

   .. method:: set_field_float(name, value)

      Set the value of a field to the given floating point number.

      :param string name: Name of the field.
      :param number value: Value to set.

   .. method:: set_field_string(name, value)

      Set the value of a field to the given string.

      :param string name: Name of the field.
      :param string value: Value to set.

   .. method:: reset_field(name)

      Set the value of a field to its original value.

      :param string name: Name of the field.

   .. attribute:: events

      A list of the names of all of the modules events. Events are the clickable buttons
      visible in the right-click menu of the part.

      :Attribute: Read-only, cannot be set
      :rtype: List of string

   .. method:: has_event(name)

      ``True`` if the module has an event with the given name.

      :param string name:
      :rtype: boolean

   .. method:: trigger_event(name)

      Trigger the named event. Equivalent to clicking the button in the right-click menu of the part.

      :param string name:

   .. attribute:: actions

      A list of all the names of the modules actions. These are the parts actions that can be assigned
      to action groups in the in-game editor.

      :Attribute: Read-only, cannot be set
      :rtype: List of string

   .. method:: has_action(name)

      ``True`` if the part has an action with the given name.

      :param string name:
      :rtype: boolean

   .. method:: set_action(name, [value = True])

      Set the value of an action with the given name.

      :param string name:
      :param boolean value:



Specific Types of Part
----------------------

The following classes provide functionality for specific types of part.

.. contents::
   :local:

Cargo Bay
^^^^^^^^^


.. class:: CargoBay

   A cargo bay. Obtained by calling :attr:`SpaceCenter.Part.cargo_bay`.

   .. attribute:: part

      The part object for this cargo bay.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: state

      The state of the cargo bay.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.CargoBayState`

   .. attribute:: open

      Whether the cargo bay is open.

      :Attribute: Can be read or written
      :rtype: boolean



.. class:: CargoBayState

   The state of a cargo bay. See :attr:`SpaceCenter.CargoBay.state`.


   .. data:: open

      Cargo bay is fully open.


   .. data:: closed

      Cargo bay closed and locked.


   .. data:: opening

      Cargo bay is opening.


   .. data:: closing

      Cargo bay is closing.



Control Surface
^^^^^^^^^^^^^^^


.. class:: ControlSurface

   An aerodynamic control surface. Obtained by calling :attr:`SpaceCenter.Part.control_surface`.

   .. attribute:: part

      The part object for this control surface.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: pitch_enabled

      Whether the control surface has pitch control enabled.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: yaw_enabled

      Whether the control surface has yaw control enabled.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: roll_enabled

      Whether the control surface has roll control enabled.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: inverted

      Whether the control surface movement is inverted.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: deployed

      Whether the control surface has been fully deployed.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: surface_area

      Surface area of the control surface in :math:`m^2`.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: available_torque

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :attr:`SpaceCenter.Vessel.reference_frame`.

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)



Decoupler
^^^^^^^^^


.. class:: Decoupler

   A decoupler. Obtained by calling :attr:`SpaceCenter.Part.decoupler`

   .. attribute:: part

      The part object for this decoupler.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: decouple()

      Fires the decoupler. Returns the new vessel created when the decoupler fires.
      Throws an exception if the decoupler has already fired.

      :rtype: :class:`SpaceCenter.Vessel`

   .. attribute:: decoupled

      Whether the decoupler has fired.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: staged

      Whether the decoupler is enabled in the staging sequence.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: impulse

      The impulse that the decoupler imparts when it is fired, in Newton seconds.

      :Attribute: Read-only, cannot be set
      :rtype: number



Docking Port
^^^^^^^^^^^^


.. class:: DockingPort

   A docking port. Obtained by calling :attr:`SpaceCenter.Part.docking_port`

   .. attribute:: part

      The part object for this docking port.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: state

      The current state of the docking port.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.DockingPortState`

   .. attribute:: docked_part

      The part that this docking port is docked to. Returns ``nil`` if this
      docking port is not docked to anything.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: undock()

      Undocks the docking port and returns the new :class:`SpaceCenter.Vessel` that is created.
      This method can be called for either docking port in a docked pair.
      Throws an exception if the docking port is not docked to anything.

      :rtype: :class:`SpaceCenter.Vessel`

      .. note::

         After undocking, the active vessel may change. See :attr:`SpaceCenter.active_vessel`.

   .. attribute:: reengage_distance

      The distance a docking port must move away when it undocks before it
      becomes ready to dock with another port, in meters.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: has_shield

      Whether the docking port has a shield.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: shielded

      The state of the docking ports shield, if it has one.

      Returns ``True`` if the docking port has a shield, and the shield is
      closed. Otherwise returns ``False``. When set to ``True``, the shield is
      closed, and when set to ``False`` the shield is opened. If the docking
      port does not have a shield, setting this attribute has no effect.

      :Attribute: Can be read or written
      :rtype: boolean

   .. method:: position(reference_frame)

      The position of the docking port in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. method:: direction(reference_frame)

      The direction that docking port points in, in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. method:: rotation(reference_frame)

      The rotation of the docking port, in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number, number)

   .. attribute:: reference_frame

      The reference frame that is fixed relative to this docking port, and
      oriented with the port.

      * The origin is at the position of the docking port.
      * The axes rotate with the docking port.
      * The x-axis points out to the right side of the docking port.
      * The y-axis points in the direction the docking port is facing.
      * The z-axis points out of the bottom off the docking port.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ReferenceFrame`

      .. note::

         This reference frame is not necessarily equivalent to the reference frame
         for the part, returned by :attr:`SpaceCenter.Part.reference_frame`.

      .. figure:: /images/reference-frames/docking-port.png
         :align: center

         Docking port reference frame origin and axes

      .. figure:: /images/reference-frames/docking-port-inline.png
         :align: center

         Inline docking port reference frame origin and axes



.. class:: DockingPortState

   The state of a docking port. See :attr:`SpaceCenter.DockingPort.state`.


   .. data:: ready

      The docking port is ready to dock to another docking port.


   .. data:: docked

      The docking port is docked to another docking port, or docked to
      another part (from the VAB/SPH).


   .. data:: docking

      The docking port is very close to another docking port,
      but has not docked. It is using magnetic force to acquire a solid dock.


   .. data:: undocking

      The docking port has just been undocked from another docking port,
      and is disabled until it moves away by a sufficient distance
      (:attr:`SpaceCenter.DockingPort.reengage_distance`).


   .. data:: shielded

      The docking port has a shield, and the shield is closed.


   .. data:: moving

      The docking ports shield is currently opening/closing.



Engine
^^^^^^


.. class:: Engine

   An engine, including ones of various types.
   For example liquid fuelled gimballed engines, solid rocket boosters and jet engines.
   Obtained by calling :attr:`SpaceCenter.Part.engine`.

   .. note::

      For RCS thrusters :attr:`SpaceCenter.Part.rcs`.

   .. attribute:: part

      The part object for this engine.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: active

      Whether the engine is active. Setting this attribute may have no effect,
      depending on :attr:`SpaceCenter.Engine.can_shutdown` and :attr:`SpaceCenter.Engine.can_restart`.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: thrust

      The current amount of thrust being produced by the engine, in Newtons.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: available_thrust

      The amount of thrust, in Newtons, that would be produced by the engine
      when activated and with its throttle set to 100%.
      Returns zero if the engine does not have any fuel.
      Takes the engine's current :attr:`SpaceCenter.Engine.thrust_limit` and atmospheric conditions into account.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: max_thrust

      The amount of thrust, in Newtons, that would be produced by the engine
      when activated and fueled, with its throttle and throttle limiter set to 100%.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: max_vacuum_thrust

      The maximum amount of thrust that can be produced by the engine in a
      vacuum, in Newtons. This is the amount of thrust produced by the engine
      when activated, :attr:`SpaceCenter.Engine.thrust_limit` is set to 100%, the main
      vessel's throttle is set to 100% and the engine is in a vacuum.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thrust_limit

      The thrust limiter of the engine. A value between 0 and 1. Setting this
      attribute may have no effect, for example the thrust limit for a solid
      rocket booster cannot be changed in flight.

      :Attribute: Can be read or written
      :rtype: number

   .. attribute:: thrusters

      The components of the engine that generate thrust.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Thruster`

      .. note::

         For example, this corresponds to the rocket nozzel on a solid rocket booster,
         or the individual nozzels on a RAPIER engine.
         The overall thrust produced by the engine, as reported by :attr:`SpaceCenter.Engine.available_thrust`,
         :attr:`SpaceCenter.Engine.max_thrust` and others, is the sum of the thrust generated by each thruster.

   .. attribute:: specific_impulse

      The current specific impulse of the engine, in seconds. Returns zero
      if the engine is not active.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: vacuum_specific_impulse

      The vacuum specific impulse of the engine, in seconds.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: kerbin_sea_level_specific_impulse

      The specific impulse of the engine at sea level on Kerbin, in seconds.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: propellant_names

      The names of the propellants that the engine consumes.

      :Attribute: Read-only, cannot be set
      :rtype: List of string

   .. attribute:: propellant_ratios

      The ratio of resources that the engine consumes. A dictionary mapping resource names
      to the ratio at which they are consumed by the engine.

      :Attribute: Read-only, cannot be set
      :rtype: Map from string to number

      .. note::

         For example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every 0.6 units of
         LiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.

   .. attribute:: propellants

      The propellants that the engine consumes.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Propellant`

   .. attribute:: has_fuel

      Whether the engine has any fuel available.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

      .. note::

         The engine must be activated for this property to update correctly.

   .. attribute:: throttle

      The current throttle setting for the engine. A value between 0 and 1.
      This is not necessarily the same as the vessel's main throttle
      setting, as some engines take time to adjust their throttle
      (such as jet engines).

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: throttle_locked

      Whether the :attr:`SpaceCenter.Control.throttle` affects the engine. For example,
      this is ``True`` for liquid fueled rockets, and ``False`` for solid rocket
      boosters.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: can_restart

      Whether the engine can be restarted once shutdown. If the engine cannot be shutdown,
      returns ``False``. For example, this is ``True`` for liquid fueled rockets
      and ``False`` for solid rocket boosters.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: can_shutdown

      Whether the engine can be shutdown once activated. For example, this is
      ``True`` for liquid fueled rockets and ``False`` for solid rocket boosters.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: has_modes

      Whether the engine has multiple modes of operation.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: mode

      The name of the current engine mode.

      :Attribute: Can be read or written
      :rtype: string

   .. attribute:: modes

      The available modes for the engine.
      A dictionary mapping mode names to :class:`SpaceCenter.Engine` objects.

      :Attribute: Read-only, cannot be set
      :rtype: Map from string to :class:`SpaceCenter.Engine`

   .. method:: toggle_mode()

      Toggle the current engine mode.

   .. attribute:: auto_mode_switch

      Whether the engine will automatically switch modes.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: gimballed

      Whether the engine is gimballed.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: gimbal_range

      The range over which the gimbal can move, in degrees.
      Returns 0 if the engine is not gimballed.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: gimbal_locked

      Whether the engines gimbal is locked in place. Setting this attribute has
      no effect if the engine is not gimballed.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: gimbal_limit

      The gimbal limiter of the engine. A value between 0 and 1.
      Returns 0 if the gimbal is locked.

      :Attribute: Can be read or written
      :rtype: number

   .. attribute:: available_torque

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :attr:`SpaceCenter.Vessel.reference_frame`.
      Returns zero if the engine is inactive, or not gimballed.

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)



.. class:: Propellant

   A propellant for an engine. Obtains by calling :attr:`SpaceCenter.Engine.propellants`.

   .. attribute:: name

      The name of the propellant.

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: current_amount

      The current amount of propellant.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: current_requirement

      The required amount of propellant.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: total_resource_available

      The total amount of the underlying resource currently reachable given resource flow rules.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: total_resource_capacity

      The total vehicle capacity for the underlying propellant resource, restricted by resource flow rules.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: ignore_for_isp

      If this propellant should be ignored when calculating required mass flow given specific impulse.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: ignore_for_thrust_curve

      If this propellant should be ignored for thrust curve calculations.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: draw_stack_gauge

      If this propellant has a stack gauge or not.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: is_deprived

      If this propellant is deprived.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: ratio

      The propellant ratio.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: connected_resources

      The reachable resources connected to this propellant.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Resource`



Experiment
^^^^^^^^^^


.. class:: Experiment

   Obtained by calling :attr:`SpaceCenter.Part.experiment`.

   .. attribute:: part

      The part object for this experiment.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: run()

      Run the experiment.

   .. method:: transmit()

      Transmit all experimental data contained by this part.

   .. method:: dump()

      Dump the experimental data contained by the experiment.

   .. method:: reset()

      Reset the experiment.

   .. attribute:: deployed

      Whether the experiment has been deployed.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: rerunnable

      Whether the experiment can be re-run.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: inoperable

      Whether the experiment is inoperable.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: has_data

      Whether the experiment contains data.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: data

      The data contained in this experiment.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.ScienceData`

   .. attribute:: biome

      The name of the biome the experiment is currently in.

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: available

      Determines if the experiment is available given the current conditions.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: science_subject

      Containing information on the corresponding specific science result for the current conditions.
      Returns null if experiment is unavailable.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ScienceSubject`



.. class:: ScienceData

   Obtained by calling :attr:`SpaceCenter.Experiment.data`.

   .. attribute:: data_amount

      Data amount.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: science_value

      Science value.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: transmit_value

      Transmit value.

      :Attribute: Read-only, cannot be set
      :rtype: number



.. class:: ScienceSubject

   Obtained by calling :attr:`SpaceCenter.Experiment.science_subject`.

   .. attribute:: title

      Title of science subject, displayed in science archives

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: is_complete

      Whether the experiment has been completed.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: science

      Amount of science already earned from this subject, not updated until after transmission/recovery.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: science_cap

      Total science allowable for this subject.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: data_scale

      Multiply science value by this to determine data amount in mits.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: subject_value

      Multiplier for specific Celestial Body/Experiment Situation combination.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: scientific_value

      Diminishing value multiplier for decreasing the science value returned from repeated experiments.

      :Attribute: Read-only, cannot be set
      :rtype: number



Fairing
^^^^^^^


.. class:: Fairing

   A fairing. Obtained by calling :attr:`SpaceCenter.Part.fairing`.

   .. attribute:: part

      The part object for this fairing.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: jettison()

      Jettison the fairing. Has no effect if it has already been jettisoned.

   .. attribute:: jettisoned

      Whether the fairing has been jettisoned.

      :Attribute: Read-only, cannot be set
      :rtype: boolean



Intake
^^^^^^


.. class:: Intake

   An air intake. Obtained by calling :attr:`SpaceCenter.Part.intake`.

   .. attribute:: part

      The part object for this intake.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: open

      Whether the intake is open.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: speed

      Speed of the flow into the intake, in :math:`m/s`.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: flow

      The rate of flow into the intake, in units of resource per second.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: area

      The area of the intake's opening, in square meters.

      :Attribute: Read-only, cannot be set
      :rtype: number



Landing Gear
^^^^^^^^^^^^


.. class:: LandingGear

   Landing gear with wheels. Obtained by calling :attr:`SpaceCenter.Part.landing_gear`.

   .. attribute:: part

      The part object for this landing gear.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: state

      Gets the current state of the landing gear.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.LandingGearState`

      .. note::

         Fixed landing gear are always deployed.

   .. attribute:: deployable

      Whether the landing gear is deployable.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: deployed

      Whether the landing gear is deployed.

      :Attribute: Can be read or written
      :rtype: boolean

      .. note::

         Fixed landing gear are always deployed.
         Returns an error if you try to deploy fixed landing gear.



.. class:: LandingGearState

   The state of a landing gear. See :attr:`SpaceCenter.LandingGear.state`.


   .. data:: deployed

      Landing gear is fully deployed.


   .. data:: retracted

      Landing gear is fully retracted.


   .. data:: deploying

      Landing gear is being deployed.


   .. data:: retracting

      Landing gear is being retracted.


   .. data:: broken

      Landing gear is broken.



Landing Leg
^^^^^^^^^^^


.. class:: LandingLeg

   A landing leg. Obtained by calling :attr:`SpaceCenter.Part.landing_leg`.

   .. attribute:: part

      The part object for this landing leg.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: state

      The current state of the landing leg.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.LandingLegState`

   .. attribute:: deployed

      Whether the landing leg is deployed.

      :Attribute: Can be read or written
      :rtype: boolean

      .. note::

         Fixed landing legs are always deployed.
         Returns an error if you try to deploy fixed landing gear.



.. class:: LandingLegState

   The state of a landing leg. See :attr:`SpaceCenter.LandingLeg.state`.


   .. data:: deployed

      Landing leg is fully deployed.


   .. data:: retracted

      Landing leg is fully retracted.


   .. data:: deploying

      Landing leg is being deployed.


   .. data:: retracting

      Landing leg is being retracted.


   .. data:: broken

      Landing leg is broken.



Launch Clamp
^^^^^^^^^^^^


.. class:: LaunchClamp

   A launch clamp. Obtained by calling :attr:`SpaceCenter.Part.launch_clamp`.

   .. attribute:: part

      The part object for this launch clamp.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: release()

      Releases the docking clamp. Has no effect if the clamp has already been released.



Light
^^^^^


.. class:: Light

   A light. Obtained by calling :attr:`SpaceCenter.Part.light`.

   .. attribute:: part

      The part object for this light.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: active

      Whether the light is switched on.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: color

      The color of the light, as an RGB triple.

      :Attribute: Can be read or written
      :rtype: Tuple of (number, number, number)

   .. attribute:: power_usage

      The current power usage, in units of charge per second.

      :Attribute: Read-only, cannot be set
      :rtype: number



Parachute
^^^^^^^^^


.. class:: Parachute

   A parachute. Obtained by calling :attr:`SpaceCenter.Part.parachute`.

   .. attribute:: part

      The part object for this parachute.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: deploy()

      Deploys the parachute. This has no effect if the parachute has already
      been deployed.

   .. attribute:: deployed

      Whether the parachute has been deployed.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: state

      The current state of the parachute.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ParachuteState`

   .. attribute:: deploy_altitude

      The altitude at which the parachute will full deploy, in meters.

      :Attribute: Can be read or written
      :rtype: number

   .. attribute:: deploy_min_pressure

      The minimum pressure at which the parachute will semi-deploy, in atmospheres.

      :Attribute: Can be read or written
      :rtype: number



.. class:: ParachuteState

   The state of a parachute. See :attr:`SpaceCenter.Parachute.state`.


   .. data:: stowed

      The parachute is safely tucked away inside its housing.


   .. data:: active

      The parachute is still stowed, but ready to semi-deploy.


   .. data:: semi_deployed

      The parachute has been deployed and is providing some drag,
      but is not fully deployed yet.


   .. data:: deployed

      The parachute is fully deployed.


   .. data:: cut

      The parachute has been cut.



Radiator
^^^^^^^^


.. class:: Radiator

   A radiator. Obtained by calling :attr:`SpaceCenter.Part.radiator`.

   .. attribute:: part

      The part object for this radiator.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: deployable

      Whether the radiator is deployable.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: deployed

      For a deployable radiator, ``True`` if the radiator is extended.
      If the radiator is not deployable, this is always ``True``.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: state

      The current state of the radiator.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.RadiatorState`

      .. note::

         A fixed radiator is always :attr:`SpaceCenter.RadiatorState.extended`.



.. class:: RadiatorState

   The state of a radiator. :class:`SpaceCenter.RadiatorState`


   .. data:: extended

      Radiator is fully extended.


   .. data:: retracted

      Radiator is fully retracted.


   .. data:: extending

      Radiator is being extended.


   .. data:: retracting

      Radiator is being retracted.


   .. data:: broken

      Radiator is being broken.



Resource Converter
^^^^^^^^^^^^^^^^^^


.. class:: ResourceConverter

   A resource converter. Obtained by calling :attr:`SpaceCenter.Part.resource_converter`.

   .. attribute:: part

      The part object for this converter.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: count

      The number of converters in the part.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. method:: name(index)

      The name of the specified converter.

      :param number index: Index of the converter.
      :rtype: string

   .. method:: active(index)

      True if the specified converter is active.

      :param number index: Index of the converter.
      :rtype: boolean

   .. method:: start(index)

      Start the specified converter.

      :param number index: Index of the converter.

   .. method:: stop(index)

      Stop the specified converter.

      :param number index: Index of the converter.

   .. method:: state(index)

      The state of the specified converter.

      :param number index: Index of the converter.
      :rtype: :class:`SpaceCenter.ResourceConverterState`

   .. method:: status_info(index)

      Status information for the specified converter.
      This is the full status message shown in the in-game UI.

      :param number index: Index of the converter.
      :rtype: string

   .. method:: inputs(index)

      List of the names of resources consumed by the specified converter.

      :param number index: Index of the converter.
      :rtype: List of string

   .. method:: outputs(index)

      List of the names of resources produced by the specified converter.

      :param number index: Index of the converter.
      :rtype: List of string



.. class:: ResourceConverterState

   The state of a resource converter. See :meth:`SpaceCenter.ResourceConverter.state`.


   .. data:: running

      Converter is running.


   .. data:: idle

      Converter is idle.


   .. data:: missing_resource

      Converter is missing a required resource.


   .. data:: storage_full

      No available storage for output resource.


   .. data:: capacity

      At preset resource capacity.


   .. data:: unknown

      Unknown state. Possible with modified resource converters.
      In this case, check :meth:`SpaceCenter.ResourceConverter.status_info` for more information.



Resource Harvester
^^^^^^^^^^^^^^^^^^


.. class:: ResourceHarvester

   A resource harvester (drill). Obtained by calling :attr:`SpaceCenter.Part.resource_harvester`.

   .. attribute:: part

      The part object for this harvester.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: state

      The state of the harvester.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ResourceHarvesterState`

   .. attribute:: deployed

      Whether the harvester is deployed.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: active

      Whether the harvester is actively drilling.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: extraction_rate

      The rate at which the drill is extracting ore, in units per second.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thermal_efficiency

      The thermal efficiency of the drill, as a percentage of its maximum.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: core_temperature

      The core temperature of the drill, in Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: optimum_core_temperature

      The core temperature at which the drill will operate with peak efficiency, in Kelvin.

      :Attribute: Read-only, cannot be set
      :rtype: number



.. class:: ResourceHarvesterState

   The state of a resource harvester. See :attr:`SpaceCenter.ResourceHarvester.state`.


   .. data:: deploying

      The drill is deploying.


   .. data:: deployed

      The drill is deployed and ready.


   .. data:: retracting

      The drill is retracting.


   .. data:: retracted

      The drill is retracted.


   .. data:: active

      The drill is running.



Reaction Wheel
^^^^^^^^^^^^^^


.. class:: ReactionWheel

   A reaction wheel. Obtained by calling :attr:`SpaceCenter.Part.reaction_wheel`.

   .. attribute:: part

      The part object for this reaction wheel.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: active

      Whether the reaction wheel is active.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: broken

      Whether the reaction wheel is broken.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: available_torque

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :attr:`SpaceCenter.Vessel.reference_frame`.
      Returns zero if the reaction wheel is inactive or broken.

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)

   .. attribute:: max_torque

      The maximum torque the reaction wheel can provide, is it active,
      in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :attr:`SpaceCenter.Vessel.reference_frame`.

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)



RCS
^^^


.. class:: RCS

   An RCS block or thruster. Obtained by calling :attr:`SpaceCenter.Part.rcs`.

   .. attribute:: part

      The part object for this RCS.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: active

      Whether the RCS thrusters are active.
      An RCS thruster is inactive if the RCS action group is disabled (:attr:`SpaceCenter.Control.rcs`),
      the RCS thruster itself is not enabled (:attr:`SpaceCenter.RCS.enabled`) or
      it is covered by a fairing (:attr:`SpaceCenter.Part.shielded`).

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. attribute:: enabled

      Whether the RCS thrusters are enabled.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: pitch_enabled

      Whether the RCS thruster will fire when pitch control input is given.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: yaw_enabled

      Whether the RCS thruster will fire when yaw control input is given.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: roll_enabled

      Whether the RCS thruster will fire when roll control input is given.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: forward_enabled

      Whether the RCS thruster will fire when pitch control input is given.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: up_enabled

      Whether the RCS thruster will fire when yaw control input is given.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: right_enabled

      Whether the RCS thruster will fire when roll control input is given.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: available_torque

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :attr:`SpaceCenter.Vessel.reference_frame`.
      Returns zero if the RCS is inactive.

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)

   .. attribute:: max_thrust

      The maximum amount of thrust that can be produced by the RCS thrusters when active, in Newtons.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: max_vacuum_thrust

      The maximum amount of thrust that can be produced by the RCS thrusters when active in a vacuum, in Newtons.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: thrusters

      A list of thrusters, one of each nozzel in the RCS part.

      :Attribute: Read-only, cannot be set
      :rtype: List of :class:`SpaceCenter.Thruster`

   .. attribute:: specific_impulse

      The current specific impulse of the RCS, in seconds. Returns zero
      if the RCS is not active.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: vacuum_specific_impulse

      The vacuum specific impulse of the RCS, in seconds.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: kerbin_sea_level_specific_impulse

      The specific impulse of the RCS at sea level on Kerbin, in seconds.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: propellants

      The names of resources that the RCS consumes.

      :Attribute: Read-only, cannot be set
      :rtype: List of string

   .. attribute:: propellant_ratios

      The ratios of resources that the RCS consumes. A dictionary mapping resource names
      to the ratios at which they are consumed by the RCS.

      :Attribute: Read-only, cannot be set
      :rtype: Map from string to number

   .. attribute:: has_fuel

      Whether the RCS has fuel available.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

      .. note::

         The RCS thruster must be activated for this property to update correctly.



Sensor
^^^^^^


.. class:: Sensor

   A sensor, such as a thermometer. Obtained by calling :attr:`SpaceCenter.Part.sensor`.

   .. attribute:: part

      The part object for this sensor.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: active

      Whether the sensor is active.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: value

      The current value of the sensor.

      :Attribute: Read-only, cannot be set
      :rtype: string

   .. attribute:: power_usage

      The current power usage of the sensor, in units of charge per second.

      :Attribute: Read-only, cannot be set
      :rtype: number



Solar Panel
^^^^^^^^^^^


.. class:: SolarPanel

   A solar panel. Obtained by calling :attr:`SpaceCenter.Part.solar_panel`.

   .. attribute:: part

      The part object for this solar panel.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. attribute:: deployed

      Whether the solar panel is extended.

      :Attribute: Can be read or written
      :rtype: boolean

   .. attribute:: state

      The current state of the solar panel.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.SolarPanelState`

   .. attribute:: energy_flow

      The current amount of energy being generated by the solar panel, in
      units of charge per second.

      :Attribute: Read-only, cannot be set
      :rtype: number

   .. attribute:: sun_exposure

      The current amount of sunlight that is incident on the solar panel,
      as a percentage. A value between 0 and 1.

      :Attribute: Read-only, cannot be set
      :rtype: number



.. class:: SolarPanelState

   The state of a solar panel. See :attr:`SpaceCenter.SolarPanel.state`.


   .. data:: extended

      Solar panel is fully extended.


   .. data:: retracted

      Solar panel is fully retracted.


   .. data:: extending

      Solar panel is being extended.


   .. data:: retracting

      Solar panel is being retracted.


   .. data:: broken

      Solar panel is broken.



Thruster
^^^^^^^^


.. class:: Thruster

   The component of an :class:`SpaceCenter.Engine` or :class:`SpaceCenter.RCS` part that generates thrust.
   Can obtained by calling :attr:`SpaceCenter.Engine.thrusters` or :attr:`SpaceCenter.RCS.thrusters`.

   .. note::

      Engines can consist of multiple thrusters.
      For example, the S3 KS-25x4 "Mammoth" has four rocket nozzels, and so consists of four thrusters.

   .. attribute:: part

      The :class:`SpaceCenter.Part` that contains this thruster.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.Part`

   .. method:: thrust_position(reference_frame)

      The position at which the thruster generates thrust, in the given reference frame.
      For gimballed engines, this takes into account the current rotation of the gimbal.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. method:: thrust_direction(reference_frame)

      The direction of the force generated by the thruster, in the given reference frame.
      This is opposite to the direction in which the thruster expels propellant.
      For gimballed engines, this takes into account the current rotation of the gimbal.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. attribute:: thrust_reference_frame

      A reference frame that is fixed relative to the thruster and orientated with
      its thrust direction (:meth:`SpaceCenter.Thruster.thrust_direction`).
      For gimballed engines, this takes into account the current rotation of the gimbal.

      * The origin is at the position of thrust for this thruster (:meth:`SpaceCenter.Thruster.thrust_position`).
      * The axes rotate with the thrust direction.
        This is the direction in which the thruster expels propellant, including any gimballing.
      * The y-axis points along the thrust direction.
      * The x-axis and z-axis are perpendicular to the thrust direction.

      :Attribute: Read-only, cannot be set
      :rtype: :class:`SpaceCenter.ReferenceFrame`

   .. attribute:: gimballed

      Whether the thruster is gimballed.

      :Attribute: Read-only, cannot be set
      :rtype: boolean

   .. method:: gimbal_position(reference_frame)

      Position around which the gimbal pivots.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

   .. attribute:: gimbal_angle

      The current gimbal angle in the pitch, roll and yaw axes.

      :Attribute: Read-only, cannot be set
      :rtype: Tuple of (number, number, number)

   .. method:: initial_thrust_position(reference_frame)

      The position at which the thruster generates thrust, when the engine is in its
      initial position (no gimballing), in the given reference frame.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)

      .. note::

         This position can move when the gimbal rotates. This is because the thrust position and
         gimbal position are not necessarily the same.

   .. method:: initial_thrust_direction(reference_frame)

      The direction of the force generated by the thruster, when the engine is in its
      initial position (no gimballing), in the given reference frame.
      This is opposite to the direction in which the thruster expels propellant.

      :param SpaceCenter.ReferenceFrame reference_frame:
      :rtype: Tuple of (number, number, number)



.. _lua-api-parts-trees-of-parts:

Trees of Parts
--------------

Vessels in KSP are comprised of a number of parts, connected to one another in a
*tree* structure. An example vessel is shown in Figure 1, and the corresponding
tree of parts in Figure 2. The craft file for this example can also be
:download:`downloaded here </crafts/PartsTree.craft>`.

.. figure:: /images/api/parts.png
   :align: left
   :figwidth: 275

   **Figure 1** -- Example parts making up a vessel.

.. figure:: /images/api/parts-tree.png
   :align: right
   :figwidth: 275

   **Figure 2** -- Tree of parts for the vessel in Figure 1. Arrows point from
   the parent part to the child part.

.. container:: clearer

   ..

Traversing the Tree
^^^^^^^^^^^^^^^^^^^

The tree of parts can be traversed using the attributes :attr:`SpaceCenter.Parts.root`,
:attr:`SpaceCenter.Part.parent` and :attr:`SpaceCenter.Part.children`.

The root of the tree is the same as the vessels *root part* (part number 1 in
the example above) and can be obtained by calling :attr:`SpaceCenter.Parts.root`.
A parts children can be obtained by calling :attr:`SpaceCenter.Part.children`.
If the part does not have any children, :attr:`SpaceCenter.Part.children`
returns an empty list. A parts parent can be obtained by calling
:attr:`SpaceCenter.Part.parent`. If the part does not have a parent
(as is the case for the root part), :attr:`SpaceCenter.Part.parent`
returns ``nil``.

The following Lua example uses these attributes to perform a
depth-first traversal over all of the parts in a vessel:

.. literalinclude:: /scripts/TreeTraversal.lua

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

    Command Pod Mk1
     TR-18A Stack Decoupler
      FL-T400 Fuel Tank
       LV-909 Liquid Fuel Engine
        TR-18A Stack Decoupler
         FL-T800 Fuel Tank
          LV-909 Liquid Fuel Engine
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
       LT-1 Landing Struts
       LT-1 Landing Struts
     Mk16 Parachute

.. _lua-api-parts-attachment-modes:

Attachment Modes
^^^^^^^^^^^^^^^^

Parts can be attached to other parts either *radially* (on the side of the
parent part) or *axially* (on the end of the parent part, to form a stack).

For example, in the vessel pictured above, the parachute (part 2) is *axially*
connected to its parent (the command pod -- part 1), and the landing leg
(part 5) is *radially* connected to its parent (the fuel tank -- part 4).

The root part of a vessel (for example the command pod -- part 1) does not have
a parent part, so does not have an attachment mode. However, the part is
consider to be *axially* attached to nothing.

The following Lua example does a depth-first traversal as before,
but also prints out the attachment mode used by the part:

.. literalinclude:: /scripts/AttachmentModes.lua

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

 Command Pod Mk1 - axial
  TR-18A Stack Decoupler - axial
   FL-T400 Fuel Tank - axial
    LV-909 Liquid Fuel Engine - axial
     TR-18A Stack Decoupler - axial
      FL-T800 Fuel Tank - axial
       LV-909 Liquid Fuel Engine - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
    LT-1 Landing Struts - radial
    LT-1 Landing Struts - radial
  Mk16 Parachute - axial

.. _lua-api-parts-fuel-lines:

Fuel Lines
----------

.. figure:: /images/api/parts-fuel-lines.png
   :align: right
   :figwidth: 200

   **Figure 5** -- Fuel lines from the example in Figure 1. Fuel flows from the
   parts highlighted in green, into the part highlighted in blue.

.. figure:: /images/api/parts-fuel-lines-tree.png
   :align: right
   :figwidth: 200

   **Figure 4** -- A subset of the parts tree from Figure 2 above.

Fuel lines are considered parts, and are included in the parts tree (for
example, as pictured in Figure 4). However, the parts tree does not contain
information about which parts fuel lines connect to. The parent part of a fuel
line is the part from which it will take fuel (as shown in Figure 4) however the
part that it will send fuel to is not represented in the parts tree.

Figure 5 shows the fuel lines from the example vessel pictured earlier. Fuel
line part 15 (in red) takes fuel from a fuel tank (part 11 -- in green) and
feeds it into another fuel tank (part 9 -- in blue). The fuel line is therefore
a child of part 11, but its connection to part 9 is not represented in the tree.

The attributes :attr:`SpaceCenter.Part.fuel_lines_from` and
:attr:`SpaceCenter.Part.fuel_lines_to` can be used to discover these
connections. In the example in Figure 5, when
:attr:`SpaceCenter.Part.fuel_lines_to` is called on fuel tank part
11, it will return a list of parts containing just fuel tank part 9 (the blue
part). When :attr:`SpaceCenter.Part.fuel_lines_from` is called on
fuel tank part 9, it will return a list containing fuel tank parts 11 and 17
(the parts colored green).

.. _lua-api-parts-staging:

Staging
-------

.. figure:: /images/api/parts-staging.png
   :align: right
   :figwidth: 340

   **Figure 6** -- Example vessel from Figure 1 with a staging sequence.

Each part has two staging numbers associated with it: the stage in which the
part is *activated* and the stage in which the part is *decoupled*. These values
can be obtained using :attr:`SpaceCenter.Part.stage` and
:attr:`SpaceCenter.Part.decouple_stage` respectively. For parts that
are not activated by staging, :attr:`SpaceCenter.Part.stage` returns
-1. For parts that are never decoupled,
:attr:`SpaceCenter.Part.decouple_stage` returns a value of -1.

Figure 6 shows an example staging sequence for a vessel. Figure 7 shows the
stages in which each part of the vessel will be *activated*. Figure 8 shows the
stages in which each part of the vessel will be *decoupled*.

.. container:: clearer

   ..

.. figure:: /images/api/parts-staging-activate.png
   :align: left
   :figwidth: 250

   **Figure 7** -- The stage in which each part is *activated*.

.. figure:: /images/api/parts-staging-decouple.png
   :align: right
   :figwidth: 250

   **Figure 8** -- The stage in which each part is *decoupled*.

.. container:: clearer

   ..
