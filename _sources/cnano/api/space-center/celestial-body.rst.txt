.. default-domain:: c
.. highlight:: c


CelestialBody
=============


.. type:: krpc_SpaceCenter_CelestialBody_t

   Represents a celestial body (such as a planet or moon).
   See :func:`krpc_SpaceCenter_Bodies`.

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Name(krpc_connection_t connection, char * * result)

      The name of the body.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Satellites(krpc_connection_t connection, krpc_list_object_t * result)

      A list of celestial bodies that are in orbit around this celestial body.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Orbit(krpc_connection_t connection, krpc_SpaceCenter_Orbit_t * result)

      The orbit of the body.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Mass(krpc_connection_t connection, float * result)

      The mass of the body, in kilograms.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_GravitationalParameter(krpc_connection_t connection, float * result)

      The `standard gravitational parameter <https://en.wikipedia.org/wiki/Standard_gravitational_parameter>`_ of the body in :math:`m^3s^{-2}`.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_SurfaceGravity(krpc_connection_t connection, float * result)

      The acceleration due to gravity at sea level (mean altitude) on the body,
      in :math:`m/s^2`.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_RotationalPeriod(krpc_connection_t connection, float * result)

      The sidereal rotational period of the body, in seconds.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_RotationalSpeed(krpc_connection_t connection, float * result)

      The rotational speed of the body, in radians per second.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_RotationAngle(krpc_connection_t connection, double * result)

      The current rotation angle of the body, in radians.
      A value between 0 and :math:`2\pi`

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_InitialRotation(krpc_connection_t connection, double * result)

      The initial rotation angle of the body (at UT 0), in radians.
      A value between 0 and :math:`2\pi`

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_EquatorialRadius(krpc_connection_t connection, float * result)

      The equatorial radius of the body, in meters.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_SurfaceHeight(krpc_connection_t connection, double * result, double latitude, double longitude)

      The height of the surface relative to mean sea level, in meters,
      at the given position. When over water this is equal to 0.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_BedrockHeight(krpc_connection_t connection, double * result, double latitude, double longitude)

      The height of the surface relative to mean sea level, in meters,
      at the given position. When over water, this is the height
      of the sea-bed and is therefore  negative value.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_MSLPosition(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, double latitude, double longitude, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The position at mean sea level at the given latitude and longitude,
      in the given reference frame.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **referenceFrame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_SurfacePosition(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, double latitude, double longitude, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The position of the surface at the given latitude and longitude, in the given
      reference frame. When over water, this is the position of the surface of the water.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **referenceFrame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_BedrockPosition(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, double latitude, double longitude, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The position of the surface at the given latitude and longitude, in the given
      reference frame. When over water, this is the position at the bottom of the sea-bed.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **referenceFrame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_PositionAtAltitude(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, double latitude, double longitude, double altitude, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The position at the given latitude, longitude and altitude, in the given reference frame.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **altitude** -- Altitude in meters above sea level.
       * **referenceFrame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_AltitudeAtPosition(krpc_connection_t connection, double * result, const krpc_tuple_double_double_double_t * position, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The altitude, in meters, of the given position in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **referenceFrame** -- Reference frame for the position vector.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_LatitudeAtPosition(krpc_connection_t connection, double * result, const krpc_tuple_double_double_double_t * position, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The latitude of the given position, in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **referenceFrame** -- Reference frame for the position vector.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_LongitudeAtPosition(krpc_connection_t connection, double * result, const krpc_tuple_double_double_double_t * position, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The longitude of the given position, in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **referenceFrame** -- Reference frame for the position vector.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_SphereOfInfluence(krpc_connection_t connection, float * result)

      The radius of the sphere of influence of the body, in meters.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_HasAtmosphere(krpc_connection_t connection, bool * result)

      ``true`` if the body has an atmosphere.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_AtmosphereDepth(krpc_connection_t connection, float * result)

      The depth of the atmosphere, in meters.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_AtmosphericDensityAtPosition(krpc_connection_t connection, double * result, const krpc_tuple_double_double_double_t * position, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The atmospheric density at the given position, in :math:`kg/m^3`,
      in the given reference frame.

      :Parameters:

       * **position** -- The position vector at which to measure the density.
       * **referenceFrame** -- Reference frame that the position vector is in.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_HasAtmosphericOxygen(krpc_connection_t connection, bool * result)

      ``true`` if there is oxygen in the atmosphere, required for air-breathing engines.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_TemperatureAt(krpc_connection_t connection, double * result, const krpc_tuple_double_double_double_t * position, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The temperature on the body at the given position, in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **referenceFrame** -- The reference frame that the position is in.

      :Game Scenes: All


      .. note::

         This calculation is performed using the bodies current position, which means that
         the value could be wrong if you want to know the temperature in the far future.

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_DensityAt(krpc_connection_t connection, double * result, double altitude)

      Gets the air density, in :math:`kg/m^3`, for the specified
      altitude above sea level, in meters.

      :Parameters:



      :Game Scenes: All


      .. note::

         This is an approximation, because actual calculations, taking sun exposure into account
         to compute air temperature, require us to know the exact point on the body where the
         density is to be computed (knowing the altitude is not enough).
         However, the difference is small for high altitudes, so it makes very little difference
         for trajectory prediction.

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_PressureAt(krpc_connection_t connection, double * result, double altitude)

      Gets the air pressure, in Pascals, for the specified
      altitude above sea level, in meters.

      :Parameters:



      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Biomes(krpc_connection_t connection, krpc_set_string_t * result)

      The biomes present on this body.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_BiomeAt(krpc_connection_t connection, char * * result, double latitude, double longitude)

      The biome at the given latitude and longitude, in degrees.

      :Parameters:




      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_FlyingHighAltitudeThreshold(krpc_connection_t connection, float * result)

      The altitude, in meters, above which a vessel is considered to be
      flying "high" when doing science.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_SpaceHighAltitudeThreshold(krpc_connection_t connection, float * result)

      The altitude, in meters, above which a vessel is considered to be
      in "high" space when doing science.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_ReferenceFrame(krpc_connection_t connection, krpc_SpaceCenter_ReferenceFrame_t * result)

      The reference frame that is fixed relative to the celestial body.

      * The origin is at the center of the body.
      * The axes rotate with the body.
      * The x-axis points from the center of the body
        towards the intersection of the prime meridian and equator (the
        position at 0° longitude, 0° latitude).
      * The y-axis points from the center of the body
        towards the north pole.
      * The z-axis points from the center of the body
        towards the equator at 90°E longitude.

      :Game Scenes: All


      .. figure:: /images/reference-frames/celestial-body.png
         :align: center

         Celestial body reference frame origin and axes. The equator is shown in
         blue, and the prime meridian in red.

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_NonRotatingReferenceFrame(krpc_connection_t connection, krpc_SpaceCenter_ReferenceFrame_t * result)

      The reference frame that is fixed relative to this celestial body, and
      orientated in a fixed direction (it does not rotate with the body).

      * The origin is at the center of the body.
      * The axes do not rotate.
      * The x-axis points in an arbitrary direction through the
        equator.
      * The y-axis points from the center of the body towards
        the north pole.
      * The z-axis points in an arbitrary direction through the
        equator.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_OrbitalReferenceFrame(krpc_connection_t connection, krpc_SpaceCenter_ReferenceFrame_t * result)

      The reference frame that is fixed relative to this celestial body, but
      orientated with the body's orbital prograde/normal/radial directions.

      * The origin is at the center of the body.
      * The axes rotate with the orbital prograde/normal/radial
        directions.
      * The x-axis points in the orbital anti-radial direction.
      * The y-axis points in the orbital prograde direction.
      * The z-axis points in the orbital normal direction.

      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Position(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The position of the center of the body, in the specified reference frame.

      :Parameters:

       * **referenceFrame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Velocity(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The linear velocity of the body, in the specified reference frame.

      :Parameters:

       * **referenceFrame** -- The reference frame that the returned velocity vector is in.

      :returns: The velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the body in meters per second.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Rotation(krpc_connection_t connection, krpc_tuple_double_double_double_double_t * result, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The rotation of the body, in the specified reference frame.

      :Parameters:

       * **referenceFrame** -- The reference frame that the returned rotation is in.

      :returns: The rotation as a quaternion of the form :math:`(x, y, z, w)`.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_Direction(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The direction in which the north pole of the celestial body is pointing,
      in the specified reference frame.

      :Parameters:

       * **referenceFrame** -- The reference frame that the returned direction is in.

      :returns: The direction as a unit vector.
      :Game Scenes: All

   .. function:: krpc_error_t krpc_SpaceCenter_CelestialBody_AngularVelocity(krpc_connection_t connection, krpc_tuple_double_double_double_t * result, krpc_SpaceCenter_ReferenceFrame_t referenceFrame)

      The angular velocity of the body in the specified reference frame.

      :Parameters:

       * **referenceFrame** -- The reference frame the returned angular velocity is in.

      :returns: The angular velocity as a vector. The magnitude of the vector is the rotational speed of the body, in radians per second. The direction of the vector indicates the axis of rotation, using the right-hand rule.
      :Game Scenes: All
