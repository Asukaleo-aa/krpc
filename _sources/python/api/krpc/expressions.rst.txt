.. default-domain:: py
.. highlight:: py
.. currentmodule:: KRPC

Expressions
===========


.. class:: Expression

   A server side expression.

   .. staticmethod:: constant_double(value)

      A constant value of type double.

      :param float value:
      :rtype: :class:`Expression`

   .. staticmethod:: constant_float(value)

      A constant value of type float.

      :param float value:
      :rtype: :class:`Expression`

   .. staticmethod:: constant_int(value)

      A constant value of type int.

      :param int value:
      :rtype: :class:`Expression`

   .. staticmethod:: constant_string(value)

      A constant value of type string.

      :param str value:
      :rtype: :class:`Expression`

   .. staticmethod:: call(call)

      An RPC call.

      :param krpc.schema.KRPC.ProcedureCall call:
      :rtype: :class:`Expression`

   .. staticmethod:: equal(arg0, arg1)

      Equality comparison.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: not_equal(arg0, arg1)

      Inequality comparison.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: greater_than(arg0, arg1)

      Greater than numerical comparison.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: greater_than_or_equal(arg0, arg1)

      Greater than or equal numerical comparison.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: less_than(arg0, arg1)

      Less than numerical comparison.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: less_than_or_equal(arg0, arg1)

      Less than or equal numerical comparison.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: and(arg0, arg1)

      Boolean and operator.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: or(arg0, arg1)

      Boolean or operator.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: exclusive_or(arg0, arg1)

      Boolean exclusive-or operator.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: not(arg)

      Boolean negation operator.

      :param Expression arg:
      :rtype: :class:`Expression`

   .. staticmethod:: add(arg0, arg1)

      Numerical addition.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: subtract(arg0, arg1)

      Numerical subtraction.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: multiply(arg0, arg1)

      Numerical multiplication.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: divide(arg0, arg1)

      Numerical division.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: modulo(arg0, arg1)

      Numerical modulo operator.

      :param Expression arg0:
      :param Expression arg1:
      :returns: The remainder of arg0 divided by arg1
      :rtype: :class:`Expression`

   .. staticmethod:: power(arg0, arg1)

      Numerical power operator.

      :param Expression arg0:
      :param Expression arg1:
      :returns: arg0 raised to the power of arg1
      :rtype: :class:`Expression`

   .. staticmethod:: left_shift(arg0, arg1)

      Bitwise left shift.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: right_shift(arg0, arg1)

      Bitwise right shift.

      :param Expression arg0:
      :param Expression arg1:
      :rtype: :class:`Expression`

   .. staticmethod:: to_double(arg)

      Convert to a double type.

      :param Expression arg:
      :rtype: :class:`Expression`

   .. staticmethod:: to_float(arg)

      Convert to a float type.

      :param Expression arg:
      :rtype: :class:`Expression`

   .. staticmethod:: to_int(arg)

      Convert to an int type.

      :param Expression arg:
      :rtype: :class:`Expression`
