.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

AutoPilot
=========


.. class:: AutoPilot

   Provides basic auto-piloting utilities for a vessel.
   Created by calling :prop:`Vessel.AutoPilot`.

   .. note::

      If a client engages the auto-pilot and then closes its connection to the server,
      the auto-pilot will be disengaged and its target reference frame, direction and roll
      reset to default.

   .. method:: void Engage()

      Engage the auto-pilot.

   .. method:: void Disengage()

      Disengage the auto-pilot.

   .. method:: void Wait()

      Blocks until the vessel is pointing in the target direction and has
      the target roll (if set).

   .. property:: float Error { get; }

      The error, in degrees, between the direction the ship has been asked
      to point in and the direction it is pointing in. Returns zero if the auto-pilot
      has not been engaged and SAS is not enabled or is in stability assist mode.

   .. property:: float PitchError { get; }

      The error, in degrees, between the vessels current and target pitch.
      Returns zero if the auto-pilot has not been engaged.

   .. property:: float HeadingError { get; }

      The error, in degrees, between the vessels current and target heading.
      Returns zero if the auto-pilot has not been engaged.

   .. property:: float RollError { get; }

      The error, in degrees, between the vessels current and target roll.
      Returns zero if the auto-pilot has not been engaged or no target roll is set.

   .. property:: ReferenceFrame ReferenceFrame { get; set; }

      The reference frame for the target direction (:prop:`AutoPilot.TargetDirection`).


      .. note::

         An error will be thrown if this property is set to a reference frame that rotates with
         the vessel being controlled, as it is impossible to rotate the vessel in such a
         reference frame.

   .. property:: float TargetPitch { get; set; }

      The target pitch, in degrees, between -90° and +90°.

   .. property:: float TargetHeading { get; set; }

      The target heading, in degrees, between 0° and 360°.

   .. property:: float TargetRoll { get; set; }

      The target roll, in degrees. ``NaN`` if no target roll is set.

   .. property:: System.Tuple<double,double,double> TargetDirection { get; set; }

      Direction vector corresponding to the target pitch and heading.
      This is in the reference frame specified by :type:`ReferenceFrame`.

   .. method:: void TargetPitchAndHeading(float pitch, float heading)

      Set target pitch and heading angles.

      :parameters:

       * **pitch** -- Target pitch angle, in degrees between -90° and +90°.
       * **heading** -- Target heading angle, in degrees between 0° and 360°.

   .. property:: bool SAS { get; set; }

      The state of SAS.


      .. note::

         Equivalent to :prop:`Control.SAS`

   .. property:: SASMode SASMode { get; set; }

      The current :type:`SASMode`.
      These modes are equivalent to the mode buttons to the left of the navball that appear
      when SAS is enabled.


      .. note::

         Equivalent to :prop:`Control.SASMode`

   .. property:: double RollThreshold { get; set; }

      The threshold at which the autopilot will try to match the target roll angle, if any.
      Defaults to 5 degrees.

   .. property:: System.Tuple<double,double,double> StoppingTime { get; set; }

      The maximum amount of time that the vessel should need to come to a complete stop.
      This determines the maximum angular velocity of the vessel.
      A vector of three stopping times, in seconds, one for each of the pitch, roll
      and yaw axes. Defaults to 0.5 seconds for each axis.

   .. property:: System.Tuple<double,double,double> DecelerationTime { get; set; }

      The time the vessel should take to come to a stop pointing in the target direction.
      This determines the angular acceleration used to decelerate the vessel.
      A vector of three times, in seconds, one for each of the pitch, roll and yaw axes.
      Defaults to 5 seconds for each axis.

   .. property:: System.Tuple<double,double,double> AttenuationAngle { get; set; }

      The angle at which the autopilot considers the vessel to be pointing
      close to the target.
      This determines the midpoint of the target velocity attenuation function.
      A vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.
      Defaults to 1° for each axis.

   .. property:: bool AutoTune { get; set; }

      Whether the rotation rate controllers PID parameters should be automatically tuned
      using the vessels moment of inertia and available torque. Defaults to ``true``.
      See :prop:`AutoPilot.TimeToPeak` and :prop:`AutoPilot.Overshoot`.

   .. property:: System.Tuple<double,double,double> TimeToPeak { get; set; }

      The target time to peak used to autotune the PID controllers.
      A vector of three times, in seconds, for each of the pitch, roll and yaw axes.
      Defaults to 3 seconds for each axis.

   .. property:: System.Tuple<double,double,double> Overshoot { get; set; }

      The target overshoot percentage used to autotune the PID controllers.
      A vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.
      Defaults to 0.01 for each axis.

   .. property:: System.Tuple<double,double,double> PitchPIDGains { get; set; }

      Gains for the pitch PID controller.


      .. note::

         When :prop:`AutoPilot.AutoTune` is true, these values are updated automatically,
         which will overwrite any manual changes.

   .. property:: System.Tuple<double,double,double> RollPIDGains { get; set; }

      Gains for the roll PID controller.


      .. note::

         When :prop:`AutoPilot.AutoTune` is true, these values are updated automatically,
         which will overwrite any manual changes.

   .. property:: System.Tuple<double,double,double> YawPIDGains { get; set; }

      Gains for the yaw PID controller.


      .. note::

         When :prop:`AutoPilot.AutoTune` is true, these values are updated automatically,
         which will overwrite any manual changes.
