.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

Orbit
=====


.. class:: Orbit

   Describes an orbit. For example, the orbit of a vessel, obtained by calling
   :prop:`Vessel.Orbit`, or a celestial body, obtained by calling
   :prop:`CelestialBody.Orbit`.

   .. property:: CelestialBody Body { get; }

      The celestial body (e.g. planet or moon) around which the object is orbiting.

   .. property:: double Apoapsis { get; }

      Gets the apoapsis of the orbit, in meters, from the center of mass of the body being orbited.


      .. note::

         For the apoapsis altitude reported on the in-game map view, use :prop:`Orbit.ApoapsisAltitude`.

   .. property:: double Periapsis { get; }

      The periapsis of the orbit, in meters, from the center of mass of the body being orbited.


      .. note::

         For the periapsis altitude reported on the in-game map view, use :prop:`Orbit.PeriapsisAltitude`.

   .. property:: double ApoapsisAltitude { get; }

      The apoapsis of the orbit, in meters, above the sea level of the body being orbited.


      .. note::

         This is equal to :prop:`Orbit.Apoapsis` minus the equatorial radius of the body.

   .. property:: double PeriapsisAltitude { get; }

      The periapsis of the orbit, in meters, above the sea level of the body being orbited.


      .. note::

         This is equal to :prop:`Orbit.Periapsis` minus the equatorial radius of the body.

   .. property:: double SemiMajorAxis { get; }

      The semi-major axis of the orbit, in meters.

   .. property:: double SemiMinorAxis { get; }

      The semi-minor axis of the orbit, in meters.

   .. property:: double Radius { get; }

      The current radius of the orbit, in meters. This is the distance between the center
      of mass of the object in orbit, and the center of mass of the body around which it is orbiting.


      .. note::

         This value will change over time if the orbit is elliptical.

   .. property:: double Speed { get; }

      The current orbital speed of the object in meters per second.


      .. note::

         This value will change over time if the orbit is elliptical.

   .. property:: double Period { get; }

      The orbital period, in seconds.

   .. property:: double TimeToApoapsis { get; }

      The time until the object reaches apoapsis, in seconds.

   .. property:: double TimeToPeriapsis { get; }

      The time until the object reaches periapsis, in seconds.

   .. property:: double Eccentricity { get; }

      The `eccentricity <https://en.wikipedia.org/wiki/Orbital_eccentricity>`_ of the orbit.

   .. property:: double Inclination { get; }

      The `inclination <https://en.wikipedia.org/wiki/Orbital_inclination>`_ of the orbit,
      in radians.

   .. property:: double LongitudeOfAscendingNode { get; }

      The `longitude of the ascending node <https://en.wikipedia.org/wiki/Longitude_of_the_ascending_node>`_, in radians.

   .. property:: double ArgumentOfPeriapsis { get; }

      The `argument of periapsis <https://en.wikipedia.org/wiki/Argument_of_periapsis>`_, in radians.

   .. property:: double MeanAnomalyAtEpoch { get; }

      The `mean anomaly at epoch <https://en.wikipedia.org/wiki/Mean_anomaly>`_.

   .. property:: double Epoch { get; }

      The time since the epoch (the point at which the
      `mean anomaly at epoch <https://en.wikipedia.org/wiki/Mean_anomaly>`_ was measured, in seconds.

   .. property:: double MeanAnomaly { get; }

      The `mean anomaly <https://en.wikipedia.org/wiki/Mean_anomaly>`_.

   .. property:: double EccentricAnomaly { get; }

      The `eccentric anomaly <https://en.wikipedia.org/wiki/Eccentric_anomaly>`_.

   .. method:: double EccentricAnomalyAtUT(double ut)

      The eccentric anomaly at the given universal time.

      :parameters:

       * **ut** -- The universal time, in seconds.

   .. property:: double TrueAnomaly { get; }

      The `true anomaly <https://en.wikipedia.org/wiki/True_anomaly>`_.

   .. method:: double TrueAnomalyAtUT(double ut)

      The true anomaly at the given time.

      :parameters:

       * **ut** -- The universal time in seconds.

   .. method:: double TrueAnomalyAtRadius(double radius)

      The true anomaly at the given orbital radius.

      :parameters:

       * **radius** -- The orbital radius in meters.

   .. method:: double UTAtTrueAnomaly(double trueAnomaly)

      The universal time, in seconds, corresponding to the given true anomaly.

      :parameters:

       * **trueAnomaly** -- True anomaly.

   .. method:: double RadiusAtTrueAnomaly(double trueAnomaly)

      The orbital radius at the point in the orbit given by the true anomaly.

      :parameters:

       * **trueAnomaly** -- The true anomaly.

   .. property:: double OrbitalSpeed { get; }

      The current orbital speed in meters per second.

   .. method:: double OrbitalSpeedAt(double time)

      The orbital speed at the given time, in meters per second.

      :parameters:

       * **time** -- Time from now, in seconds.

   .. method:: static System.Tuple<double,double,double> ReferencePlaneNormal(ReferenceFrame referenceFrame)

      The unit direction vector that is normal to the orbits reference plane, in the given
      reference frame. The reference plane is the plane from which the orbits inclination is measured.

      :parameters:

   .. method:: static System.Tuple<double,double,double> ReferencePlaneDirection(ReferenceFrame referenceFrame)

      The unit direction vector from which the orbits longitude of ascending node is measured,
      in the given reference frame.

      :parameters:

   .. property:: double TimeToSOIChange { get; }

      The time until the object changes sphere of influence, in seconds. Returns ``NaN`` if the
      object is not going to change sphere of influence.

   .. property:: Orbit NextOrbit { get; }

      If the object is going to change sphere of influence in the future, returns the new orbit
      after the change. Otherwise returns ``null``.
