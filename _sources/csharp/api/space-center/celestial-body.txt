.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

CelestialBody
=============


.. class:: CelestialBody

   Represents a celestial body (such as a planet or moon).
   See :prop:`SpaceCenter.Bodies`.

   .. property:: string Name { get; }

      The name of the body.

   .. property:: System.Collections.Generic.IList<CelestialBody> Satellites { get; }

      A list of celestial bodies that are in orbit around this celestial body.

   .. property:: Orbit Orbit { get; }

      The orbit of the body.

   .. property:: float Mass { get; }

      The mass of the body, in kilograms.

   .. property:: float GravitationalParameter { get; }

      The `standard gravitational parameter <https://en.wikipedia.org/wiki/Standard_gravitational_parameter>`_ of the body in :math:`m^3s^{-2}`.

   .. property:: float SurfaceGravity { get; }

      The acceleration due to gravity at sea level (mean altitude) on the body, in :math:`m/s^2`.

   .. property:: float RotationalPeriod { get; }

      The sidereal rotational period of the body, in seconds.

   .. property:: float RotationalSpeed { get; }

      The rotational speed of the body, in radians per second.

   .. property:: float EquatorialRadius { get; }

      The equatorial radius of the body, in meters.

   .. method:: double SurfaceHeight(double latitude, double longitude)

      The height of the surface relative to mean sea level at the given position,
      in meters. When over water this is equal to 0.

      :parameters:

       * **latitude** -- Latitude in degrees
       * **longitude** -- Longitude in degrees

   .. method:: double BedrockHeight(double latitude, double longitude)

      The height of the surface relative to mean sea level at the given position,
      in meters. When over water, this is the height of the sea-bed and is therefore a
      negative value.

      :parameters:

       * **latitude** -- Latitude in degrees
       * **longitude** -- Longitude in degrees

   .. method:: System.Tuple<double,double,double> MSLPosition(double latitude, double longitude, ReferenceFrame referenceFrame)

      The position at mean sea level at the given latitude and longitude, in the given reference frame.

      :parameters:

       * **latitude** -- Latitude in degrees
       * **longitude** -- Longitude in degrees
       * **referenceFrame** -- Reference frame for the returned position vector

   .. method:: System.Tuple<double,double,double> SurfacePosition(double latitude, double longitude, ReferenceFrame referenceFrame)

      The position of the surface at the given latitude and longitude, in the given
      reference frame. When over water, this is the position of the surface of the water.

      :parameters:

       * **latitude** -- Latitude in degrees
       * **longitude** -- Longitude in degrees
       * **referenceFrame** -- Reference frame for the returned position vector

   .. method:: System.Tuple<double,double,double> BedrockPosition(double latitude, double longitude, ReferenceFrame referenceFrame)

      The position of the surface at the given latitude and longitude, in the given
      reference frame. When over water, this is the position at the bottom of the sea-bed.

      :parameters:

       * **latitude** -- Latitude in degrees
       * **longitude** -- Longitude in degrees
       * **referenceFrame** -- Reference frame for the returned position vector

   .. property:: float SphereOfInfluence { get; }

      The radius of the sphere of influence of the body, in meters.

   .. property:: bool HasAtmosphere { get; }

      ``true`` if the body has an atmosphere.

   .. property:: float AtmosphereDepth { get; }

      The depth of the atmosphere, in meters.

   .. property:: bool HasAtmosphericOxygen { get; }

      ``true`` if there is oxygen in the atmosphere, required for air-breathing engines.

   .. property:: System.Collections.Generic.IList<string> Biomes { get; }

      The biomes present on this body.

   .. method:: string BiomeAt(double latitude, double longitude)

      The biomes at the given latitude and longitude, in degrees.

      :parameters:

   .. property:: float FlyingHighAltitudeThreshold { get; }

      The altitude, in meters, above which a vessel is considered to be flying "high" when doing science.

   .. property:: float SpaceHighAltitudeThreshold { get; }

      The altitude, in meters, above which a vessel is considered to be in "high" space when doing science.

   .. property:: ReferenceFrame ReferenceFrame { get; }

      The reference frame that is fixed relative to the celestial body.

      * The origin is at the center of the body.
      * The axes rotate with the body.
      * The x-axis points from the center of the body
        towards the intersection of the prime meridian and equator (the
        position at 0° longitude, 0° latitude).
      * The y-axis points from the center of the body
        towards the north pole.
      * The z-axis points from the center of the body
        towards the equator at 90°E longitude.


      .. figure:: /images/reference-frames/celestial-body.png
         :align: center

         Celestial body reference frame origin and axes. The equator is shown in
         blue, and the prime meridian in red.

   .. property:: ReferenceFrame NonRotatingReferenceFrame { get; }

      The reference frame that is fixed relative to this celestial body, and
      orientated in a fixed direction (it does not rotate with the body).

      * The origin is at the center of the body.
      * The axes do not rotate.
      * The x-axis points in an arbitrary direction through the
        equator.
      * The y-axis points from the center of the body towards
        the north pole.
      * The z-axis points in an arbitrary direction through the
        equator.

   .. property:: ReferenceFrame OrbitalReferenceFrame { get; }

      Gets the reference frame that is fixed relative to this celestial body, but
      orientated with the body's orbital prograde/normal/radial directions.

      * The origin is at the center of the body.
      * The axes rotate with the orbital prograde/normal/radial
        directions.
      * The x-axis points in the orbital anti-radial direction.
      * The y-axis points in the orbital prograde direction.
      * The z-axis points in the orbital normal direction.

   .. method:: System.Tuple<double,double,double> Position(ReferenceFrame referenceFrame)

      Returns the position vector of the center of the body in the specified reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double> Velocity(ReferenceFrame referenceFrame)

      Returns the velocity vector of the body in the specified reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double,double> Rotation(ReferenceFrame referenceFrame)

      Returns the rotation of the body in the specified reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double> Direction(ReferenceFrame referenceFrame)

      Returns the direction in which the north pole of the celestial body is
      pointing, as a unit vector, in the specified reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double> AngularVelocity(ReferenceFrame referenceFrame)

      Returns the angular velocity of the body in the specified reference
      frame. The magnitude of the vector is the rotational speed of the body, in
      radians per second, and the direction of the vector indicates the axis of
      rotation, using the right-hand rule.

      :parameters:
