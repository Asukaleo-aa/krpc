.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

.. _csharp-api-parts:

Parts
=====

The following classes allow interaction with a vessels individual parts.

.. contents::
   :local:

Parts
-----


.. class:: Parts

   Instances of this class are used to interact with the parts of a vessel.
   An instance can be obtained by calling :prop:`Vessel.Parts`.

   .. property:: System.Collections.Generic.IList<Part> All { get; }

      A list of all of the vessels parts.

   .. property:: Part Root { get; }

      The vessels root part.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-trees-of-parts`.

   .. property:: Part Controlling { get; set; }

      The part from which the vessel is controlled.

   .. method:: System.Collections.Generic.IList<Part> WithName(string name)

      A list of parts whose :prop:`Part.Name` is *name*.

      :parameters:

   .. method:: System.Collections.Generic.IList<Part> WithTitle(string title)

      A list of all parts whose :prop:`Part.Title` is *title*.

      :parameters:

   .. method:: System.Collections.Generic.IList<Part> WithTag(string tag)

      A list of all parts whose :prop:`Part.Tag` is *tag*.

      :parameters:

   .. method:: System.Collections.Generic.IList<Part> WithModule(string moduleName)

      A list of all parts that contain a :type:`Module` whose
      :prop:`Module.Name` is *moduleName*.

      :parameters:

   .. method:: System.Collections.Generic.IList<Part> InStage(int stage)

      A list of all parts that are activated in the given *stage*.

      :parameters:




      .. note:: See the discussion on :rst:ref:`csharp-api-parts-staging`.

   .. method:: System.Collections.Generic.IList<Part> InDecoupleStage(int stage)

      A list of all parts that are decoupled in the given *stage*.

      :parameters:




      .. note:: See the discussion on :rst:ref:`csharp-api-parts-staging`.

   .. method:: System.Collections.Generic.IList<Module> ModulesWithName(string moduleName)

      A list of modules (combined across all parts in the vessel) whose
      :prop:`Module.Name` is *moduleName*.

      :parameters:

   .. property:: System.Collections.Generic.IList<CargoBay> CargoBays { get; }

      A list of all cargo bays in the vessel.

   .. property:: System.Collections.Generic.IList<ControlSurface> ControlSurfaces { get; }

      A list of all control surfaces in the vessel.

   .. property:: System.Collections.Generic.IList<Decoupler> Decouplers { get; }

      A list of all decouplers in the vessel.

   .. property:: System.Collections.Generic.IList<DockingPort> DockingPorts { get; }

      A list of all docking ports in the vessel.

   .. property:: System.Collections.Generic.IList<Engine> Engines { get; }

      A list of all engines in the vessel.


      .. note::

         This includes any part that generates thrust. This covers many different types of engine,
         including liquid fuel rockets, solid rocket boosters, jet engines and RCS thrusters.

   .. property:: System.Collections.Generic.IList<Experiment> Experiments { get; }

      A list of all science experiments in the vessel.

   .. property:: System.Collections.Generic.IList<Fairing> Fairings { get; }

      A list of all fairings in the vessel.

   .. property:: System.Collections.Generic.IList<Intake> Intakes { get; }

      A list of all intakes in the vessel.

   .. property:: System.Collections.Generic.IList<LandingGear> LandingGear { get; }

      A list of all landing gear attached to the vessel.

   .. property:: System.Collections.Generic.IList<LandingLeg> LandingLegs { get; }

      A list of all landing legs attached to the vessel.

   .. property:: System.Collections.Generic.IList<LaunchClamp> LaunchClamps { get; }

      A list of all launch clamps attached to the vessel.

   .. property:: System.Collections.Generic.IList<Light> Lights { get; }

      A list of all lights in the vessel.

   .. property:: System.Collections.Generic.IList<Parachute> Parachutes { get; }

      A list of all parachutes in the vessel.

   .. property:: System.Collections.Generic.IList<Radiator> Radiators { get; }

      A list of all radiators in the vessel.

   .. property:: System.Collections.Generic.IList<RCS> RCS { get; }

      A list of all RCS blocks/thrusters in the vessel.

   .. property:: System.Collections.Generic.IList<ReactionWheel> ReactionWheels { get; }

      A list of all reaction wheels in the vessel.

   .. property:: System.Collections.Generic.IList<ResourceConverter> ResourceConverters { get; }

      A list of all resource converters in the vessel.

   .. property:: System.Collections.Generic.IList<ResourceHarvester> ResourceHarvesters { get; }

      A list of all resource harvesters in the vessel.

   .. property:: System.Collections.Generic.IList<Sensor> Sensors { get; }

      A list of all sensors in the vessel.

   .. property:: System.Collections.Generic.IList<SolarPanel> SolarPanels { get; }

      A list of all solar panels in the vessel.



Part
----


.. class:: Part

   Represents an individual part. Vessels are made up of multiple parts.
   Instances of this class can be obtained by several methods in :type:`Parts`.

   .. property:: string Name { get; }

      Internal name of the part, as used in
      `part cfg files <http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation>`_.
      For example "Mark1-2Pod".

   .. property:: string Title { get; }

      Title of the part, as shown when the part is right clicked in-game. For example "Mk1-2 Command Pod".

   .. property:: string Tag { get; set; }

      The name tag for the part. Can be set to a custom string using the in-game user interface.


      .. note::

         This requires either the `NameTag <http://github.com/krpc/NameTag/releases/latest>`_ or
         `kOS <http://forum.kerbalspaceprogram.com/index.php?/topic/61827-/>`_ mods to be installed.

   .. property:: bool Highlighted { get; set; }

      Whether the part is highlighted.

   .. property:: System.Tuple<double,double,double> HighlightColor { get; set; }

      The color used to highlight the part.

   .. property:: double Cost { get; }

      The cost of the part, in units of funds.

   .. property:: Vessel Vessel { get; }

      The vessel that contains this part.

   .. property:: Part Parent { get; }

      The parts parent. Returns ``null`` if the part does not have a parent.
      This, in combination with :prop:`Part.Children`, can be used to traverse the vessels parts tree.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-trees-of-parts`.

   .. property:: System.Collections.Generic.IList<Part> Children { get; }

      The parts children. Returns an empty list if the part has no children.
      This, in combination with :prop:`Part.Parent`, can be used to traverse the vessels parts tree.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-trees-of-parts`.

   .. property:: bool AxiallyAttached { get; }

      Whether the part is axially attached to its parent, i.e. on the top
      or bottom of its parent. If the part has no parent, returns ``false``.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-attachment-modes`.

   .. property:: bool RadiallyAttached { get; }

      Whether the part is radially attached to its parent, i.e. on the side of its parent.
      If the part has no parent, returns ``false``.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-attachment-modes`.

   .. property:: int Stage { get; }

      The stage in which this part will be activated. Returns -1 if the part is not activated by staging.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-staging`.

   .. property:: int DecoupleStage { get; }

      The stage in which this part will be decoupled. Returns -1 if the part is never decoupled from the vessel.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-staging`.

   .. property:: bool Massless { get; }

      Whether the part is `massless <http://wiki.kerbalspaceprogram.com/wiki/Massless_part>`_.

   .. property:: double Mass { get; }

      The current mass of the part, including resources it contains, in kilograms.
      Returns zero if the part is massless.

   .. property:: double DryMass { get; }

      The mass of the part, not including any resources it contains, in kilograms. Returns zero if the part is massless.

   .. property:: bool Shielded { get; }

      Whether the part is shielded from the exterior of the vessel, for example by a fairing.

   .. property:: float DynamicPressure { get; }

      The dynamic pressure acting on the part, in Pascals.

   .. property:: double ImpactTolerance { get; }

      The impact tolerance of the part, in meters per second.

   .. property:: double Temperature { get; }

      Temperature of the part, in Kelvin.

   .. property:: double SkinTemperature { get; }

      Temperature of the skin of the part, in Kelvin.

   .. property:: double MaxTemperature { get; }

      Maximum temperature that the part can survive, in Kelvin.

   .. property:: double MaxSkinTemperature { get; }

      Maximum temperature that the skin of the part can survive, in Kelvin.

   .. property:: float ThermalMass { get; }

      A measure of how much energy it takes to increase the internal temperature of the part, in Joules per Kelvin.

   .. property:: float ThermalSkinMass { get; }

      A measure of how much energy it takes to increase the skin temperature of the part, in Joules per Kelvin.

   .. property:: float ThermalResourceMass { get; }

      A measure of how much energy it takes to increase the temperature of the resources contained in the part, in Joules per Kelvin.

   .. property:: float ThermalConductionFlux { get; }

      The rate at which heat energy is conducting into or out of the part via contact with other parts.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

   .. property:: float ThermalConvectionFlux { get; }

      The rate at which heat energy is convecting into or out of the part from the surrounding atmosphere.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

   .. property:: float ThermalRadiationFlux { get; }

      The rate at which heat energy is radiating into or out of the part from the surrounding environment.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

   .. property:: float ThermalInternalFlux { get; }

      The rate at which heat energy is begin generated by the part.
      For example, some engines generate heat by combusting fuel.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing heat energy.

   .. property:: float ThermalSkinToInternalFlux { get; }

      The rate at which heat energy is transferring between the part's skin and its internals.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part's internals are gaining heat energy,
      and negative means its skin is gaining heat energy.

   .. property:: Resources Resources { get; }

      A :type:`Resources` object for the part.

   .. property:: bool Crossfeed { get; }

      Whether this part is crossfeed capable.

   .. property:: bool IsFuelLine { get; }

      Whether this part is a fuel line.

   .. property:: System.Collections.Generic.IList<Part> FuelLinesFrom { get; }

      The parts that are connected to this part via fuel lines, where the direction of the fuel line is into this part.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-fuel-lines`.

   .. property:: System.Collections.Generic.IList<Part> FuelLinesTo { get; }

      The parts that are connected to this part via fuel lines, where the direction of the fuel line is out of this part.


      .. note:: See the discussion on :rst:ref:`csharp-api-parts-fuel-lines`.

   .. property:: System.Collections.Generic.IList<Module> Modules { get; }

      The modules for this part.

   .. property:: CargoBay CargoBay { get; }

      A :type:`CargoBay` if the part is a cargo bay, otherwise ``null``.

   .. property:: ControlSurface ControlSurface { get; }

      A :type:`ControlSurface` if the part is an aerodynamic control surface, otherwise ``null``.

   .. property:: Decoupler Decoupler { get; }

      A :type:`Decoupler` if the part is a decoupler, otherwise ``null``.

   .. property:: DockingPort DockingPort { get; }

      A :type:`DockingPort` if the part is a docking port, otherwise ``null``.

   .. property:: Engine Engine { get; }

      An :type:`Engine` if the part is an engine, otherwise ``null``.

   .. property:: Experiment Experiment { get; }

      An :type:`Experiment` if the part is a science experiment, otherwise ``null``.

   .. property:: Fairing Fairing { get; }

      A :type:`Fairing` if the part is a fairing, otherwise ``null``.

   .. property:: Intake Intake { get; }

      An :type:`Intake` if the part is an intake, otherwise ``null``.


      .. note::

         This includes any part that generates thrust. This covers many different types of engine,
         including liquid fuel rockets, solid rocket boosters and jet engines.
         For RCS thrusters see :type:`RCS`.

   .. property:: LandingGear LandingGear { get; }

      A :type:`LandingGear` if the part is a landing gear, otherwise ``null``.

   .. property:: LandingLeg LandingLeg { get; }

      A :type:`LandingLeg` if the part is a landing leg, otherwise ``null``.

   .. property:: LaunchClamp LaunchClamp { get; }

      A :type:`LaunchClamp` if the part is a launch clamp, otherwise ``null``.

   .. property:: Light Light { get; }

      A :type:`Light` if the part is a light, otherwise ``null``.

   .. property:: Parachute Parachute { get; }

      A :type:`Parachute` if the part is a parachute, otherwise ``null``.

   .. property:: Radiator Radiator { get; }

      A :type:`Radiator` if the part is a radiator, otherwise ``null``.

   .. property:: RCS RCS { get; }

      A :type:`RCS` if the part is an RCS block/thruster, otherwise ``null``.

   .. property:: ReactionWheel ReactionWheel { get; }

      A :type:`ReactionWheel` if the part is a reaction wheel, otherwise ``null``.

   .. property:: ResourceConverter ResourceConverter { get; }

      A :type:`ResourceConverter` if the part is a resource converter, otherwise ``null``.

   .. property:: ResourceHarvester ResourceHarvester { get; }

      A :type:`ResourceHarvester` if the part is a resource harvester, otherwise ``null``.

   .. property:: Sensor Sensor { get; }

      A :type:`Sensor` if the part is a sensor, otherwise ``null``.

   .. property:: SolarPanel SolarPanel { get; }

      A :type:`SolarPanel` if the part is a solar panel, otherwise ``null``.

   .. method:: System.Tuple<double,double,double> Position(ReferenceFrame referenceFrame)

      The position of the part in the given reference frame.

      :parameters:




      .. note::

         This is a fixed position in the part, defined by the parts model.
         It s not necessarily the same as the parts center of mass.
         Use :meth:`Part.CenterOfMass` to get the parts center of mass.

   .. method:: System.Tuple<double,double,double> CenterOfMass(ReferenceFrame referenceFrame)

      The position of the parts center of mass in the given reference frame.
      If the part is physicsless, this is equivalent to :meth:`Part.Position`.

      :parameters:

   .. method:: System.Tuple<System.Tuple<double,double,double>,System.Tuple<double,double,double>> BoundingBox(ReferenceFrame referenceFrame)

      The axis-aligned bounding box of the vessel in the given reference frame.
      Returns the minimum and maximum vertices of the box.

      :parameters:




      .. note::

         This is computed from the collision meshes of the part.
         If the part is not collidable, the box has zero volume and is centered on
         the :meth:`Part.Position` of the part.

   .. method:: System.Tuple<double,double,double> Direction(ReferenceFrame referenceFrame)

      The direction of the part in the given reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double> Velocity(ReferenceFrame referenceFrame)

      The velocity of the part in the given reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double,double> Rotation(ReferenceFrame referenceFrame)

      The rotation of the part in the given reference frame.

      :parameters:

   .. property:: System.Tuple<double,double,double> MomentOfInertia { get; }

      The moment of inertia of the part in :math:`kg.m^2` around its center of mass
      in the parts reference frame (:type:`ReferenceFrame`).

   .. property:: System.Collections.Generic.IList<double> InertiaTensor { get; }

      The inertia tensor of the part in the parts reference frame (:type:`ReferenceFrame`).
      Returns the 3x3 matrix as a list of elements, in row-major order.

   .. property:: ReferenceFrame ReferenceFrame { get; }

      The reference frame that is fixed relative to this part, and centered on a fixed position within the part, defined by the parts model.

      * The origin is at the position of the part, as returned by :meth:`Part.Position`.
      * The axes rotate with the part.
      * The x, y and z axis directions depend on the design of the part.


      .. note::

         For docking port parts, this reference frame is not necessarily equivalent to the reference frame
         for the docking port, returned by :prop:`DockingPort.ReferenceFrame`.

      .. figure:: /images/reference-frames/part.png
         :align: center

         Mk1 Command Pod reference frame origin and axes

   .. property:: ReferenceFrame CenterOfMassReferenceFrame { get; }

      The reference frame that is fixed relative to this part, and centered on its center of mass.

      * The origin is at the center of mass of the part, as returned by :meth:`Part.CenterOfMass`.
      * The axes rotate with the part.
      * The x, y and z axis directions depend on the design of the part.


      .. note::

         For docking port parts, this reference frame is not necessarily equivalent to the reference frame
         for the docking port, returned by :prop:`DockingPort.ReferenceFrame`.

   .. method:: Force AddForce(System.Tuple<double,double,double> force, System.Tuple<double,double,double> position, ReferenceFrame referenceFrame)

      Exert a constant force on the part, acting at the given position.
      Returns an object that can be used to remove or modify the force.

      :parameters:

   .. method:: void InstantaneousForce(System.Tuple<double,double,double> force, System.Tuple<double,double,double> position, ReferenceFrame referenceFrame)

      Exert an instantaneous force on the part, acting at the given position.

      :parameters:






      .. note::

         The force is applied instantaneously in a single physics update.



.. class:: Force

   Obtained by calling :meth:`Part.AddForce`.

   .. property:: Part Part { get; }

      The part that this force is applied to.

   .. property:: System.Tuple<double,double,double> ForceVector { get; set; }

      The force vector. The magnitude of the vector is the strength of the force in Newtons.

   .. property:: System.Tuple<double,double,double> Position { get; set; }

      The position at which the force acts.

   .. property:: ReferenceFrame ReferenceFrame { get; set; }

      The reference frame of the force vector and position.

   .. method:: void Remove()

      Remove the force.



Module
------


.. class:: Module

   This can be used to interact with a specific part module. This includes part modules in stock KSP,
   and those added by mods.

   In KSP, each part has zero or more
   `PartModules <http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES>`_
   associated with it. Each one contains some of the functionality of the part.
   For example, an engine has a "ModuleEngines" part module that contains all the
   functionality of an engine.

   .. property:: string Name { get; }

      Name of the PartModule. For example, "ModuleEngines".

   .. property:: Part Part { get; }

      The part that contains this module.

   .. property:: System.Collections.Generic.IDictionary<string,string> Fields { get; }

      The modules field names and their associated values, as a dictionary.
      These are the values visible in the right-click menu of the part.

   .. method:: bool HasField(string name)

      Returns ``true`` if the module has a field with the given name.

      :parameters:

       * **name** -- Name of the field.

   .. method:: string GetField(string name)

      Returns the value of a field.

      :parameters:

       * **name** -- Name of the field.

   .. method:: void SetFieldInt(string name, int value)

      Set the value of a field to the given integer number.

      :parameters:

       * **name** -- Name of the field.
       * **value** -- Value to set.

   .. method:: void SetFieldFloat(string name, float value)

      Set the value of a field to the given floating point number.

      :parameters:

       * **name** -- Name of the field.
       * **value** -- Value to set.

   .. method:: void SetFieldString(string name, string value)

      Set the value of a field to the given string.

      :parameters:

       * **name** -- Name of the field.
       * **value** -- Value to set.

   .. method:: void ResetField(string name)

      Set the value of a field to its original value.

      :parameters:

       * **name** -- Name of the field.

   .. property:: System.Collections.Generic.IList<string> Events { get; }

      A list of the names of all of the modules events. Events are the clickable buttons
      visible in the right-click menu of the part.

   .. method:: bool HasEvent(string name)

      ``true`` if the module has an event with the given name.

      :parameters:

   .. method:: void TriggerEvent(string name)

      Trigger the named event. Equivalent to clicking the button in the right-click menu of the part.

      :parameters:

   .. property:: System.Collections.Generic.IList<string> Actions { get; }

      A list of all the names of the modules actions. These are the parts actions that can be assigned
      to action groups in the in-game editor.

   .. method:: bool HasAction(string name)

      ``true`` if the part has an action with the given name.

      :parameters:

   .. method:: void SetAction(string name, bool value = True)

      Set the value of an action with the given name.

      :parameters:



Specific Types of Part
----------------------

The following classes provide functionality for specific types of part.

.. contents::
   :local:

Cargo Bay
^^^^^^^^^


.. class:: CargoBay

   A cargo bay. Obtained by calling :prop:`Part.CargoBay`.

   .. property:: Part Part { get; }

      The part object for this cargo bay.

   .. property:: CargoBayState State { get; }

      The state of the cargo bay.

   .. property:: bool Open { get; set; }

      Whether the cargo bay is open.



.. enum:: CargoBayState

   The state of a cargo bay. See :prop:`CargoBay.State`.


   .. value:: Open

      Cargo bay is fully open.


   .. value:: Closed

      Cargo bay closed and locked.


   .. value:: Opening

      Cargo bay is opening.


   .. value:: Closing

      Cargo bay is closing.



Control Surface
^^^^^^^^^^^^^^^


.. class:: ControlSurface

   An aerodynamic control surface. Obtained by calling :prop:`Part.ControlSurface`.

   .. property:: Part Part { get; }

      The part object for this control surface.

   .. property:: bool PitchEnabled { get; set; }

      Whether the control surface has pitch control enabled.

   .. property:: bool YawEnabled { get; set; }

      Whether the control surface has yaw control enabled.

   .. property:: bool RollEnabled { get; set; }

      Whether the control surface has roll control enabled.

   .. property:: bool Inverted { get; set; }

      Whether the control surface movement is inverted.

   .. property:: bool Deployed { get; set; }

      Whether the control surface has been fully deployed.

   .. property:: float SurfaceArea { get; }

      Surface area of the control surface in :math:`m^2`.

   .. property:: System.Tuple<System.Tuple<double,double,double>,System.Tuple<double,double,double>> AvailableTorque { get; }

      The available torque in the positive pitch, roll and yaw axes and
      negative pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :prop:`Vessel.ReferenceFrame`.



Decoupler
^^^^^^^^^


.. class:: Decoupler

   A decoupler. Obtained by calling :prop:`Part.Decoupler`

   .. property:: Part Part { get; }

      The part object for this decoupler.

   .. method:: Vessel Decouple()

      Fires the decoupler. Returns the new vessel created when the decoupler fires.
      Throws an exception if the decoupler has already fired.

   .. property:: bool Decoupled { get; }

      Whether the decoupler has fired.

   .. property:: bool Staged { get; }

      Whether the decoupler is enabled in the staging sequence.

   .. property:: float Impulse { get; }

      The impulse that the decoupler imparts when it is fired, in Newton seconds.



Docking Port
^^^^^^^^^^^^


.. class:: DockingPort

   A docking port. Obtained by calling :prop:`Part.DockingPort`

   .. property:: Part Part { get; }

      The part object for this docking port.

   .. property:: DockingPortState State { get; }

      The current state of the docking port.

   .. property:: Part DockedPart { get; }

      The part that this docking port is docked to. Returns ``null`` if this
      docking port is not docked to anything.

   .. method:: Vessel Undock()

      Undocks the docking port and returns the new :type:`Vessel` that is created.
      This method can be called for either docking port in a docked pair.
      Throws an exception if the docking port is not docked to anything.



      .. note::

         After undocking, the active vessel may change. See :prop:`SpaceCenter.ActiveVessel`.

   .. property:: float ReengageDistance { get; }

      The distance a docking port must move away when it undocks before it
      becomes ready to dock with another port, in meters.

   .. property:: bool HasShield { get; }

      Whether the docking port has a shield.

   .. property:: bool Shielded { get; set; }

      The state of the docking ports shield, if it has one.

      Returns ``true`` if the docking port has a shield, and the shield is
      closed. Otherwise returns ``false``. When set to ``true``, the shield is
      closed, and when set to ``false`` the shield is opened. If the docking
      port does not have a shield, setting this attribute has no effect.

   .. method:: System.Tuple<double,double,double> Position(ReferenceFrame referenceFrame)

      The position of the docking port in the given reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double> Direction(ReferenceFrame referenceFrame)

      The direction that docking port points in, in the given reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double,double> Rotation(ReferenceFrame referenceFrame)

      The rotation of the docking port, in the given reference frame.

      :parameters:

   .. property:: ReferenceFrame ReferenceFrame { get; }

      The reference frame that is fixed relative to this docking port, and
      oriented with the port.

      * The origin is at the position of the docking port.
      * The axes rotate with the docking port.
      * The x-axis points out to the right side of the docking port.
      * The y-axis points in the direction the docking port is facing.
      * The z-axis points out of the bottom off the docking port.


      .. note::

         This reference frame is not necessarily equivalent to the reference frame
         for the part, returned by :prop:`Part.ReferenceFrame`.

      .. figure:: /images/reference-frames/docking-port.png
         :align: center

         Docking port reference frame origin and axes

      .. figure:: /images/reference-frames/docking-port-inline.png
         :align: center

         Inline docking port reference frame origin and axes



.. enum:: DockingPortState

   The state of a docking port. See :prop:`DockingPort.State`.


   .. value:: Ready

      The docking port is ready to dock to another docking port.


   .. value:: Docked

      The docking port is docked to another docking port, or docked to
      another part (from the VAB/SPH).


   .. value:: Docking

      The docking port is very close to another docking port,
      but has not docked. It is using magnetic force to acquire a solid dock.


   .. value:: Undocking

      The docking port has just been undocked from another docking port,
      and is disabled until it moves away by a sufficient distance
      (:prop:`DockingPort.ReengageDistance`).


   .. value:: Shielded

      The docking port has a shield, and the shield is closed.


   .. value:: Moving

      The docking ports shield is currently opening/closing.



Engine
^^^^^^


.. class:: Engine

   An engine, including ones of various types.
   For example liquid fuelled gimballed engines, solid rocket boosters and jet engines.
   Obtained by calling :prop:`Part.Engine`.

   .. note::

      For RCS thrusters :prop:`Part.RCS`.

   .. property:: Part Part { get; }

      The part object for this engine.

   .. property:: bool Active { get; set; }

      Whether the engine is active. Setting this attribute may have no effect,
      depending on :prop:`Engine.CanShutdown` and :prop:`Engine.CanRestart`.

   .. property:: float Thrust { get; }

      The current amount of thrust being produced by the engine, in Newtons.

   .. property:: float AvailableThrust { get; }

      The amount of thrust, in Newtons, that would be produced by the engine
      when activated and with its throttle set to 100%.
      Returns zero if the engine does not have any fuel.
      Takes the engine's current :prop:`Engine.ThrustLimit` and atmospheric conditions into account.

   .. property:: float MaxThrust { get; }

      The amount of thrust, in Newtons, that would be produced by the engine
      when activated and fueled, with its throttle and throttle limiter set to 100%.

   .. property:: float MaxVacuumThrust { get; }

      The maximum amount of thrust that can be produced by the engine in a
      vacuum, in Newtons. This is the amount of thrust produced by the engine
      when activated, :prop:`Engine.ThrustLimit` is set to 100%, the main
      vessel's throttle is set to 100% and the engine is in a vacuum.

   .. property:: float ThrustLimit { get; set; }

      The thrust limiter of the engine. A value between 0 and 1. Setting this
      attribute may have no effect, for example the thrust limit for a solid
      rocket booster cannot be changed in flight.

   .. property:: System.Collections.Generic.IList<Thruster> Thrusters { get; }

      The components of the engine that generate thrust.


      .. note::

         For example, this corresponds to the rocket nozzel on a solid rocket booster,
         or the individual nozzels on a RAPIER engine.
         The overall thrust produced by the engine, as reported by :prop:`Engine.AvailableThrust`,
         :prop:`Engine.MaxThrust` and others, is the sum of the thrust generated by each thruster.

   .. property:: float SpecificImpulse { get; }

      The current specific impulse of the engine, in seconds. Returns zero
      if the engine is not active.

   .. property:: float VacuumSpecificImpulse { get; }

      The vacuum specific impulse of the engine, in seconds.

   .. property:: float KerbinSeaLevelSpecificImpulse { get; }

      The specific impulse of the engine at sea level on Kerbin, in seconds.

   .. property:: System.Collections.Generic.IList<string> PropellantNames { get; }

      The names of the propellants that the engine consumes.

   .. property:: System.Collections.Generic.IDictionary<string,float> PropellantRatios { get; }

      The ratio of resources that the engine consumes. A dictionary mapping resource names
      to the ratio at which they are consumed by the engine.


      .. note::

         For example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every 0.6 units of
         LiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.

   .. property:: System.Collections.Generic.IList<Propellant> Propellants { get; }

      The propellants that the engine consumes.

   .. property:: bool HasFuel { get; }

      Whether the engine has any fuel available.


      .. note::

         The engine must be activated for this property to update correctly.

   .. property:: float Throttle { get; }

      The current throttle setting for the engine. A value between 0 and 1.
      This is not necessarily the same as the vessel's main throttle
      setting, as some engines take time to adjust their throttle
      (such as jet engines).

   .. property:: bool ThrottleLocked { get; }

      Whether the :prop:`Control.Throttle` affects the engine. For example,
      this is ``true`` for liquid fueled rockets, and ``false`` for solid rocket
      boosters.

   .. property:: bool CanRestart { get; }

      Whether the engine can be restarted once shutdown. If the engine cannot be shutdown,
      returns ``false``. For example, this is ``true`` for liquid fueled rockets
      and ``false`` for solid rocket boosters.

   .. property:: bool CanShutdown { get; }

      Whether the engine can be shutdown once activated. For example, this is
      ``true`` for liquid fueled rockets and ``false`` for solid rocket boosters.

   .. property:: bool HasModes { get; }

      Whether the engine has multiple modes of operation.

   .. property:: string Mode { get; set; }

      The name of the current engine mode.

   .. property:: System.Collections.Generic.IDictionary<string,Engine> Modes { get; }

      The available modes for the engine.
      A dictionary mapping mode names to :type:`Engine` objects.

   .. method:: void ToggleMode()

      Toggle the current engine mode.

   .. property:: bool AutoModeSwitch { get; set; }

      Whether the engine will automatically switch modes.

   .. property:: bool Gimballed { get; }

      Whether the engine is gimballed.

   .. property:: float GimbalRange { get; }

      The range over which the gimbal can move, in degrees.
      Returns 0 if the engine is not gimballed.

   .. property:: bool GimbalLocked { get; set; }

      Whether the engines gimbal is locked in place. Setting this attribute has
      no effect if the engine is not gimballed.

   .. property:: float GimbalLimit { get; set; }

      The gimbal limiter of the engine. A value between 0 and 1.
      Returns 0 if the gimbal is locked.

   .. property:: System.Tuple<System.Tuple<double,double,double>,System.Tuple<double,double,double>> AvailableTorque { get; }

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :prop:`Vessel.ReferenceFrame`.
      Returns zero if the engine is inactive, or not gimballed.



.. class:: Propellant

   A propellant for an engine. Obtains by calling :prop:`Engine.Propellants`.

   .. property:: string Name { get; }

      The name of the propellant.

   .. property:: double CurrentAmount { get; }

      The current amount of propellant.

   .. property:: double CurrentRequirement { get; }

      The required amount of propellant.

   .. property:: double TotalResourceAvailable { get; }

      The total amount of the underlying resource currently reachable given resource flow rules.

   .. property:: double TotalResourceCapacity { get; }

      The total vehicle capacity for the underlying propellant resource, restricted by resource flow rules.

   .. property:: bool IgnoreForIsp { get; }

      If this propellant should be ignored when calculating required mass flow given specific impulse.

   .. property:: bool IgnoreForThrustCurve { get; }

      If this propellant should be ignored for thrust curve calculations.

   .. property:: bool DrawStackGauge { get; }

      If this propellant has a stack gauge or not.

   .. property:: bool IsDeprived { get; }

      If this propellant is deprived.

   .. property:: float Ratio { get; }

      The propellant ratio.



Experiment
^^^^^^^^^^


.. class:: Experiment

   Obtained by calling :prop:`Part.Experiment`.

   .. property:: Part Part { get; }

      The part object for this experiment.

   .. method:: void Run()

      Run the experiment.

   .. method:: void Transmit()

      Transmit all experimental data contained by this part.

   .. method:: void Dump()

      Dump the experimental data contained by the experiment.

   .. method:: void Reset()

      Reset the experiment.

   .. property:: bool Deployed { get; }

      Whether the experiment has been deployed.

   .. property:: bool Rerunnable { get; }

      Whether the experiment can be re-run.

   .. property:: bool Inoperable { get; }

      Whether the experiment is inoperable.

   .. property:: bool HasData { get; }

      Whether the experiment contains data.

   .. property:: System.Collections.Generic.IList<ScienceData> Data { get; }

      The data contained in this experiment.

   .. property:: string Biome { get; }

      The name of the biome the experiment is currently in.

   .. property:: bool Available { get; }

      Determines if the experiment is available given the current conditions.

   .. property:: ScienceSubject ScienceSubject { get; }

      Containing information on the corresponding specific science result for the current conditions.
      Returns null if experiment is unavailable.



.. class:: ScienceData

   Obtained by calling :prop:`Experiment.Data`.

   .. property:: float DataAmount { get; }

      Data amount.

   .. property:: float ScienceValue { get; }

      Science value.

   .. property:: float TransmitValue { get; }

      Transmit value.



.. class:: ScienceSubject

   Obtained by calling :prop:`Experiment.ScienceSubject`.

   .. property:: string Title { get; }

      Title of science subject, displayed in science archives

   .. property:: bool IsComplete { get; }

      Whether the experiment has been completed.

   .. property:: float Science { get; }

      Amount of science already earned from this subject, not updated until after transmission/recovery.

   .. property:: float ScienceCap { get; }

      Total science allowable for this subject.

   .. property:: float DataScale { get; }

      Multiply science value by this to determine data amount in mits.

   .. property:: float SubjectValue { get; }

      Multiplier for specific Celestial Body/Experiment Situation combination.

   .. property:: float ScientificValue { get; }

      Diminishing value multiplier for decreasing the science value returned from repeated experiments.



Fairing
^^^^^^^


.. class:: Fairing

   A fairing. Obtained by calling :prop:`Part.Fairing`.

   .. property:: Part Part { get; }

      The part object for this fairing.

   .. method:: void Jettison()

      Jettison the fairing. Has no effect if it has already been jettisoned.

   .. property:: bool Jettisoned { get; }

      Whether the fairing has been jettisoned.



Intake
^^^^^^


.. class:: Intake

   An air intake. Obtained by calling :prop:`Part.Intake`.

   .. property:: Part Part { get; }

      The part object for this intake.

   .. property:: bool Open { get; set; }

      Whether the intake is open.

   .. property:: float Speed { get; }

      Speed of the flow into the intake, in :math:`m/s`.

   .. property:: float Flow { get; }

      The rate of flow into the intake, in units of resource per second.

   .. property:: float Area { get; }

      The area of the intake's opening, in square meters.



Landing Gear
^^^^^^^^^^^^


.. class:: LandingGear

   Landing gear with wheels. Obtained by calling :prop:`Part.LandingGear`.

   .. property:: Part Part { get; }

      The part object for this landing gear.

   .. property:: LandingGearState State { get; }

      Gets the current state of the landing gear.


      .. note::

         Fixed landing gear are always deployed.

   .. property:: bool Deployable { get; }

      Whether the landing gear is deployable.

   .. property:: bool Deployed { get; set; }

      Whether the landing gear is deployed.


      .. note::

         Fixed landing gear are always deployed.
         Returns an error if you try to deploy fixed landing gear.

   .. property:: bool IsGrounded { get; }

      Returns whether the gear is touching the ground.



.. enum:: LandingGearState

   The state of a landing gear. See :prop:`LandingGear.State`.


   .. value:: Deployed

      Landing gear is fully deployed.


   .. value:: Retracted

      Landing gear is fully retracted.


   .. value:: Deploying

      Landing gear is being deployed.


   .. value:: Retracting

      Landing gear is being retracted.


   .. value:: Broken

      Landing gear is broken.



Landing Leg
^^^^^^^^^^^


.. class:: LandingLeg

   A landing leg. Obtained by calling :prop:`Part.LandingLeg`.

   .. property:: Part Part { get; }

      The part object for this landing leg.

   .. property:: LandingLegState State { get; }

      The current state of the landing leg.

   .. property:: bool Deployed { get; set; }

      Whether the landing leg is deployed.


      .. note::

         Fixed landing legs are always deployed.
         Returns an error if you try to deploy fixed landing gear.

   .. property:: bool IsGrounded { get; }

      Returns whether the leg is touching the ground.



.. enum:: LandingLegState

   The state of a landing leg. See :prop:`LandingLeg.State`.


   .. value:: Deployed

      Landing leg is fully deployed.


   .. value:: Retracted

      Landing leg is fully retracted.


   .. value:: Deploying

      Landing leg is being deployed.


   .. value:: Retracting

      Landing leg is being retracted.


   .. value:: Broken

      Landing leg is broken.



Launch Clamp
^^^^^^^^^^^^


.. class:: LaunchClamp

   A launch clamp. Obtained by calling :prop:`Part.LaunchClamp`.

   .. property:: Part Part { get; }

      The part object for this launch clamp.

   .. method:: void Release()

      Releases the docking clamp. Has no effect if the clamp has already been released.



Light
^^^^^


.. class:: Light

   A light. Obtained by calling :prop:`Part.Light`.

   .. property:: Part Part { get; }

      The part object for this light.

   .. property:: bool Active { get; set; }

      Whether the light is switched on.

   .. property:: System.Tuple<float,float,float> Color { get; set; }

      The color of the light, as an RGB triple.

   .. property:: float PowerUsage { get; }

      The current power usage, in units of charge per second.



Parachute
^^^^^^^^^


.. class:: Parachute

   A parachute. Obtained by calling :prop:`Part.Parachute`.

   .. property:: Part Part { get; }

      The part object for this parachute.

   .. method:: void Deploy()

      Deploys the parachute. This has no effect if the parachute has already
      been deployed.

   .. property:: bool Deployed { get; }

      Whether the parachute has been deployed.

   .. property:: ParachuteState State { get; }

      The current state of the parachute.

   .. property:: float DeployAltitude { get; set; }

      The altitude at which the parachute will full deploy, in meters.

   .. property:: float DeployMinPressure { get; set; }

      The minimum pressure at which the parachute will semi-deploy, in atmospheres.



.. enum:: ParachuteState

   The state of a parachute. See :prop:`Parachute.State`.


   .. value:: Stowed

      The parachute is safely tucked away inside its housing.


   .. value:: Active

      The parachute is still stowed, but ready to semi-deploy.


   .. value:: SemiDeployed

      The parachute has been deployed and is providing some drag,
      but is not fully deployed yet.


   .. value:: Deployed

      The parachute is fully deployed.


   .. value:: Cut

      The parachute has been cut.



Radiator
^^^^^^^^


.. class:: Radiator

   A radiator. Obtained by calling :prop:`Part.Radiator`.

   .. property:: Part Part { get; }

      The part object for this radiator.

   .. property:: bool Deployable { get; }

      Whether the radiator is deployable.

   .. property:: bool Deployed { get; set; }

      For a deployable radiator, ``true`` if the radiator is extended.
      If the radiator is not deployable, this is always ``true``.

   .. property:: RadiatorState State { get; }

      The current state of the radiator.


      .. note::

         A fixed radiator is always :enum:`RadiatorState.Extended`.



.. enum:: RadiatorState

   The state of a radiator. :type:`RadiatorState`


   .. value:: Extended

      Radiator is fully extended.


   .. value:: Retracted

      Radiator is fully retracted.


   .. value:: Extending

      Radiator is being extended.


   .. value:: Retracting

      Radiator is being retracted.


   .. value:: Broken

      Radiator is being broken.



Resource Converter
^^^^^^^^^^^^^^^^^^


.. class:: ResourceConverter

   A resource converter. Obtained by calling :prop:`Part.ResourceConverter`.

   .. property:: Part Part { get; }

      The part object for this converter.

   .. property:: int Count { get; }

      The number of converters in the part.

   .. method:: string Name(int index)

      The name of the specified converter.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: bool Active(int index)

      True if the specified converter is active.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: void Start(int index)

      Start the specified converter.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: void Stop(int index)

      Stop the specified converter.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: ResourceConverterState State(int index)

      The state of the specified converter.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: string StatusInfo(int index)

      Status information for the specified converter.
      This is the full status message shown in the in-game UI.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: System.Collections.Generic.IList<string> Inputs(int index)

      List of the names of resources consumed by the specified converter.

      :parameters:

       * **index** -- Index of the converter.

   .. method:: System.Collections.Generic.IList<string> Outputs(int index)

      List of the names of resources produced by the specified converter.

      :parameters:

       * **index** -- Index of the converter.



.. enum:: ResourceConverterState

   The state of a resource converter. See :meth:`ResourceConverter.State`.


   .. value:: Running

      Converter is running.


   .. value:: Idle

      Converter is idle.


   .. value:: MissingResource

      Converter is missing a required resource.


   .. value:: StorageFull

      No available storage for output resource.


   .. value:: Capacity

      At preset resource capacity.


   .. value:: Unknown

      Unknown state. Possible with modified resource converters.
      In this case, check :meth:`ResourceConverter.StatusInfo` for more information.



Resource Harvester
^^^^^^^^^^^^^^^^^^


.. class:: ResourceHarvester

   A resource harvester (drill). Obtained by calling :prop:`Part.ResourceHarvester`.

   .. property:: Part Part { get; }

      The part object for this harvester.

   .. property:: ResourceHarvesterState State { get; }

      The state of the harvester.

   .. property:: bool Deployed { get; set; }

      Whether the harvester is deployed.

   .. property:: bool Active { get; set; }

      Whether the harvester is actively drilling.

   .. property:: float ExtractionRate { get; }

      The rate at which the drill is extracting ore, in units per second.

   .. property:: float ThermalEfficiency { get; }

      The thermal efficiency of the drill, as a percentage of its maximum.

   .. property:: float CoreTemperature { get; }

      The core temperature of the drill, in Kelvin.

   .. property:: float OptimumCoreTemperature { get; }

      The core temperature at which the drill will operate with peak efficiency, in Kelvin.



.. enum:: ResourceHarvesterState

   The state of a resource harvester. See :prop:`ResourceHarvester.State`.


   .. value:: Deploying

      The drill is deploying.


   .. value:: Deployed

      The drill is deployed and ready.


   .. value:: Retracting

      The drill is retracting.


   .. value:: Retracted

      The drill is retracted.


   .. value:: Active

      The drill is running.



Reaction Wheel
^^^^^^^^^^^^^^


.. class:: ReactionWheel

   A reaction wheel. Obtained by calling :prop:`Part.ReactionWheel`.

   .. property:: Part Part { get; }

      The part object for this reaction wheel.

   .. property:: bool Active { get; set; }

      Whether the reaction wheel is active.

   .. property:: bool Broken { get; }

      Whether the reaction wheel is broken.

   .. property:: System.Tuple<System.Tuple<double,double,double>,System.Tuple<double,double,double>> AvailableTorque { get; }

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :prop:`Vessel.ReferenceFrame`.
      Returns zero if the reaction wheel is inactive or broken.

   .. property:: System.Tuple<System.Tuple<double,double,double>,System.Tuple<double,double,double>> MaxTorque { get; }

      The maximum torque the reaction wheel can provide, is it active,
      in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :prop:`Vessel.ReferenceFrame`.



RCS
^^^


.. class:: RCS

   An RCS block or thruster. Obtained by calling :prop:`Part.RCS`.

   .. property:: Part Part { get; }

      The part object for this RCS.

   .. property:: bool Active { get; }

      Whether the RCS thrusters are active.
      An RCS thruster is inactive if the RCS action group is disabled (:prop:`Control.RCS`),
      the RCS thruster itself is not enabled (:prop:`RCS.Enabled`) or
      it is covered by a fairing (:prop:`Part.Shielded`).

   .. property:: bool Enabled { get; set; }

      Whether the RCS thrusters are enabled.

   .. property:: bool PitchEnabled { get; set; }

      Whether the RCS thruster will fire when pitch control input is given.

   .. property:: bool YawEnabled { get; set; }

      Whether the RCS thruster will fire when yaw control input is given.

   .. property:: bool RollEnabled { get; set; }

      Whether the RCS thruster will fire when roll control input is given.

   .. property:: bool ForwardEnabled { get; set; }

      Whether the RCS thruster will fire when pitch control input is given.

   .. property:: bool UpEnabled { get; set; }

      Whether the RCS thruster will fire when yaw control input is given.

   .. property:: bool RightEnabled { get; set; }

      Whether the RCS thruster will fire when roll control input is given.

   .. property:: System.Tuple<System.Tuple<double,double,double>,System.Tuple<double,double,double>> AvailableTorque { get; }

      The available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.
      These axes correspond to the coordinate axes of the :prop:`Vessel.ReferenceFrame`.
      Returns zero if the RCS is inactive.

   .. property:: float MaxThrust { get; }

      The maximum amount of thrust that can be produced by the RCS thrusters when active, in Newtons.

   .. property:: float MaxVacuumThrust { get; }

      The maximum amount of thrust that can be produced by the RCS thrusters when active in a vacuum, in Newtons.

   .. property:: System.Collections.Generic.IList<Thruster> Thrusters { get; }

      A list of thrusters, one of each nozzel in the RCS part.

   .. property:: float SpecificImpulse { get; }

      The current specific impulse of the RCS, in seconds. Returns zero
      if the RCS is not active.

   .. property:: float VacuumSpecificImpulse { get; }

      The vacuum specific impulse of the RCS, in seconds.

   .. property:: float KerbinSeaLevelSpecificImpulse { get; }

      The specific impulse of the RCS at sea level on Kerbin, in seconds.

   .. property:: System.Collections.Generic.IList<string> Propellants { get; }

      The names of resources that the RCS consumes.

   .. property:: System.Collections.Generic.IDictionary<string,float> PropellantRatios { get; }

      The ratios of resources that the RCS consumes. A dictionary mapping resource names
      to the ratios at which they are consumed by the RCS.

   .. property:: bool HasFuel { get; }

      Whether the RCS has fuel available.


      .. note::

         The RCS thruster must be activated for this property to update correctly.



Sensor
^^^^^^


.. class:: Sensor

   A sensor, such as a thermometer. Obtained by calling :prop:`Part.Sensor`.

   .. property:: Part Part { get; }

      The part object for this sensor.

   .. property:: bool Active { get; set; }

      Whether the sensor is active.

   .. property:: string Value { get; }

      The current value of the sensor.



Solar Panel
^^^^^^^^^^^


.. class:: SolarPanel

   A solar panel. Obtained by calling :prop:`Part.SolarPanel`.

   .. property:: Part Part { get; }

      The part object for this solar panel.

   .. property:: bool Deployed { get; set; }

      Whether the solar panel is extended.

   .. property:: SolarPanelState State { get; }

      The current state of the solar panel.

   .. property:: float EnergyFlow { get; }

      The current amount of energy being generated by the solar panel, in
      units of charge per second.

   .. property:: float SunExposure { get; }

      The current amount of sunlight that is incident on the solar panel,
      as a percentage. A value between 0 and 1.



.. enum:: SolarPanelState

   The state of a solar panel. See :prop:`SolarPanel.State`.


   .. value:: Extended

      Solar panel is fully extended.


   .. value:: Retracted

      Solar panel is fully retracted.


   .. value:: Extending

      Solar panel is being extended.


   .. value:: Retracting

      Solar panel is being retracted.


   .. value:: Broken

      Solar panel is broken.



Thruster
^^^^^^^^


.. class:: Thruster

   The component of an :type:`Engine` or :type:`RCS` part that generates thrust.
   Can obtained by calling :prop:`Engine.Thrusters` or :prop:`RCS.Thrusters`.

   .. note::

      Engines can consist of multiple thrusters.
      For example, the S3 KS-25x4 "Mammoth" has four rocket nozzels, and so consists of four thrusters.

   .. property:: Part Part { get; }

      The :type:`Part` that contains this thruster.

   .. method:: System.Tuple<double,double,double> ThrustPosition(ReferenceFrame referenceFrame)

      The position at which the thruster generates thrust, in the given reference frame.
      For gimballed engines, this takes into account the current rotation of the gimbal.

      :parameters:

   .. method:: System.Tuple<double,double,double> ThrustDirection(ReferenceFrame referenceFrame)

      The direction of the force generated by the thruster, in the given reference frame.
      This is opposite to the direction in which the thruster expels propellant.
      For gimballed engines, this takes into account the current rotation of the gimbal.

      :parameters:

   .. property:: ReferenceFrame ThrustReferenceFrame { get; }

      A reference frame that is fixed relative to the thruster and orientated with
      its thrust direction (:meth:`Thruster.ThrustDirection`).
      For gimballed engines, this takes into account the current rotation of the gimbal.

      * The origin is at the position of thrust for this thruster (:meth:`Thruster.ThrustPosition`).
      * The axes rotate with the thrust direction.
        This is the direction in which the thruster expels propellant, including any gimballing.
      * The y-axis points along the thrust direction.
      * The x-axis and z-axis are perpendicular to the thrust direction.

   .. property:: bool Gimballed { get; }

      Whether the thruster is gimballed.

   .. method:: System.Tuple<double,double,double> GimbalPosition(ReferenceFrame referenceFrame)

      Position around which the gimbal pivots.

      :parameters:

   .. property:: System.Tuple<double,double,double> GimbalAngle { get; }

      The current gimbal angle in the pitch, roll and yaw axes.

   .. method:: System.Tuple<double,double,double> InitialThrustPosition(ReferenceFrame referenceFrame)

      The position at which the thruster generates thrust, when the engine is in its
      initial position (no gimballing), in the given reference frame.

      :parameters:




      .. note::

         This position can move when the gimbal rotates. This is because the thrust position and
         gimbal position are not necessarily the same.

   .. method:: System.Tuple<double,double,double> InitialThrustDirection(ReferenceFrame referenceFrame)

      The direction of the force generated by the thruster, when the engine is in its
      initial position (no gimballing), in the given reference frame.
      This is opposite to the direction in which the thruster expels propellant.

      :parameters:



.. _csharp-api-parts-trees-of-parts:

Trees of Parts
--------------

Vessels in KSP are comprised of a number of parts, connected to one another in a
*tree* structure. An example vessel is shown in Figure 1, and the corresponding
tree of parts in Figure 2. The craft file for this example can also be
:download:`downloaded here </crafts/PartsTree.craft>`.

.. figure:: /images/api/parts.png
   :align: left
   :figwidth: 275

   **Figure 1** -- Example parts making up a vessel.

.. figure:: /images/api/parts-tree.png
   :align: right
   :figwidth: 275

   **Figure 2** -- Tree of parts for the vessel in Figure 1. Arrows point from
   the parent part to the child part.

.. container:: clearer

   ..

Traversing the Tree
^^^^^^^^^^^^^^^^^^^

The tree of parts can be traversed using the attributes :prop:`Parts.Root`,
:prop:`Part.Parent` and :prop:`Part.Children`.

The root of the tree is the same as the vessels *root part* (part number 1 in
the example above) and can be obtained by calling :prop:`Parts.Root`.
A parts children can be obtained by calling :prop:`Part.Children`.
If the part does not have any children, :prop:`Part.Children`
returns an empty list. A parts parent can be obtained by calling
:prop:`Part.Parent`. If the part does not have a parent
(as is the case for the root part), :prop:`Part.Parent`
returns ``null``.

The following C# example uses these attributes to perform a
depth-first traversal over all of the parts in a vessel:

.. literalinclude:: /scripts/TreeTraversal.cs

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

    Command Pod Mk1
     TR-18A Stack Decoupler
      FL-T400 Fuel Tank
       LV-909 Liquid Fuel Engine
        TR-18A Stack Decoupler
         FL-T800 Fuel Tank
          LV-909 Liquid Fuel Engine
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
       LT-1 Landing Struts
       LT-1 Landing Struts
     Mk16 Parachute

.. _csharp-api-parts-attachment-modes:

Attachment Modes
^^^^^^^^^^^^^^^^

Parts can be attached to other parts either *radially* (on the side of the
parent part) or *axially* (on the end of the parent part, to form a stack).

For example, in the vessel pictured above, the parachute (part 2) is *axially*
connected to its parent (the command pod -- part 1), and the landing leg
(part 5) is *radially* connected to its parent (the fuel tank -- part 4).

The root part of a vessel (for example the command pod -- part 1) does not have
a parent part, so does not have an attachment mode. However, the part is
consider to be *axially* attached to nothing.

The following C# example does a depth-first traversal as before,
but also prints out the attachment mode used by the part:

.. literalinclude:: /scripts/AttachmentModes.cs

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

 Command Pod Mk1 - axial
  TR-18A Stack Decoupler - axial
   FL-T400 Fuel Tank - axial
    LV-909 Liquid Fuel Engine - axial
     TR-18A Stack Decoupler - axial
      FL-T800 Fuel Tank - axial
       LV-909 Liquid Fuel Engine - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
    LT-1 Landing Struts - radial
    LT-1 Landing Struts - radial
  Mk16 Parachute - axial

.. _csharp-api-parts-fuel-lines:

Fuel Lines
----------

.. figure:: /images/api/parts-fuel-lines.png
   :align: right
   :figwidth: 200

   **Figure 5** -- Fuel lines from the example in Figure 1. Fuel flows from the
   parts highlighted in green, into the part highlighted in blue.

.. figure:: /images/api/parts-fuel-lines-tree.png
   :align: right
   :figwidth: 200

   **Figure 4** -- A subset of the parts tree from Figure 2 above.

Fuel lines are considered parts, and are included in the parts tree (for
example, as pictured in Figure 4). However, the parts tree does not contain
information about which parts fuel lines connect to. The parent part of a fuel
line is the part from which it will take fuel (as shown in Figure 4) however the
part that it will send fuel to is not represented in the parts tree.

Figure 5 shows the fuel lines from the example vessel pictured earlier. Fuel
line part 15 (in red) takes fuel from a fuel tank (part 11 -- in green) and
feeds it into another fuel tank (part 9 -- in blue). The fuel line is therefore
a child of part 11, but its connection to part 9 is not represented in the tree.

The attributes :prop:`Part.FuelLinesFrom` and
:prop:`Part.FuelLinesTo` can be used to discover these
connections. In the example in Figure 5, when
:prop:`Part.FuelLinesTo` is called on fuel tank part
11, it will return a list of parts containing just fuel tank part 9 (the blue
part). When :prop:`Part.FuelLinesFrom` is called on
fuel tank part 9, it will return a list containing fuel tank parts 11 and 17
(the parts colored green).

.. _csharp-api-parts-staging:

Staging
-------

.. figure:: /images/api/parts-staging.png
   :align: right
   :figwidth: 340

   **Figure 6** -- Example vessel from Figure 1 with a staging sequence.

Each part has two staging numbers associated with it: the stage in which the
part is *activated* and the stage in which the part is *decoupled*. These values
can be obtained using :prop:`Part.Stage` and
:prop:`Part.DecoupleStage` respectively. For parts that
are not activated by staging, :prop:`Part.Stage` returns
-1. For parts that are never decoupled,
:prop:`Part.DecoupleStage` returns a value of -1.

Figure 6 shows an example staging sequence for a vessel. Figure 7 shows the
stages in which each part of the vessel will be *activated*. Figure 8 shows the
stages in which each part of the vessel will be *decoupled*.

.. container:: clearer

   ..

.. figure:: /images/api/parts-staging-activate.png
   :align: left
   :figwidth: 250

   **Figure 7** -- The stage in which each part is *activated*.

.. figure:: /images/api/parts-staging-decouple.png
   :align: right
   :figwidth: 250

   **Figure 8** -- The stage in which each part is *decoupled*.

.. container:: clearer

   ..
