.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

SpaceCenter
===========


.. class:: SpaceCenter

   Provides functionality to interact with Kerbal Space Program. This includes controlling
   the active vessel, managing its resources, planning maneuver nodes and auto-piloting.

   .. property:: Vessel ActiveVessel { get; set; }

      The currently active vessel.

   .. property:: System.Collections.Generic.IList<Vessel> Vessels { get; }

      A list of all the vessels in the game.

   .. property:: System.Collections.Generic.IDictionary<string,CelestialBody> Bodies { get; }

      A dictionary of all celestial bodies (planets, moons, etc.) in the game,
      keyed by the name of the body.

   .. property:: CelestialBody TargetBody { get; set; }

      The currently targeted celestial body.

   .. property:: Vessel TargetVessel { get; set; }

      The currently targeted vessel.

   .. property:: DockingPort TargetDockingPort { get; set; }

      The currently targeted docking port.

   .. method:: void ClearTarget()

      Clears the current target.

   .. method:: System.Collections.Generic.IList<string> LaunchableVessels(string craftDirectory)

      Returns a list of vessels from the given *craftDirectory* that can be launched.

      :parameters:

       * **craftDirectory** -- Name of the directory in the current saves "Ships" directory. For example ``"VAB"`` or ``"SPH"``.

   .. method:: void LaunchVessel(string craftDirectory, string name, string launchSite)

      Launch a vessel.

      :parameters:

       * **craftDirectory** -- Name of the directory in the current saves "Ships" directory, that contains the craft file. For example ``"VAB"`` or ``"SPH"``.
       * **name** -- Name of the vessel to launch. This is the name of the ".craft" file in the save directory, without the ".craft" file extension.
       * **launchSite** -- Name of the launch site. For example ``"LaunchPad"`` or ``"Runway"``.

   .. method:: void LaunchVesselFromVAB(string name)

      Launch a new vessel from the VAB onto the launchpad.

      :parameters:

       * **name** -- Name of the vessel to launch.


      .. note::

         This is equivalent to calling :meth:`SpaceCenter.LaunchVessel` with the craft directory set to "VAB" and the launch site set to "LaunchPad".

   .. method:: void LaunchVesselFromSPH(string name)

      Launch a new vessel from the SPH onto the runway.

      :parameters:

       * **name** -- Name of the vessel to launch.


      .. note::

         This is equivalent to calling :meth:`SpaceCenter.LaunchVessel` with the craft directory set to "SPH" and the launch site set to "Runway".

   .. method:: void Save(string name)

      Save the game with a given name.
      This will create a save file called ``name.sfs`` in the folder of the current save game.

      :parameters:

   .. method:: void Load(string name)

      Load the game with the given name.
      This will create a load a save file called ``name.sfs`` from the folder of the current save game.

      :parameters:

   .. method:: void Quicksave()

      Save a quicksave.



      .. note::

         This is the same as calling :meth:`SpaceCenter.Save` with the name "quicksave".

   .. method:: void Quickload()

      Load a quicksave.



      .. note::

         This is the same as calling :meth:`SpaceCenter.Load` with the name "quicksave".

   .. property:: bool UIVisible { get; set; }

      Whether the UI is visible.

   .. property:: bool Navball { get; set; }

      Whether the navball is visible.

   .. property:: double UT { get; }

      The current universal time in seconds.

   .. property:: double G { get; }

      The value of the `gravitational constant <https://en.wikipedia.org/wiki/Gravitational_constant>`_
      G in :math:`N(m/kg)^2`.

   .. property:: float WarpRate { get; }

      The current warp rate. This is the rate at which time is passing for
      either on-rails or physical time warp. For example, a value of 10 means
      time is passing 10x faster than normal. Returns 1 if time warp is not
      active.

   .. property:: float WarpFactor { get; }

      The current warp factor. This is the index of the rate at which time
      is passing for either regular "on-rails" or physical time warp. Returns 0
      if time warp is not active. When in on-rails time warp, this is equal to
      :prop:`SpaceCenter.RailsWarpFactor`, and in physics time warp, this is equal to
      :prop:`SpaceCenter.PhysicsWarpFactor`.

   .. property:: int RailsWarpFactor { get; set; }

      The time warp rate, using regular "on-rails" time warp. A value between
      0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp
      is active.

      If requested time warp factor cannot be set, it will be set to the next
      lowest possible value. For example, if the vessel is too close to a
      planet. See `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

   .. property:: int PhysicsWarpFactor { get; set; }

      The physical time warp rate. A value between 0 and 3 inclusive. 0 means
      no time warp. Returns 0 if regular "on-rails" time warp is active.

   .. method:: bool CanRailsWarpAt(int factor = 1)

      Returns ``true`` if regular "on-rails" time warp can be used, at the specified warp
      *factor*. The maximum time warp rate is limited by various things,
      including how close the active vessel is to a planet. See
      `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

      :parameters:

       * **factor** -- The warp factor to check.

   .. property:: int MaximumRailsWarpFactor { get; }

      The current maximum regular "on-rails" warp factor that can be set.
      A value between 0 and 7 inclusive. See
      `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

   .. method:: void WarpTo(double ut, float maxRailsRate = 100000.0, float maxPhysicsRate = 2.0)

      Uses time acceleration to warp forward to a time in the future, specified
      by universal time *ut*. This call blocks until the desired
      time is reached. Uses regular "on-rails" or physical time warp as appropriate.
      For example, physical time warp is used when the active vessel is traveling
      through an atmosphere. When using regular "on-rails" time warp, the warp
      rate is limited by *maxRailsRate*, and when using physical
      time warp, the warp rate is limited by *maxPhysicsRate*.

      :parameters:

       * **ut** -- The universal time to warp to, in seconds.
       * **maxRailsRate** -- The maximum warp rate in regular "on-rails" time warp.
       * **maxPhysicsRate** -- The maximum warp rate in physical time warp.

      :returns: When the time warp is complete.

   .. method:: System.Tuple<double,double,double> TransformPosition(System.Tuple<double,double,double> position, ReferenceFrame from, ReferenceFrame to)

      Converts a position vector from one reference frame to another.

      :parameters:

       * **position** -- Position vector in reference frame *from*.
       * **from** -- The reference frame that the position vector is in.
       * **to** -- The reference frame to covert the position vector to.

      :returns: The corresponding position vector in reference frame *to*.

   .. method:: System.Tuple<double,double,double> TransformDirection(System.Tuple<double,double,double> direction, ReferenceFrame from, ReferenceFrame to)

      Converts a direction vector from one reference frame to another.

      :parameters:

       * **direction** -- Direction vector in reference frame *from*.
       * **from** -- The reference frame that the direction vector is in.
       * **to** -- The reference frame to covert the direction vector to.

      :returns: The corresponding direction vector in reference frame *to*.

   .. method:: System.Tuple<double,double,double,double> TransformRotation(System.Tuple<double,double,double,double> rotation, ReferenceFrame from, ReferenceFrame to)

      Converts a rotation from one reference frame to another.

      :parameters:

       * **rotation** -- Rotation in reference frame *from*.
       * **from** -- The reference frame that the rotation is in.
       * **to** -- The corresponding rotation in reference frame *to*.

      :returns: The corresponding rotation in reference frame *to*.

   .. method:: System.Tuple<double,double,double> TransformVelocity(System.Tuple<double,double,double> position, System.Tuple<double,double,double> velocity, ReferenceFrame from, ReferenceFrame to)

      Converts a velocity vector (acting at the specified position vector) from one
      reference frame to another. The position vector is required to take the
      relative angular velocity of the reference frames into account.

      :parameters:

       * **position** -- Position vector in reference frame *from*.
       * **velocity** -- Velocity vector in reference frame *from*.
       * **from** -- The reference frame that the position and velocity vectors are in.
       * **to** -- The reference frame to covert the velocity vector to.

      :returns: The corresponding velocity in reference frame *to*.

   .. property:: bool FARAvailable { get; }

      Whether `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_ is installed.

   .. property:: WarpMode WarpMode { get; }

      The current time warp mode. Returns :enum:`WarpMode.None` if time
      warp is not active, :enum:`WarpMode.Rails` if regular "on-rails" time warp
      is active, or :enum:`WarpMode.Physics` if physical time warp is active.

   .. property:: Camera Camera { get; }

      An object that can be used to control the camera.

   .. property:: WaypointManager WaypointManager { get; }

      The waypoint manager.

   .. property:: ContractManager ContractManager { get; }

      The contract manager.



.. enum:: WarpMode

   The time warp mode.
   Returned by :type:`WarpMode`


   .. value:: Rails

      Time warp is active, and in regular "on-rails" mode.


   .. value:: Physics

      Time warp is active, and in physical time warp mode.


   .. value:: None

      Time warp is not active.
