.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

Waypoints
=========


.. class:: WaypointManager

   Waypoints are the location markers you can see on the map view showing you where contracts are targeted for.
   With this structure, you can obtain coordinate data for the locations of these waypoints.
   Obtained by calling :prop:`SpaceCenter.WaypointManager`.

   .. property:: System.Collections.Generic.IList<Waypoint> Waypoints { get; }

      A list of all existing waypoints.

   .. method:: Waypoint AddWaypoint(double latitude, double longitude, CelestialBody body, string name)

      Creates a waypoint at the given position at ground level, and returns a
      :type:`Waypoint` object that can be used to modify it.

      :parameters:

       * **latitude** -- Latitude of the waypoint.
       * **longitude** -- Longitude of the waypoint.
       * **body** -- Celestial body the waypoint is attached to.
       * **name** -- Name of the waypoint.

   .. property:: System.Collections.Generic.IDictionary<string,int> Colors { get; }

      An example map of known color - seed pairs.
      Any other integers may be used as seed.

   .. property:: System.Collections.Generic.IList<string> Icons { get; }

      Returns all available icons (from "GameData/Squad/Contracts/Icons/").



.. class:: Waypoint

   Represents a waypoint. Can be created using :meth:`WaypointManager.AddWaypoint`.

   .. property:: CelestialBody Body { get; set; }

      Celestial body the waypoint is attached to.

   .. property:: string Name { get; set; }

      Name of the waypoint as it appears on the map and the contract.

   .. property:: int Color { get; set; }

      The seed of the icon color. See :prop:`WaypointManager.Colors` for example colors.

   .. property:: string Icon { get; set; }

      The icon of the waypoint.

   .. property:: double Latitude { get; set; }

      The latitude of the waypoint.

   .. property:: double Longitude { get; set; }

      The longitude of the waypoint.

   .. property:: double MeanAltitude { get; set; }

      The altitude of the waypoint above sea level, in meters.

   .. property:: double SurfaceAltitude { get; set; }

      The altitude of the waypoint above the surface of the body or sea level, whichever is closer, in meters.

   .. property:: double BedrockAltitude { get; set; }

      The altitude of the waypoint above the surface of the body, in meters. When over water, this is the altitude above the sea floor.

   .. property:: bool NearSurface { get; }

      True if waypoint is a point near or on the body rather than high in orbit.

   .. property:: bool Grounded { get; }

      True if waypoint is actually glued to the ground.

   .. property:: int Index { get; }

      The integer index of this waypoint amongst its cluster of sibling waypoints.
      In other words, when you have a cluster of waypoints called "Somewhere Alpha", "Somewhere Beta", and "Somewhere Gamma",
      then the alpha site has index 0, the beta site has index 1 and the gamma site has index 2.
      When :prop:`Waypoint.Clustered` is false, this value is zero but meaningless.

   .. property:: bool Clustered { get; }

      True if this waypoint is part of a set of clustered waypoints with greek letter names appended (Alpha, Beta, Gamma, etc).
      If true, there is a one-to-one correspondence with the greek letter name and the :prop:`Waypoint.Index`.

   .. property:: bool HasContract { get; }

      Whether the waypoint belongs to a contract.

   .. property:: Contract Contract { get; }

      The associated contract.

   .. method:: void Remove()

      Removes the waypoint.
