.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.SpaceCenter

Node
====


.. class:: Node

   Represents a maneuver node. Can be created using :meth:`Control.AddNode`.

   .. property:: float Prograde { get; set; }

      The magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.

   .. property:: float Normal { get; set; }

      The magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.

   .. property:: float Radial { get; set; }

      The magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.

   .. property:: float DeltaV { get; set; }

      The delta-v of the maneuver node, in meters per second.


      .. note::

         Does not change when executing the maneuver node. See :prop:`Node.RemainingDeltaV`.

   .. property:: float RemainingDeltaV { get; }

      Gets the remaining delta-v of the maneuver node, in meters per second. Changes as the node
      is executed. This is equivalent to the delta-v reported in-game.

   .. method:: System.Tuple<double,double,double> BurnVector(ReferenceFrame referenceFrame = None)

      Returns a vector whose direction the direction of the maneuver node burn, and whose magnitude
      is the delta-v of the burn in m/s.

      :parameters:




      .. note::

         Does not change when executing the maneuver node. See :meth:`Node.RemainingBurnVector`.

   .. method:: System.Tuple<double,double,double> RemainingBurnVector(ReferenceFrame referenceFrame = None)

      Returns a vector whose direction the direction of the maneuver node burn, and whose magnitude
      is the delta-v of the burn in m/s. The direction and magnitude change as the burn is executed.

      :parameters:

   .. property:: double UT { get; set; }

      The universal time at which the maneuver will occur, in seconds.

   .. property:: double TimeTo { get; }

      The time until the maneuver node will be encountered, in seconds.

   .. property:: Orbit Orbit { get; }

      The orbit that results from executing the maneuver node.

   .. method:: void Remove()

      Removes the maneuver node.

   .. property:: ReferenceFrame ReferenceFrame { get; }

      Gets the reference frame that is fixed relative to the maneuver node's burn.

      * The origin is at the position of the maneuver node.
      * The y-axis points in the direction of the burn.
      * The x-axis and z-axis point in arbitrary but fixed directions.

   .. property:: ReferenceFrame OrbitalReferenceFrame { get; }

      Gets the reference frame that is fixed relative to the maneuver node, and
      orientated with the orbital prograde/normal/radial directions of the
      original orbit at the maneuver node's position.

      * The origin is at the position of the maneuver node.
      * The x-axis points in the orbital anti-radial direction of the original
        orbit, at the position of the maneuver node.
      * The y-axis points in the orbital prograde direction of the original
        orbit, at the position of the maneuver node.
      * The z-axis points in the orbital normal direction of the original orbit,
        at the position of the maneuver node.

   .. method:: System.Tuple<double,double,double> Position(ReferenceFrame referenceFrame)

      Returns the position vector of the maneuver node in the given reference frame.

      :parameters:

   .. method:: System.Tuple<double,double,double> Direction(ReferenceFrame referenceFrame)

      Returns the unit direction vector of the maneuver nodes burn in the given reference frame.

      :parameters:
