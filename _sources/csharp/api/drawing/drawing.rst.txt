.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.Drawing

Drawing
=======


.. class:: Drawing

   Provides functionality for drawing objects in the flight scene.

   .. method:: Line AddLine(System.Tuple<double,double,double> start, System.Tuple<double,double,double> end, SpaceCenter.ReferenceFrame referenceFrame, bool visible = true)

      Draw a line in the scene.

      :parameters:

       * **start** -- Position of the start of the line.
       * **end** -- Position of the end of the line.
       * **referenceFrame** -- Reference frame that the positions are in.
       * **visible** -- Whether the line is visible.

   .. method:: Line AddDirection(System.Tuple<double,double,double> direction, SpaceCenter.ReferenceFrame referenceFrame, float length = 10.0f, bool visible = true)

      Draw a direction vector in the scene, from the center of mass of the active vessel.

      :parameters:

       * **direction** -- Direction to draw the line in.
       * **referenceFrame** -- Reference frame that the direction is in.
       * **length** -- The length of the line.
       * **visible** -- Whether the line is visible.

   .. method:: Polygon AddPolygon(System.Collections.Generic.IList<System.Tuple<double,double,double>> vertices, SpaceCenter.ReferenceFrame referenceFrame, bool visible = true)

      Draw a polygon in the scene, defined by a list of vertices.

      :parameters:

       * **vertices** -- Vertices of the polygon.
       * **referenceFrame** -- Reference frame that the vertices are in.
       * **visible** -- Whether the polygon is visible.

   .. method:: Text AddText(string text, SpaceCenter.ReferenceFrame referenceFrame, System.Tuple<double,double,double> position, System.Tuple<double,double,double,double> rotation, bool visible = true)

      Draw text in the scene.

      :parameters:

       * **text** -- The string to draw.
       * **referenceFrame** -- Reference frame that the text position is in.
       * **position** -- Position of the text.
       * **rotation** -- Rotation of the text, as a quaternion.
       * **visible** -- Whether the text is visible.

   .. method:: void Clear(bool clientOnly = false)

      Remove all objects being drawn.

      :parameters:

       * **clientOnly** -- If true, only remove objects created by the calling client.
