.. default-domain:: java
.. highlight:: java
.. package:: krpc.client.services.KRPC

Expressions
===========


.. type:: public class Expression

   A server side expression.

   .. method:: static Expression constantDouble(Connection connection, double value)

      A constant value of type double.

      :param double value:

   .. method:: static Expression constantFloat(Connection connection, float value)

      A constant value of type float.

      :param float value:

   .. method:: static Expression constantInt(Connection connection, int value)

      A constant value of type int.

      :param int value:

   .. method:: static Expression constantString(Connection connection, String value)

      A constant value of type string.

      :param String value:

   .. method:: static Expression call(Connection connection, krpc.schema.KRPC.ProcedureCall call)

      An RPC call.

      :param krpc.schema.KRPC.ProcedureCall call:

   .. method:: static Expression equal(Connection connection, Expression arg0, Expression arg1)

      Equality comparison.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression notEqual(Connection connection, Expression arg0, Expression arg1)

      Inequality comparison.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression greaterThan(Connection connection, Expression arg0, Expression arg1)

      Greater than numerical comparison.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression greaterThanOrEqual(Connection connection, Expression arg0, Expression arg1)

      Greater than or equal numerical comparison.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression lessThan(Connection connection, Expression arg0, Expression arg1)

      Less than numerical comparison.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression lessThanOrEqual(Connection connection, Expression arg0, Expression arg1)

      Less than or equal numerical comparison.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression and(Connection connection, Expression arg0, Expression arg1)

      Boolean and operator.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression or(Connection connection, Expression arg0, Expression arg1)

      Boolean or operator.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression exclusiveOr(Connection connection, Expression arg0, Expression arg1)

      Boolean exclusive-or operator.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression not(Connection connection, Expression arg)

      Boolean negation operator.

      :param Expression arg:

   .. method:: static Expression add(Connection connection, Expression arg0, Expression arg1)

      Numerical addition.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression subtract(Connection connection, Expression arg0, Expression arg1)

      Numerical subtraction.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression multiply(Connection connection, Expression arg0, Expression arg1)

      Numerical multiplication.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression divide(Connection connection, Expression arg0, Expression arg1)

      Numerical division.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression modulo(Connection connection, Expression arg0, Expression arg1)

      Numerical modulo operator.

      :param Expression arg0:
      :param Expression arg1:
      :returns: The remainder of arg0 divided by arg1

   .. method:: static Expression power(Connection connection, Expression arg0, Expression arg1)

      Numerical power operator.

      :param Expression arg0:
      :param Expression arg1:
      :returns: arg0 raised to the power of arg1

   .. method:: static Expression leftShift(Connection connection, Expression arg0, Expression arg1)

      Bitwise left shift.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression rightShift(Connection connection, Expression arg0, Expression arg1)

      Bitwise right shift.

      :param Expression arg0:
      :param Expression arg1:

   .. method:: static Expression toDouble(Connection connection, Expression arg)

      Convert to a double type.

      :param Expression arg:

   .. method:: static Expression toFloat(Connection connection, Expression arg)

      Convert to a float type.

      :param Expression arg:

   .. method:: static Expression toInt(Connection connection, Expression arg)

      Convert to an int type.

      :param Expression arg:
