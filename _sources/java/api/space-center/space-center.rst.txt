.. default-domain:: java
.. highlight:: java
.. package:: krpc.client.services.SpaceCenter

SpaceCenter
===========


.. type:: public class SpaceCenter

   Provides functionality to interact with Kerbal Space Program. This includes controlling
   the active vessel, managing its resources, planning maneuver nodes and auto-piloting.

   .. method:: float getScience()


      The current amount of science.

   .. method:: double getFunds()


      The current amount of funds.

   .. method:: float getReputation()


      The current amount of reputation.

   .. method:: Vessel getActiveVessel()

   .. method:: void setActiveVessel(Vessel value)

      The currently active vessel.

   .. method:: java.util.List<Vessel> getVessels()


      A list of all the vessels in the game.

   .. method:: java.util.Map<String,CelestialBody> getBodies()


      A dictionary of all celestial bodies (planets, moons, etc.) in the game,
      keyed by the name of the body.

   .. method:: CelestialBody getTargetBody()

   .. method:: void setTargetBody(CelestialBody value)

      The currently targeted celestial body.

   .. method:: Vessel getTargetVessel()

   .. method:: void setTargetVessel(Vessel value)

      The currently targeted vessel.

   .. method:: DockingPort getTargetDockingPort()

   .. method:: void setTargetDockingPort(DockingPort value)

      The currently targeted docking port.

   .. method:: void clearTarget()

      Clears the current target.

   .. method:: java.util.List<String> launchableVessels(String craftDirectory)

      Returns a list of vessels from the given *craftDirectory*
      that can be launched.

      :param String craftDirectory: Name of the directory in the current saves "Ships" directory. For example ``"VAB"`` or ``"SPH"``.

   .. method:: void launchVessel(String craftDirectory, String name, String launchSite, boolean recover)

      Launch a vessel.

      :param String craftDirectory: Name of the directory in the current saves "Ships" directory, that contains the craft file. For example ``"VAB"`` or ``"SPH"``.
      :param String name: Name of the vessel to launch. This is the name of the ".craft" file in the save directory, without the ".craft" file extension.
      :param String launchSite: Name of the launch site. For example ``"LaunchPad"`` or ``"Runway"``.
      :param boolean recover: If true and there is a vessel on the launch site, recover it before launching.

      .. note::

         Throws an exception if any of the games pre-flight checks fail.

   .. method:: void launchVesselFromVAB(String name, boolean recover)

      Launch a new vessel from the VAB onto the launchpad.

      :param String name: Name of the vessel to launch.
      :param boolean recover: If true and there is a vessel on the launch pad, recover it before launching.

      .. note::

         This is equivalent to calling :meth:`launchVessel(String, String, String, boolean)` with the craft directory
         set to "VAB" and the launch site set to "LaunchPad".
         Throws an exception if any of the games pre-flight checks fail.

   .. method:: void launchVesselFromSPH(String name, boolean recover)

      Launch a new vessel from the SPH onto the runway.

      :param String name: Name of the vessel to launch.
      :param boolean recover: If true and there is a vessel on the runway, recover it before launching.

      .. note::

         This is equivalent to calling :meth:`launchVessel(String, String, String, boolean)` with the craft directory
         set to "SPH" and the launch site set to "Runway".
         Throws an exception if any of the games pre-flight checks fail.

   .. method:: void save(String name)

      Save the game with a given name.
      This will create a save file called ``name.sfs`` in the folder of the
      current save game.

      :param String name:

   .. method:: void load(String name)

      Load the game with the given name.
      This will create a load a save file called ``name.sfs`` from the folder of the
      current save game.

      :param String name:

   .. method:: void quicksave()

      Save a quicksave.


      .. note::

         This is the same as calling :meth:`save(String)` with the name "quicksave".

   .. method:: void quickload()

      Load a quicksave.


      .. note::

         This is the same as calling :meth:`load(String)` with the name "quicksave".

   .. method:: boolean getUIVisible()

   .. method:: void setUIVisible(boolean value)

      Whether the UI is visible.

   .. method:: boolean getNavball()

   .. method:: void setNavball(boolean value)

      Whether the navball is visible.

   .. method:: double getUT()


      The current universal time in seconds.

   .. method:: double getG()


      The value of the `gravitational constant <https://en.wikipedia.org/wiki/Gravitational_constant>`_ G in :math:`N(m/kg)^2`.

   .. method:: float getWarpRate()


      The current warp rate. This is the rate at which time is passing for
      either on-rails or physical time warp. For example, a value of 10 means
      time is passing 10x faster than normal. Returns 1 if time warp is not
      active.

   .. method:: float getWarpFactor()


      The current warp factor. This is the index of the rate at which time
      is passing for either regular "on-rails" or physical time warp. Returns 0
      if time warp is not active. When in on-rails time warp, this is equal to
      :meth:`getRailsWarpFactor()`, and in physics time warp, this is equal to
      :meth:`getPhysicsWarpFactor()`.

   .. method:: int getRailsWarpFactor()

   .. method:: void setRailsWarpFactor(int value)

      The time warp rate, using regular "on-rails" time warp. A value between
      0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp
      is active.

      If requested time warp factor cannot be set, it will be set to the next
      lowest possible value. For example, if the vessel is too close to a
      planet. See `the KSP wiki <https://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

   .. method:: int getPhysicsWarpFactor()

   .. method:: void setPhysicsWarpFactor(int value)

      The physical time warp rate. A value between 0 and 3 inclusive. 0 means
      no time warp. Returns 0 if regular "on-rails" time warp is active.

   .. method:: boolean canRailsWarpAt(int factor)

      Returns ``true`` if regular "on-rails" time warp can be used, at the specified warp
      *factor*. The maximum time warp rate is limited by various things,
      including how close the active vessel is to a planet. See
      `the KSP wiki <https://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_
      for details.

      :param int factor: The warp factor to check.

   .. method:: int getMaximumRailsWarpFactor()


      The current maximum regular "on-rails" warp factor that can be set.
      A value between 0 and 7 inclusive. See
      `the KSP wiki <https://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_
      for details.

   .. method:: void warpTo(double ut, float maxRailsRate, float maxPhysicsRate)

      Uses time acceleration to warp forward to a time in the future, specified
      by universal time *ut*. This call blocks until the desired
      time is reached. Uses regular "on-rails" or physical time warp as appropriate.
      For example, physical time warp is used when the active vessel is traveling
      through an atmosphere. When using regular "on-rails" time warp, the warp
      rate is limited by *maxRailsRate*, and when using physical
      time warp, the warp rate is limited by *maxPhysicsRate*.

      :param double ut: The universal time to warp to, in seconds.
      :param float maxRailsRate: The maximum warp rate in regular "on-rails" time warp.
      :param float maxPhysicsRate: The maximum warp rate in physical time warp.
      :returns: When the time warp is complete.

   .. method:: org.javatuples.Triplet<Double,Double,Double> transformPosition(org.javatuples.Triplet<Double,Double,Double> position, ReferenceFrame from, ReferenceFrame to)

      Converts a position from one reference frame to another.

      :param org.javatuples.Triplet<Double,Double,Double> position: Position, as a vector, in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the position is in.
      :param ReferenceFrame to: The reference frame to covert the position to.
      :returns: The corresponding position, as a vector, in reference frame *to*.

   .. method:: org.javatuples.Triplet<Double,Double,Double> transformDirection(org.javatuples.Triplet<Double,Double,Double> direction, ReferenceFrame from, ReferenceFrame to)

      Converts a direction from one reference frame to another.

      :param org.javatuples.Triplet<Double,Double,Double> direction: Direction, as a vector, in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the direction is in.
      :param ReferenceFrame to: The reference frame to covert the direction to.
      :returns: The corresponding direction, as a vector, in reference frame *to*.

   .. method:: org.javatuples.Quartet<Double,Double,Double,Double> transformRotation(org.javatuples.Quartet<Double,Double,Double,Double> rotation, ReferenceFrame from, ReferenceFrame to)

      Converts a rotation from one reference frame to another.

      :param org.javatuples.Quartet<Double,Double,Double,Double> rotation: Rotation, as a quaternion of the form :math:`(x, y, z, w)`, in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the rotation is in.
      :param ReferenceFrame to: The reference frame to covert the rotation to.
      :returns: The corresponding rotation, as a quaternion of the form :math:`(x, y, z, w)`, in reference frame *to*.

   .. method:: org.javatuples.Triplet<Double,Double,Double> transformVelocity(org.javatuples.Triplet<Double,Double,Double> position, org.javatuples.Triplet<Double,Double,Double> velocity, ReferenceFrame from, ReferenceFrame to)

      Converts a velocity (acting at the specified position) from one reference frame
      to another. The position is required to take the relative angular velocity of the
      reference frames into account.

      :param org.javatuples.Triplet<Double,Double,Double> position: Position, as a vector, in reference frame *from*.
      :param org.javatuples.Triplet<Double,Double,Double> velocity: Velocity, as a vector that points in the direction of travel and whose magnitude is the speed in meters per second, in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the position and velocity are in.
      :param ReferenceFrame to: The reference frame to covert the velocity to.
      :returns: The corresponding velocity, as a vector, in reference frame *to*.

   .. method:: double raycastDistance(org.javatuples.Triplet<Double,Double,Double> position, org.javatuples.Triplet<Double,Double,Double> direction, ReferenceFrame referenceFrame)

      Cast a ray from a given position in a given direction, and return the distance to the hit point.
      If no hit occurs, returns infinity.

      :param org.javatuples.Triplet<Double,Double,Double> position: Position, as a vector, of the origin of the ray.
      :param org.javatuples.Triplet<Double,Double,Double> direction: Direction of the ray, as a unit vector.
      :param ReferenceFrame referenceFrame: The reference frame that the position and direction are in.
      :returns: The distance to the hit, in meters, or infinity if there was no hit.

   .. method:: Part raycastPart(org.javatuples.Triplet<Double,Double,Double> position, org.javatuples.Triplet<Double,Double,Double> direction, ReferenceFrame referenceFrame)

      Cast a ray from a given position in a given direction, and return the part that it hits.
      If no hit occurs, returns ``null``.

      :param org.javatuples.Triplet<Double,Double,Double> position: Position, as a vector, of the origin of the ray.
      :param org.javatuples.Triplet<Double,Double,Double> direction: Direction of the ray, as a unit vector.
      :param ReferenceFrame referenceFrame: The reference frame that the position and direction are in.
      :returns: The part that was hit or ``null`` if there was no hit.

   .. method:: boolean getFARAvailable()


      Whether `Ferram Aerospace Research <https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/>`_ is installed.

   .. method:: GameMode getGameMode()


      The current mode the game is in.

   .. method:: WarpMode getWarpMode()


      The current time warp mode. Returns :meth:`WarpMode.NONE` if time
      warp is not active, :meth:`WarpMode.RAILS` if regular "on-rails" time warp
      is active, or :meth:`WarpMode.PHYSICS` if physical time warp is active.

   .. method:: Camera getCamera()


      An object that can be used to control the camera.

   .. method:: WaypointManager getWaypointManager()


      The waypoint manager.

   .. method:: ContractManager getContractManager()


      The contract manager.



.. type:: public enum GameMode

   The game mode.
   Returned by :type:`GameMode`


   .. field:: public GameMode SANDBOX

      Sandbox mode.


   .. field:: public GameMode CAREER

      Career mode.


   .. field:: public GameMode SCIENCE

      Science career mode.


   .. field:: public GameMode SCIENCE_SANDBOX

      Science sandbox mode.


   .. field:: public GameMode MISSION

      Mission mode.


   .. field:: public GameMode MISSION_BUILDER

      Mission builder mode.


   .. field:: public GameMode SCENARIO

      Scenario mode.


   .. field:: public GameMode SCENARIO_NON_RESUMABLE

      Scenario mode that cannot be resumed.



.. type:: public enum WarpMode

   The time warp mode.
   Returned by :type:`WarpMode`


   .. field:: public WarpMode RAILS

      Time warp is active, and in regular "on-rails" mode.


   .. field:: public WarpMode PHYSICS

      Time warp is active, and in physical time warp mode.


   .. field:: public WarpMode NONE

      Time warp is not active.
