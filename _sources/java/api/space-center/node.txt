.. default-domain:: java
.. highlight:: java
.. package:: krpc.client.services.SpaceCenter

Node
====


.. type:: public class Node

   Represents a maneuver node. Can be created using :meth:`Control.addNode(double, float, float, float)`.

   .. method:: float getPrograde()

   .. method:: void setPrograde(float value)

      The magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.

   .. method:: float getNormal()

   .. method:: void setNormal(float value)

      The magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.

   .. method:: float getRadial()

   .. method:: void setRadial(float value)

      The magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.

   .. method:: float getDeltaV()

   .. method:: void setDeltaV(float value)

      The delta-v of the maneuver node, in meters per second.


      .. note::

         Does not change when executing the maneuver node. See :meth:`Node.getRemainingDeltaV()`.

   .. method:: float getRemainingDeltaV()


      Gets the remaining delta-v of the maneuver node, in meters per second. Changes as the node
      is executed. This is equivalent to the delta-v reported in-game.

   .. method:: org.javatuples.Triplet<Double,Double,Double> burnVector(ReferenceFrame referenceFrame)

      Returns a vector whose direction the direction of the maneuver node burn, and whose magnitude
      is the delta-v of the burn in m/s.

      :param ReferenceFrame referenceFrame:

      .. note::

         Does not change when executing the maneuver node. See :meth:`Node.remainingBurnVector(ReferenceFrame)`.

   .. method:: org.javatuples.Triplet<Double,Double,Double> remainingBurnVector(ReferenceFrame referenceFrame)

      Returns a vector whose direction the direction of the maneuver node burn, and whose magnitude
      is the delta-v of the burn in m/s. The direction and magnitude change as the burn is executed.

      :param ReferenceFrame referenceFrame:

   .. method:: double getUT()

   .. method:: void setUT(double value)

      The universal time at which the maneuver will occur, in seconds.

   .. method:: double getTimeTo()


      The time until the maneuver node will be encountered, in seconds.

   .. method:: Orbit getOrbit()


      The orbit that results from executing the maneuver node.

   .. method:: void remove()

      Removes the maneuver node.

   .. method:: ReferenceFrame getReferenceFrame()


      Gets the reference frame that is fixed relative to the maneuver node's burn.

      * The origin is at the position of the maneuver node.
      * The y-axis points in the direction of the burn.
      * The x-axis and z-axis point in arbitrary but fixed directions.

   .. method:: ReferenceFrame getOrbitalReferenceFrame()


      Gets the reference frame that is fixed relative to the maneuver node, and
      orientated with the orbital prograde/normal/radial directions of the
      original orbit at the maneuver node's position.

      * The origin is at the position of the maneuver node.
      * The x-axis points in the orbital anti-radial direction of the original
        orbit, at the position of the maneuver node.
      * The y-axis points in the orbital prograde direction of the original
        orbit, at the position of the maneuver node.
      * The z-axis points in the orbital normal direction of the original orbit,
        at the position of the maneuver node.

   .. method:: org.javatuples.Triplet<Double,Double,Double> position(ReferenceFrame referenceFrame)

      Returns the position vector of the maneuver node in the given reference frame.

      :param ReferenceFrame referenceFrame:

   .. method:: org.javatuples.Triplet<Double,Double,Double> direction(ReferenceFrame referenceFrame)

      Returns the unit direction vector of the maneuver nodes burn in the given reference frame.

      :param ReferenceFrame referenceFrame:
