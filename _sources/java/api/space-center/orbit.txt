.. default-domain:: java
.. highlight:: java


Orbit
=====


.. type:: public class Orbit

   Describes an orbit. For example, the orbit of a vessel, obtained by calling
   :meth:`Vessel.getOrbit()`, or a celestial body, obtained by calling
   :meth:`CelestialBody.getOrbit()`.

   .. method:: CelestialBody getBody()


      The celestial body (e.g. planet or moon) around which the object is orbiting.

   .. method:: double getApoapsis()


      Gets the apoapsis of the orbit, in meters, from the center of mass of the body being orbited.


      .. note::

         For the apoapsis altitude reported on the in-game map view, use :meth:`Orbit.getApoapsisAltitude()`.

   .. method:: double getPeriapsis()


      The periapsis of the orbit, in meters, from the center of mass of the body being orbited.


      .. note::

         For the periapsis altitude reported on the in-game map view, use :meth:`Orbit.getPeriapsisAltitude()`.

   .. method:: double getApoapsisAltitude()


      The apoapsis of the orbit, in meters, above the sea level of the body being orbited.


      .. note::

         This is equal to :meth:`Orbit.getApoapsis()` minus the equatorial radius of the body.

   .. method:: double getPeriapsisAltitude()


      The periapsis of the orbit, in meters, above the sea level of the body being orbited.


      .. note::

         This is equal to :meth:`Orbit.getPeriapsis()` minus the equatorial radius of the body.

   .. method:: double getSemiMajorAxis()


      The semi-major axis of the orbit, in meters.

   .. method:: double getSemiMinorAxis()


      The semi-minor axis of the orbit, in meters.

   .. method:: double getRadius()


      The current radius of the orbit, in meters. This is the distance between the center
      of mass of the object in orbit, and the center of mass of the body around which it is orbiting.


      .. note::

         This value will change over time if the orbit is elliptical.

   .. method:: double getSpeed()


      The current orbital speed of the object in meters per second.


      .. note::

         This value will change over time if the orbit is elliptical.

   .. method:: double getPeriod()


      The orbital period, in seconds.

   .. method:: double getTimeToApoapsis()


      The time until the object reaches apoapsis, in seconds.

   .. method:: double getTimeToPeriapsis()


      The time until the object reaches periapsis, in seconds.

   .. method:: double getEccentricity()


      The `eccentricity <https://en.wikipedia.org/wiki/Orbital_eccentricity>`_ of the orbit.

   .. method:: double getInclination()


      The `inclination <https://en.wikipedia.org/wiki/Orbital_inclination>`_ of the orbit,
      in radians.

   .. method:: double getLongitudeOfAscendingNode()


      The `longitude of the ascending node <https://en.wikipedia.org/wiki/Longitude_of_the_ascending_node>`_, in radians.

   .. method:: double getArgumentOfPeriapsis()


      The `argument of periapsis <https://en.wikipedia.org/wiki/Argument_of_periapsis>`_, in radians.

   .. method:: double getMeanAnomalyAtEpoch()


      The `mean anomaly at epoch <https://en.wikipedia.org/wiki/Mean_anomaly>`_.

   .. method:: double getEpoch()


      The time since the epoch (the point at which the
      `mean anomaly at epoch <https://en.wikipedia.org/wiki/Mean_anomaly>`_ was measured, in seconds.

   .. method:: double getMeanAnomaly()


      The `mean anomaly <https://en.wikipedia.org/wiki/Mean_anomaly>`_.

   .. method:: double getEccentricAnomaly()


      The `eccentric anomaly <https://en.wikipedia.org/wiki/Eccentric_anomaly>`_.

   .. method:: org.javatuples.Triplet<Double,Double,Double> referencePlaneNormal(ReferenceFrame referenceFrame)

      The unit direction vector that is normal to the orbits reference plane, in the given
      reference frame. The reference plane is the plane from which the orbits inclination is measured.

      :param ReferenceFrame referenceFrame:

   .. method:: org.javatuples.Triplet<Double,Double,Double> referencePlaneDirection(ReferenceFrame referenceFrame)

      The unit direction vector from which the orbits longitude of ascending node is measured,
      in the given reference frame.

      :param ReferenceFrame referenceFrame:

   .. method:: double getTimeToSOIChange()


      The time until the object changes sphere of influence, in seconds. Returns ``NaN`` if the
      object is not going to change sphere of influence.

   .. method:: Orbit getNextOrbit()


      If the object is going to change sphere of influence in the future, returns the new orbit
      after the change. Otherwise returns ``null``.
