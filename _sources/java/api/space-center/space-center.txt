.. default-domain:: java
.. highlight:: java


SpaceCenter
===========


.. type:: public class SpaceCenter

   Provides functionality to interact with Kerbal Space Program. This includes controlling
   the active vessel, managing its resources, planning maneuver nodes and auto-piloting.

   .. method:: Vessel getActiveVessel()

   .. method:: void setActiveVessel(Vessel value)

      The currently active vessel.

   .. method:: java.util.List<Vessel> getVessels()


      A list of all the vessels in the game.

   .. method:: java.util.Map<String,CelestialBody> getBodies()


      A dictionary of all celestial bodies (planets, moons, etc.) in the game,
      keyed by the name of the body.

   .. method:: CelestialBody getTargetBody()

   .. method:: void setTargetBody(CelestialBody value)

      The currently targeted celestial body.

   .. method:: Vessel getTargetVessel()

   .. method:: void setTargetVessel(Vessel value)

      The currently targeted vessel.

   .. method:: DockingPort getTargetDockingPort()

   .. method:: void setTargetDockingPort(DockingPort value)

      The currently targeted docking port.

   .. method:: void clearTarget()

      Clears the current target.

   .. method:: void launchVesselFromVAB(String name)

      Launch a new vessel from the VAB onto the launchpad.

      :param String name: Name of the vessel's craft file.

   .. method:: void launchVesselFromSPH(String name)

      Launch a new vessel from the SPH onto the runway.

      :param String name: Name of the vessel's craft file.

   .. method:: double getUT()


      The current universal time in seconds.

   .. method:: float getG()


      The value of the `gravitational constant <http://en.wikipedia.org/wiki/Gravitational_constant>`_
      G in :math:`N(m/kg)^2`.

   .. method:: WarpMode getWarpMode()


      The current time warp mode. Returns :meth:`WarpMode.NONE` if time
      warp is not active, :meth:`WarpMode.RAILS` if regular "on-rails" time warp
      is active, or :meth:`WarpMode.PHYSICS` if physical time warp is active.

   .. method:: float getWarpRate()


      The current warp rate. This is the rate at which time is passing for
      either on-rails or physical time warp. For example, a value of 10 means
      time is passing 10x faster than normal. Returns 1 if time warp is not
      active.

   .. method:: float getWarpFactor()


      The current warp factor. This is the index of the rate at which time
      is passing for either regular "on-rails" or physical time warp. Returns 0
      if time warp is not active. When in on-rails time warp, this is equal to
      :meth:`getRailsWarpFactor()`, and in physics time warp, this is equal to
      :meth:`getPhysicsWarpFactor()`.

   .. method:: int getRailsWarpFactor()

   .. method:: void setRailsWarpFactor(int value)

      The time warp rate, using regular "on-rails" time warp. A value between
      0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp
      is active.
      If requested time warp factor cannot be set, it will be set to the next
      lowest possible value. For example, if the vessel is too close to a
      planet. See `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

   .. method:: int getPhysicsWarpFactor()

   .. method:: void setPhysicsWarpFactor(int value)

      The physical time warp rate. A value between 0 and 3 inclusive. 0 means
      no time warp. Returns 0 if regular "on-rails" time warp is active.

   .. method:: boolean canRailsWarpAt(int factor)

      Returns ``true`` if regular "on-rails" time warp can be used, at the specified warp
      *factor*. The maximum time warp rate is limited by various things,
      including how close the active vessel is to a planet. See
      `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

      :param int factor: The warp factor to check.

   .. method:: int getMaximumRailsWarpFactor()


      The current maximum regular "on-rails" warp factor that can be set.
      A value between 0 and 7 inclusive.  See
      `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

   .. method:: void warpTo(double UT, float maxRailsRate, float maxPhysicsRate)

      Uses time acceleration to warp forward to a time in the future, specified
      by universal time *UT*. This call blocks until the desired
      time is reached. Uses regular "on-rails" or physical time warp as appropriate.
      For example, physical time warp is used when the active vessel is traveling
      through an atmosphere. When using regular "on-rails" time warp, the warp
      rate is limited by *maxRailsRate*, and when using physical
      time warp, the warp rate is limited by *maxPhysicsRate*.

      :param double UT: The universal time to warp to, in seconds.
      :param float maxRailsRate: The maximum warp rate in regular "on-rails" time warp.
      :param float maxPhysicsRate: The maximum warp rate in physical time warp.
      :returns: When the time warp is complete.

   .. method:: org.javatuples.Triplet<Double,Double,Double> transformPosition(org.javatuples.Triplet<Double,Double,Double> position, ReferenceFrame from, ReferenceFrame to)

      Converts a position vector from one reference frame to another.

      :param org.javatuples.Triplet<Double,Double,Double> position: Position vector in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the position vector is in.
      :param ReferenceFrame to: The reference frame to covert the position vector to.
      :returns: The corresponding position vector in reference frame *to*.

   .. method:: org.javatuples.Triplet<Double,Double,Double> transformDirection(org.javatuples.Triplet<Double,Double,Double> direction, ReferenceFrame from, ReferenceFrame to)

      Converts a direction vector from one reference frame to another.

      :param org.javatuples.Triplet<Double,Double,Double> direction: Direction vector in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the direction vector is in.
      :param ReferenceFrame to: The reference frame to covert the direction vector to.
      :returns: The corresponding direction vector in reference frame *to*.

   .. method:: org.javatuples.Quartet<Double,Double,Double,Double> transformRotation(org.javatuples.Quartet<Double,Double,Double,Double> rotation, ReferenceFrame from, ReferenceFrame to)

      Converts a rotation from one reference frame to another.

      :param org.javatuples.Quartet<Double,Double,Double,Double> rotation: Rotation in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the rotation is in.
      :param ReferenceFrame to: The corresponding rotation in reference frame *to*.
      :returns: The corresponding rotation in reference frame *to*.

   .. method:: org.javatuples.Triplet<Double,Double,Double> transformVelocity(org.javatuples.Triplet<Double,Double,Double> position, org.javatuples.Triplet<Double,Double,Double> velocity, ReferenceFrame from, ReferenceFrame to)

      Converts a velocity vector (acting at the specified position vector) from one
      reference frame to another. The position vector is required to take the
      relative angular velocity of the reference frames into account.

      :param org.javatuples.Triplet<Double,Double,Double> position: Position vector in reference frame *from*.
      :param org.javatuples.Triplet<Double,Double,Double> velocity: Velocity vector in reference frame *from*.
      :param ReferenceFrame from: The reference frame that the position and velocity vectors are in.
      :param ReferenceFrame to: The reference frame to covert the velocity vector to.
      :returns: The corresponding velocity in reference frame *to*.

   .. method:: boolean getFARAvailable()


      Whether `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/threads/20451>`_ is installed.

   .. method:: boolean getRemoteTechAvailable()


      Whether `RemoteTech <http://forum.kerbalspaceprogram.com/threads/83305>`_ is installed.

   .. method:: void drawDirection(org.javatuples.Triplet<Double,Double,Double> direction, ReferenceFrame referenceFrame, org.javatuples.Triplet<Double,Double,Double> color, float length)

      Draw a direction vector on the active vessel.

      :param org.javatuples.Triplet<Double,Double,Double> direction: Direction to draw the line in.
      :param ReferenceFrame referenceFrame: Reference frame that the direction is in.
      :param org.javatuples.Triplet<Double,Double,Double> color: The color to use for the line, as an RGB color.
      :param float length: The length of the line. Defaults to 10.

   .. method:: void drawLine(org.javatuples.Triplet<Double,Double,Double> start, org.javatuples.Triplet<Double,Double,Double> end, ReferenceFrame referenceFrame, org.javatuples.Triplet<Double,Double,Double> color)

      Draw a line.

      :param org.javatuples.Triplet<Double,Double,Double> start: Position of the start of the line.
      :param org.javatuples.Triplet<Double,Double,Double> end: Position of the end of the line.
      :param ReferenceFrame referenceFrame: Reference frame that the position are in.
      :param org.javatuples.Triplet<Double,Double,Double> color: The color to use for the line, as an RGB color.

   .. method:: void clearDrawing()

      Remove all directions and lines currently being drawn.



.. type:: public enum WarpMode

   Returned by :meth:`getWarpMode()`


   .. field:: public WarpMode RAILS

      Time warp is active, and in regular "on-rails" mode.


   .. field:: public WarpMode PHYSICS

      Time warp is active, and in physical time warp mode.


   .. field:: public WarpMode NONE

      Time warp is not active.
