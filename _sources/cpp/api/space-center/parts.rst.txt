.. default-domain:: cpp
.. highlight:: cpp
.. namespace:: krpc::services::SpaceCenter

.. _cpp-api-parts:

Parts
=====

The following classes allow interaction with a vessels individual parts.

.. contents::
   :local:

Parts
-----


.. class:: Parts

   Instances of this class are used to interact with the parts of a vessel.
   An instance can be obtained by calling :func:`Vessel::parts`.

   .. function:: std::vector<Part> all()

      A list of all of the vessels parts.

      :Game Scenes: All

   .. function:: Part root()

      The vessels root part.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-trees-of-parts`.

   .. function:: Part controlling()
   .. function:: void set_controlling(Part value)

      The part from which the vessel is controlled.

      :Game Scenes: All

   .. function:: std::vector<Part> with_name(std::string name)

      A list of parts whose :func:`Part::name` is *name*.

      :Parameters:



      :Game Scenes: All

   .. function:: std::vector<Part> with_title(std::string title)

      A list of all parts whose :func:`Part::title` is *title*.

      :Parameters:



      :Game Scenes: All

   .. function:: std::vector<Part> with_tag(std::string tag)

      A list of all parts whose :func:`Part::tag` is *tag*.

      :Parameters:



      :Game Scenes: All

   .. function:: std::vector<Part> with_module(std::string module_name)

      A list of all parts that contain a :class:`Module` whose
      :func:`Module::name` is *module_name*.

      :Parameters:



      :Game Scenes: All

   .. function:: std::vector<Part> in_stage(int32_t stage)

      A list of all parts that are activated in the given *stage*.

      :Parameters:



      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-staging`.

   .. function:: std::vector<Part> in_decouple_stage(int32_t stage)

      A list of all parts that are decoupled in the given *stage*.

      :Parameters:



      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-staging`.

   .. function:: std::vector<Module> modules_with_name(std::string module_name)

      A list of modules (combined across all parts in the vessel) whose
      :func:`Module::name` is *module_name*.

      :Parameters:



      :Game Scenes: All

   .. function:: std::vector<Antenna> antennas()

      A list of all antennas in the vessel.

      :Game Scenes: All

   .. function:: std::vector<CargoBay> cargo_bays()

      A list of all cargo bays in the vessel.

      :Game Scenes: All

   .. function:: std::vector<ControlSurface> control_surfaces()

      A list of all control surfaces in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Decoupler> decouplers()

      A list of all decouplers in the vessel.

      :Game Scenes: All

   .. function:: std::vector<DockingPort> docking_ports()

      A list of all docking ports in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Engine> engines()

      A list of all engines in the vessel.

      :Game Scenes: All


      .. note::

         This includes any part that generates thrust. This covers many different types
         of engine, including liquid fuel rockets, solid rocket boosters, jet engines and
         RCS thrusters.

   .. function:: std::vector<Experiment> experiments()

      A list of all science experiments in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Fairing> fairings()

      A list of all fairings in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Intake> intakes()

      A list of all intakes in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Leg> legs()

      A list of all landing legs attached to the vessel.

      :Game Scenes: All

   .. function:: std::vector<LaunchClamp> launch_clamps()

      A list of all launch clamps attached to the vessel.

      :Game Scenes: All

   .. function:: std::vector<Light> lights()

      A list of all lights in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Parachute> parachutes()

      A list of all parachutes in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Radiator> radiators()

      A list of all radiators in the vessel.

      :Game Scenes: All

   .. function:: std::vector<RCS> rcs()

      A list of all RCS blocks/thrusters in the vessel.

      :Game Scenes: All

   .. function:: std::vector<ReactionWheel> reaction_wheels()

      A list of all reaction wheels in the vessel.

      :Game Scenes: All

   .. function:: std::vector<ResourceConverter> resource_converters()

      A list of all resource converters in the vessel.

      :Game Scenes: All

   .. function:: std::vector<ResourceHarvester> resource_harvesters()

      A list of all resource harvesters in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Sensor> sensors()

      A list of all sensors in the vessel.

      :Game Scenes: All

   .. function:: std::vector<SolarPanel> solar_panels()

      A list of all solar panels in the vessel.

      :Game Scenes: All

   .. function:: std::vector<Wheel> wheels()

      A list of all wheels in the vessel.

      :Game Scenes: All



Part
----


.. class:: Part

   Represents an individual part. Vessels are made up of multiple parts.
   Instances of this class can be obtained by several methods in :class:`Parts`.

   .. function:: std::string name()

      Internal name of the part, as used in
      `part cfg files <https://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation>`_.
      For example "Mark1-2Pod".

      :Game Scenes: All

   .. function:: std::string title()

      Title of the part, as shown when the part is right clicked in-game. For example "Mk1-2 Command Pod".

      :Game Scenes: All

   .. function:: std::string tag()
   .. function:: void set_tag(std::string value)

      The name tag for the part. Can be set to a custom string using the
      in-game user interface.

      :Game Scenes: All


      .. note::

         This string is shared with
         `kOS <https://forum.kerbalspaceprogram.com/index.php?/topic/61827-/>`_
         if it is installed.

   .. function:: bool highlighted()
   .. function:: void set_highlighted(bool value)

      Whether the part is highlighted.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> highlight_color()
   .. function:: void set_highlight_color(std::tuple<double, double, double> value)

      The color used to highlight the part, as an RGB triple.

      :Game Scenes: All

   .. function:: double cost()

      The cost of the part, in units of funds.

      :Game Scenes: All

   .. function:: Vessel vessel()

      The vessel that contains this part.

      :Game Scenes: All

   .. function:: Part parent()

      The parts parent. Returns ``NULL`` if the part does not have a parent.
      This, in combination with :func:`Part::children`, can be used to traverse the vessels
      parts tree.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-trees-of-parts`.

   .. function:: std::vector<Part> children()

      The parts children. Returns an empty list if the part has no children.
      This, in combination with :func:`Part::parent`, can be used to traverse the vessels
      parts tree.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-trees-of-parts`.

   .. function:: bool axially_attached()

      Whether the part is axially attached to its parent, i.e. on the top
      or bottom of its parent. If the part has no parent, returns ``false``.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-attachment-modes`.

   .. function:: bool radially_attached()

      Whether the part is radially attached to its parent, i.e. on the side of its parent.
      If the part has no parent, returns ``false``.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-attachment-modes`.

   .. function:: int32_t stage()

      The stage in which this part will be activated. Returns -1 if the part is not
      activated by staging.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-staging`.

   .. function:: int32_t decouple_stage()

      The stage in which this part will be decoupled. Returns -1 if the part is never
      decoupled from the vessel.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-staging`.

   .. function:: bool massless()

      Whether the part is
      `massless <https://wiki.kerbalspaceprogram.com/wiki/Massless_part>`_.

      :Game Scenes: All

   .. function:: double mass()

      The current mass of the part, including resources it contains, in kilograms.
      Returns zero if the part is massless.

      :Game Scenes: All

   .. function:: double dry_mass()

      The mass of the part, not including any resources it contains, in kilograms.
      Returns zero if the part is massless.

      :Game Scenes: All

   .. function:: bool shielded()

      Whether the part is shielded from the exterior of the vessel, for example by a fairing.

      :Game Scenes: All

   .. function:: float dynamic_pressure()

      The dynamic pressure acting on the part, in Pascals.

      :Game Scenes: All

   .. function:: double impact_tolerance()

      The impact tolerance of the part, in meters per second.

      :Game Scenes: All

   .. function:: double temperature()

      Temperature of the part, in Kelvin.

      :Game Scenes: All

   .. function:: double skin_temperature()

      Temperature of the skin of the part, in Kelvin.

      :Game Scenes: All

   .. function:: double max_temperature()

      Maximum temperature that the part can survive, in Kelvin.

      :Game Scenes: All

   .. function:: double max_skin_temperature()

      Maximum temperature that the skin of the part can survive, in Kelvin.

      :Game Scenes: All

   .. function:: float thermal_mass()

      A measure of how much energy it takes to increase the internal temperature of the part,
      in Joules per Kelvin.

      :Game Scenes: All

   .. function:: float thermal_skin_mass()

      A measure of how much energy it takes to increase the skin temperature of the part,
      in Joules per Kelvin.

      :Game Scenes: All

   .. function:: float thermal_resource_mass()

      A measure of how much energy it takes to increase the temperature of the resources
      contained in the part, in Joules per Kelvin.

      :Game Scenes: All

   .. function:: float thermal_conduction_flux()

      The rate at which heat energy is conducting into or out of the part via contact with
      other parts. Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is
      losing heat energy.

      :Game Scenes: All

   .. function:: float thermal_convection_flux()

      The rate at which heat energy is convecting into or out of the part from the
      surrounding atmosphere. Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is
      losing heat energy.

      :Game Scenes: All

   .. function:: float thermal_radiation_flux()

      The rate at which heat energy is radiating into or out of the part from the surrounding
      environment. Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is
      losing heat energy.

      :Game Scenes: All

   .. function:: float thermal_internal_flux()

      The rate at which heat energy is begin generated by the part.
      For example, some engines generate heat by combusting fuel.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part is gaining heat energy, and negative means it is losing
      heat energy.

      :Game Scenes: All

   .. function:: float thermal_skin_to_internal_flux()

      The rate at which heat energy is transferring between the part's skin and its internals.
      Measured in energy per unit time, or power, in Watts.
      A positive value means the part's internals are gaining heat energy,
      and negative means its skin is gaining heat energy.

      :Game Scenes: All

   .. function:: Resources resources()

      A :class:`Resources` object for the part.

      :Game Scenes: All

   .. function:: bool crossfeed()

      Whether this part is crossfeed capable.

      :Game Scenes: All

   .. function:: bool is_fuel_line()

      Whether this part is a fuel line.

      :Game Scenes: All

   .. function:: std::vector<Part> fuel_lines_from()

      The parts that are connected to this part via fuel lines, where the direction of the
      fuel line is into this part.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-fuel-lines`.

   .. function:: std::vector<Part> fuel_lines_to()

      The parts that are connected to this part via fuel lines, where the direction of the
      fuel line is out of this part.

      :Game Scenes: All


      .. note:: See the discussion on :rst:ref:`cpp-api-parts-fuel-lines`.

   .. function:: std::vector<Module> modules()

      The modules for this part.

      :Game Scenes: All

   .. function:: Antenna antenna()

      A :class:`Antenna` if the part is an antenna, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: CargoBay cargo_bay()

      A :class:`CargoBay` if the part is a cargo bay, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: ControlSurface control_surface()

      A :class:`ControlSurface` if the part is an aerodynamic control surface,
      otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Decoupler decoupler()

      A :class:`Decoupler` if the part is a decoupler, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: DockingPort docking_port()

      A :class:`DockingPort` if the part is a docking port, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Engine engine()

      An :class:`Engine` if the part is an engine, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Experiment experiment()

      An :class:`Experiment` if the part is a science experiment, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Fairing fairing()

      A :class:`Fairing` if the part is a fairing, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Intake intake()

      An :class:`Intake` if the part is an intake, otherwise ``NULL``.

      :Game Scenes: All


      .. note::

         This includes any part that generates thrust. This covers many different types
         of engine, including liquid fuel rockets, solid rocket boosters and jet engines.
         For RCS thrusters see :class:`RCS`.

   .. function:: Leg leg()

      A :class:`Leg` if the part is a landing leg, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: LaunchClamp launch_clamp()

      A :class:`LaunchClamp` if the part is a launch clamp, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Light light()

      A :class:`Light` if the part is a light, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Parachute parachute()

      A :class:`Parachute` if the part is a parachute, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Radiator radiator()

      A :class:`Radiator` if the part is a radiator, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: RCS rcs()

      A :class:`RCS` if the part is an RCS block/thruster, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: ReactionWheel reaction_wheel()

      A :class:`ReactionWheel` if the part is a reaction wheel, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: ResourceConverter resource_converter()

      A :class:`ResourceConverter` if the part is a resource converter,
      otherwise ``NULL``.

      :Game Scenes: All

   .. function:: ResourceHarvester resource_harvester()

      A :class:`ResourceHarvester` if the part is a resource harvester,
      otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Sensor sensor()

      A :class:`Sensor` if the part is a sensor, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: SolarPanel solar_panel()

      A :class:`SolarPanel` if the part is a solar panel, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: Wheel wheel()

      A :class:`Wheel` if the part is a wheel, otherwise ``NULL``.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> position(ReferenceFrame reference_frame)

      The position of the part in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All


      .. note::

         This is a fixed position in the part, defined by the parts model.
         It s not necessarily the same as the parts center of mass.
         Use :func:`Part::center_of_mass` to get the parts center of mass.

   .. function:: std::tuple<double, double, double> center_of_mass(ReferenceFrame reference_frame)

      The position of the parts center of mass in the given reference frame.
      If the part is physicsless, this is equivalent to :func:`Part::position`.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<std::tuple<double, double, double>, std::tuple<double, double, double>> bounding_box(ReferenceFrame reference_frame)

      The axis-aligned bounding box of the part in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vectors are in.

      :returns: The positions of the minimum and maximum vertices of the box, as position vectors.
      :Game Scenes: All


      .. note::

         This is computed from the collision mesh of the part.
         If the part is not collidable, the box has zero volume and is centered on
         the :func:`Part::position` of the part.

   .. function:: std::tuple<double, double, double> direction(ReferenceFrame reference_frame)

      The direction the part points in, in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned direction is in.

      :returns: The direction as a unit vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> velocity(ReferenceFrame reference_frame)

      The linear velocity of the part in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned velocity vector is in.

      :returns: The velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the body in meters per second.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double, double> rotation(ReferenceFrame reference_frame)

      The rotation of the part, in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned rotation is in.

      :returns: The rotation as a quaternion of the form :math:`(x, y, z, w)`.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> moment_of_inertia()

      The moment of inertia of the part in :math:`kg.m^2` around its center of mass
      in the parts reference frame (:class:`ReferenceFrame`).

      :Game Scenes: All

   .. function:: std::vector<double> inertia_tensor()

      The inertia tensor of the part in the parts reference frame
      (:class:`ReferenceFrame`).
      Returns the 3x3 matrix as a list of elements, in row-major order.

      :Game Scenes: All

   .. function:: ReferenceFrame reference_frame()

      The reference frame that is fixed relative to this part, and centered on a fixed
      position within the part, defined by the parts model.

      * The origin is at the position of the part, as returned by
        :func:`Part::position`.
      * The axes rotate with the part.
      * The x, y and z axis directions depend on the design of the part.

      :Game Scenes: All


      .. note::

         For docking port parts, this reference frame is not necessarily equivalent to the
         reference frame for the docking port, returned by
         :func:`DockingPort::reference_frame`.

      .. figure:: /images/reference-frames/part.png
         :align: center

         Mk1 Command Pod reference frame origin and axes

   .. function:: ReferenceFrame center_of_mass_reference_frame()

      The reference frame that is fixed relative to this part, and centered on its
      center of mass.

      * The origin is at the center of mass of the part, as returned by
        :func:`Part::center_of_mass`.
      * The axes rotate with the part.
      * The x, y and z axis directions depend on the design of the part.

      :Game Scenes: All


      .. note::

         For docking port parts, this reference frame is not necessarily equivalent to the
         reference frame for the docking port, returned by
         :func:`DockingPort::reference_frame`.

   .. function:: Force add_force(std::tuple<double, double, double> force, std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      Exert a constant force on the part, acting at the given position.

      :Parameters:

       * **force** -- A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.
       * **position** -- The position at which the force acts, as a vector.
       * **reference_frame** -- The reference frame that the force and position are in.

      :returns: An object that can be used to remove or modify the force.
      :Game Scenes: All

   .. function:: void instantaneous_force(std::tuple<double, double, double> force, std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      Exert an instantaneous force on the part, acting at the given position.

      :Parameters:

       * **force** -- A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.
       * **position** -- The position at which the force acts, as a vector.
       * **reference_frame** -- The reference frame that the force and position are in.

      :Game Scenes: All


      .. note::

         The force is applied instantaneously in a single physics update.



.. class:: Force

   Obtained by calling :func:`Part::add_force`.

   .. function:: Part part()

      The part that this force is applied to.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> force_vector()
   .. function:: void set_force_vector(std::tuple<double, double, double> value)

      The force vector, in Newtons.

      :returns: A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> position()
   .. function:: void set_position(std::tuple<double, double, double> value)

      The position at which the force acts, in reference frame :class:`ReferenceFrame`.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: ReferenceFrame reference_frame()
   .. function:: void set_reference_frame(ReferenceFrame value)

      The reference frame of the force vector and position.

      :Game Scenes: All

   .. function:: void remove()

      Remove the force.


      :Game Scenes: All



Module
------


.. class:: Module

   This can be used to interact with a specific part module. This includes part modules in
   stock KSP, and those added by mods.

   In KSP, each part has zero or more
   `PartModules <https://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES>`_
   associated with it. Each one contains some of the functionality of the part.
   For example, an engine has a "ModuleEngines" part module that contains all the
   functionality of an engine.

   .. function:: std::string name()

      Name of the PartModule. For example, "ModuleEngines".

      :Game Scenes: All

   .. function:: Part part()

      The part that contains this module.

      :Game Scenes: All

   .. function:: std::map<std::string, std::string> fields()

      The modules field names and their associated values, as a dictionary.
      These are the values visible in the right-click menu of the part.

      :Game Scenes: All

   .. function:: bool has_field(std::string name)

      Returns ``true`` if the module has a field with the given name.

      :Parameters:

       * **name** -- Name of the field.

      :Game Scenes: All

   .. function:: std::string get_field(std::string name)

      Returns the value of a field.

      :Parameters:

       * **name** -- Name of the field.

      :Game Scenes: All

   .. function:: void set_field_int(std::string name, int32_t value)

      Set the value of a field to the given integer number.

      :Parameters:

       * **name** -- Name of the field.
       * **value** -- Value to set.

      :Game Scenes: All

   .. function:: void set_field_float(std::string name, float value)

      Set the value of a field to the given floating point number.

      :Parameters:

       * **name** -- Name of the field.
       * **value** -- Value to set.

      :Game Scenes: All

   .. function:: void set_field_string(std::string name, std::string value)

      Set the value of a field to the given string.

      :Parameters:

       * **name** -- Name of the field.
       * **value** -- Value to set.

      :Game Scenes: All

   .. function:: void reset_field(std::string name)

      Set the value of a field to its original value.

      :Parameters:

       * **name** -- Name of the field.

      :Game Scenes: All

   .. function:: std::vector<std::string> events()

      A list of the names of all of the modules events. Events are the clickable buttons
      visible in the right-click menu of the part.

      :Game Scenes: All

   .. function:: bool has_event(std::string name)

      ``true`` if the module has an event with the given name.

      :Parameters:



      :Game Scenes: All

   .. function:: void trigger_event(std::string name)

      Trigger the named event. Equivalent to clicking the button in the right-click menu
      of the part.

      :Parameters:



      :Game Scenes: All

   .. function:: std::vector<std::string> actions()

      A list of all the names of the modules actions. These are the parts actions that can
      be assigned to action groups in the in-game editor.

      :Game Scenes: All

   .. function:: bool has_action(std::string name)

      ``true`` if the part has an action with the given name.

      :Parameters:



      :Game Scenes: All

   .. function:: void set_action(std::string name, bool value = true)

      Set the value of an action with the given name.

      :Parameters:




      :Game Scenes: All



Specific Types of Part
----------------------

The following classes provide functionality for specific types of part.

.. contents::
   :local:

Antenna
^^^^^^^


.. class:: Antenna

   An antenna. Obtained by calling :func:`Part::antenna`.

   .. function:: Part part()

      The part object for this antenna.

      :Game Scenes: All

   .. function:: AntennaState state()

      The current state of the antenna.

      :Game Scenes: All

   .. function:: bool deployable()

      Whether the antenna is deployable.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      Whether the antenna is deployed.

      :Game Scenes: All


      .. note::

         Fixed antennas are always deployed.
         Returns an error if you try to deploy a fixed antenna.

   .. function:: bool can_transmit()

      Whether data can be transmitted by this antenna.

      :Game Scenes: All

   .. function:: void transmit()

      Transmit data.


      :Game Scenes: All

   .. function:: void cancel()

      Cancel current transmission of data.


      :Game Scenes: All

   .. function:: bool allow_partial()
   .. function:: void set_allow_partial(bool value)

      Whether partial data transmission is permitted.

      :Game Scenes: All

   .. function:: double power()

      The power of the antenna.

      :Game Scenes: All

   .. function:: bool combinable()

      Whether the antenna can be combined with other antennae on the vessel
      to boost the power.

      :Game Scenes: All

   .. function:: double combinable_exponent()

      Exponent used to calculate the combined power of multiple antennae on a vessel.

      :Game Scenes: All

   .. function:: float packet_interval()

      Interval between sending packets in seconds.

      :Game Scenes: All

   .. function:: float packet_size()

      Amount of data sent per packet in Mits.

      :Game Scenes: All

   .. function:: double packet_resource_cost()

      Units of electric charge consumed per packet sent.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: AntennaState

   The state of an antenna. See :func:`Antenna::state`.


   .. enumerator:: deployed

      Antenna is fully deployed.


   .. enumerator:: retracted

      Antenna is fully retracted.


   .. enumerator:: deploying

      Antenna is being deployed.


   .. enumerator:: retracting

      Antenna is being retracted.


   .. enumerator:: broken

      Antenna is broken.



Cargo Bay
^^^^^^^^^


.. class:: CargoBay

   A cargo bay. Obtained by calling :func:`Part::cargo_bay`.

   .. function:: Part part()

      The part object for this cargo bay.

      :Game Scenes: All

   .. function:: CargoBayState state()

      The state of the cargo bay.

      :Game Scenes: All

   .. function:: bool open()
   .. function:: void set_open(bool value)

      Whether the cargo bay is open.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: CargoBayState

   The state of a cargo bay. See :func:`CargoBay::state`.


   .. enumerator:: open

      Cargo bay is fully open.


   .. enumerator:: closed

      Cargo bay closed and locked.


   .. enumerator:: opening

      Cargo bay is opening.


   .. enumerator:: closing

      Cargo bay is closing.



Control Surface
^^^^^^^^^^^^^^^


.. class:: ControlSurface

   An aerodynamic control surface. Obtained by calling :func:`Part::control_surface`.

   .. function:: Part part()

      The part object for this control surface.

      :Game Scenes: All

   .. function:: bool pitch_enabled()
   .. function:: void set_pitch_enabled(bool value)

      Whether the control surface has pitch control enabled.

      :Game Scenes: All

   .. function:: bool yaw_enabled()
   .. function:: void set_yaw_enabled(bool value)

      Whether the control surface has yaw control enabled.

      :Game Scenes: All

   .. function:: bool roll_enabled()
   .. function:: void set_roll_enabled(bool value)

      Whether the control surface has roll control enabled.

      :Game Scenes: All

   .. function:: float authority_limiter()
   .. function:: void set_authority_limiter(float value)

      The authority limiter for the control surface, which controls how far the
      control surface will move.

      :Game Scenes: All

   .. function:: bool inverted()
   .. function:: void set_inverted(bool value)

      Whether the control surface movement is inverted.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      Whether the control surface has been fully deployed.

      :Game Scenes: All

   .. function:: float surface_area()

      Surface area of the control surface in :math:`m^2`.

      :Game Scenes: All

   .. function:: std::tuple<std::tuple<double, double, double>, std::tuple<double, double, double>> available_torque()

      The available torque, in Newton meters, that can be produced by this control surface,
      in the positive and negative pitch, roll and yaw axes of the vessel. These axes
      correspond to the coordinate axes of the :func:`Vessel::reference_frame`.

      :Game Scenes: All



Decoupler
^^^^^^^^^


.. class:: Decoupler

   A decoupler. Obtained by calling :func:`Part::decoupler`

   .. function:: Part part()

      The part object for this decoupler.

      :Game Scenes: All

   .. function:: Vessel decouple()

      Fires the decoupler. Returns the new vessel created when the decoupler fires.
      Throws an exception if the decoupler has already fired.


      :Game Scenes: All


      .. note::

         When called, the active vessel may change. It is therefore possible that,
         after calling this function, the object(s) returned by previous call(s) to
         :func:`active_vessel` no longer refer to the active vessel.

   .. function:: bool decoupled()

      Whether the decoupler has fired.

      :Game Scenes: All

   .. function:: bool staged()

      Whether the decoupler is enabled in the staging sequence.

      :Game Scenes: All

   .. function:: float impulse()

      The impulse that the decoupler imparts when it is fired, in Newton seconds.

      :Game Scenes: All



Docking Port
^^^^^^^^^^^^


.. class:: DockingPort

   A docking port. Obtained by calling :func:`Part::docking_port`

   .. function:: Part part()

      The part object for this docking port.

      :Game Scenes: All

   .. function:: DockingPortState state()

      The current state of the docking port.

      :Game Scenes: All

   .. function:: Part docked_part()

      The part that this docking port is docked to. Returns ``NULL`` if this
      docking port is not docked to anything.

      :Game Scenes: All

   .. function:: Vessel undock()

      Undocks the docking port and returns the new :class:`Vessel` that is created.
      This method can be called for either docking port in a docked pair.
      Throws an exception if the docking port is not docked to anything.


      :Game Scenes: All


      .. note::

         When called, the active vessel may change. It is therefore possible that,
         after calling this function, the object(s) returned by previous call(s) to
         :func:`active_vessel` no longer refer to the active vessel.

   .. function:: float reengage_distance()

      The distance a docking port must move away when it undocks before it
      becomes ready to dock with another port, in meters.

      :Game Scenes: All

   .. function:: bool has_shield()

      Whether the docking port has a shield.

      :Game Scenes: All

   .. function:: bool shielded()
   .. function:: void set_shielded(bool value)

      The state of the docking ports shield, if it has one.

      Returns ``true`` if the docking port has a shield, and the shield is
      closed. Otherwise returns ``false``. When set to ``true``, the shield is
      closed, and when set to ``false`` the shield is opened. If the docking
      port does not have a shield, setting this attribute has no effect.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> position(ReferenceFrame reference_frame)

      The position of the docking port, in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> direction(ReferenceFrame reference_frame)

      The direction that docking port points in, in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned direction is in.

      :returns: The direction as a unit vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double, double> rotation(ReferenceFrame reference_frame)

      The rotation of the docking port, in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned rotation is in.

      :returns: The rotation as a quaternion of the form :math:`(x, y, z, w)`.
      :Game Scenes: All

   .. function:: ReferenceFrame reference_frame()

      The reference frame that is fixed relative to this docking port, and
      oriented with the port.

      * The origin is at the position of the docking port.
      * The axes rotate with the docking port.
      * The x-axis points out to the right side of the docking port.
      * The y-axis points in the direction the docking port is facing.
      * The z-axis points out of the bottom off the docking port.

      :Game Scenes: All


      .. note::

         This reference frame is not necessarily equivalent to the reference frame
         for the part, returned by :func:`Part::reference_frame`.

      .. figure:: /images/reference-frames/docking-port.png
         :align: center

         Docking port reference frame origin and axes

      .. figure:: /images/reference-frames/docking-port-inline.png
         :align: center

         Inline docking port reference frame origin and axes



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: DockingPortState

   The state of a docking port. See :func:`DockingPort::state`.


   .. enumerator:: ready

      The docking port is ready to dock to another docking port.


   .. enumerator:: docked

      The docking port is docked to another docking port, or docked to
      another part (from the VAB/SPH).


   .. enumerator:: docking

      The docking port is very close to another docking port,
      but has not docked. It is using magnetic force to acquire a solid dock.


   .. enumerator:: undocking

      The docking port has just been undocked from another docking port,
      and is disabled until it moves away by a sufficient distance
      (:func:`DockingPort::reengage_distance`).


   .. enumerator:: shielded

      The docking port has a shield, and the shield is closed.


   .. enumerator:: moving

      The docking ports shield is currently opening/closing.



Engine
^^^^^^


.. class:: Engine

   An engine, including ones of various types.
   For example liquid fuelled gimballed engines, solid rocket boosters and jet engines.
   Obtained by calling :func:`Part::engine`.

   .. note::

      For RCS thrusters :func:`Part::rcs`.

   .. function:: Part part()

      The part object for this engine.

      :Game Scenes: All

   .. function:: bool active()
   .. function:: void set_active(bool value)

      Whether the engine is active. Setting this attribute may have no effect,
      depending on :func:`Engine::can_shutdown` and :func:`Engine::can_restart`.

      :Game Scenes: All

   .. function:: float thrust()

      The current amount of thrust being produced by the engine, in Newtons.

      :Game Scenes: All

   .. function:: float available_thrust()

      The amount of thrust, in Newtons, that would be produced by the engine
      when activated and with its throttle set to 100%.
      Returns zero if the engine does not have any fuel.
      Takes the engine's current :func:`Engine::thrust_limit` and atmospheric conditions
      into account.

      :Game Scenes: All

   .. function:: float max_thrust()

      The amount of thrust, in Newtons, that would be produced by the engine
      when activated and fueled, with its throttle and throttle limiter set to 100%.

      :Game Scenes: All

   .. function:: float max_vacuum_thrust()

      The maximum amount of thrust that can be produced by the engine in a
      vacuum, in Newtons. This is the amount of thrust produced by the engine
      when activated, :func:`Engine::thrust_limit` is set to 100%, the main
      vessel's throttle is set to 100% and the engine is in a vacuum.

      :Game Scenes: All

   .. function:: float thrust_limit()
   .. function:: void set_thrust_limit(float value)

      The thrust limiter of the engine. A value between 0 and 1. Setting this
      attribute may have no effect, for example the thrust limit for a solid
      rocket booster cannot be changed in flight.

      :Game Scenes: All

   .. function:: std::vector<Thruster> thrusters()

      The components of the engine that generate thrust.

      :Game Scenes: All


      .. note::

         For example, this corresponds to the rocket nozzel on a solid rocket booster,
         or the individual nozzels on a RAPIER engine.
         The overall thrust produced by the engine, as reported by :func:`Engine::available_thrust`,
         :func:`Engine::max_thrust` and others, is the sum of the thrust generated by each thruster.

   .. function:: float specific_impulse()

      The current specific impulse of the engine, in seconds. Returns zero
      if the engine is not active.

      :Game Scenes: All

   .. function:: float vacuum_specific_impulse()

      The vacuum specific impulse of the engine, in seconds.

      :Game Scenes: All

   .. function:: float kerbin_sea_level_specific_impulse()

      The specific impulse of the engine at sea level on Kerbin, in seconds.

      :Game Scenes: All

   .. function:: std::vector<std::string> propellant_names()

      The names of the propellants that the engine consumes.

      :Game Scenes: All

   .. function:: std::map<std::string, float> propellant_ratios()

      The ratio of resources that the engine consumes. A dictionary mapping resource names
      to the ratio at which they are consumed by the engine.

      :Game Scenes: All


      .. note::

         For example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every
         0.6 units of LiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.

   .. function:: std::vector<Propellant> propellants()

      The propellants that the engine consumes.

      :Game Scenes: All

   .. function:: bool has_fuel()

      Whether the engine has any fuel available.

      :Game Scenes: All


      .. note::

         The engine must be activated for this property to update correctly.

   .. function:: float throttle()

      The current throttle setting for the engine. A value between 0 and 1.
      This is not necessarily the same as the vessel's main throttle
      setting, as some engines take time to adjust their throttle
      (such as jet engines).

      :Game Scenes: All

   .. function:: bool throttle_locked()

      Whether the :func:`Control::throttle` affects the engine. For example,
      this is ``true`` for liquid fueled rockets, and ``false`` for solid rocket
      boosters.

      :Game Scenes: All

   .. function:: bool can_restart()

      Whether the engine can be restarted once shutdown. If the engine cannot be shutdown,
      returns ``false``. For example, this is ``true`` for liquid fueled rockets
      and ``false`` for solid rocket boosters.

      :Game Scenes: All

   .. function:: bool can_shutdown()

      Whether the engine can be shutdown once activated. For example, this is
      ``true`` for liquid fueled rockets and ``false`` for solid rocket boosters.

      :Game Scenes: All

   .. function:: bool has_modes()

      Whether the engine has multiple modes of operation.

      :Game Scenes: All

   .. function:: std::string mode()
   .. function:: void set_mode(std::string value)

      The name of the current engine mode.

      :Game Scenes: All

   .. function:: std::map<std::string, Engine> modes()

      The available modes for the engine.
      A dictionary mapping mode names to :class:`Engine` objects.

      :Game Scenes: All

   .. function:: void toggle_mode()

      Toggle the current engine mode.


      :Game Scenes: All

   .. function:: bool auto_mode_switch()
   .. function:: void set_auto_mode_switch(bool value)

      Whether the engine will automatically switch modes.

      :Game Scenes: All

   .. function:: bool gimballed()

      Whether the engine is gimballed.

      :Game Scenes: All

   .. function:: float gimbal_range()

      The range over which the gimbal can move, in degrees.
      Returns 0 if the engine is not gimballed.

      :Game Scenes: All

   .. function:: bool gimbal_locked()
   .. function:: void set_gimbal_locked(bool value)

      Whether the engines gimbal is locked in place. Setting this attribute has
      no effect if the engine is not gimballed.

      :Game Scenes: All

   .. function:: float gimbal_limit()
   .. function:: void set_gimbal_limit(float value)

      The gimbal limiter of the engine. A value between 0 and 1.
      Returns 0 if the gimbal is locked.

      :Game Scenes: All

   .. function:: std::tuple<std::tuple<double, double, double>, std::tuple<double, double, double>> available_torque()

      The available torque, in Newton meters, that can be produced by this engine,
      in the positive and negative pitch, roll and yaw axes of the vessel. These axes
      correspond to the coordinate axes of the :func:`Vessel::reference_frame`.
      Returns zero if the engine is inactive, or not gimballed.

      :Game Scenes: All



.. class:: Propellant

   A propellant for an engine. Obtains by calling :func:`Engine::propellants`.

   .. function:: std::string name()

      The name of the propellant.

      :Game Scenes: All

   .. function:: double current_amount()

      The current amount of propellant.

      :Game Scenes: All

   .. function:: double current_requirement()

      The required amount of propellant.

      :Game Scenes: All

   .. function:: double total_resource_available()

      The total amount of the underlying resource currently reachable given
      resource flow rules.

      :Game Scenes: All

   .. function:: double total_resource_capacity()

      The total vehicle capacity for the underlying propellant resource,
      restricted by resource flow rules.

      :Game Scenes: All

   .. function:: bool ignore_for_isp()

      If this propellant should be ignored when calculating required mass flow
      given specific impulse.

      :Game Scenes: All

   .. function:: bool ignore_for_thrust_curve()

      If this propellant should be ignored for thrust curve calculations.

      :Game Scenes: All

   .. function:: bool draw_stack_gauge()

      If this propellant has a stack gauge or not.

      :Game Scenes: All

   .. function:: bool is_deprived()

      If this propellant is deprived.

      :Game Scenes: All

   .. function:: float ratio()

      The propellant ratio.

      :Game Scenes: All



Experiment
^^^^^^^^^^


.. class:: Experiment

   Obtained by calling :func:`Part::experiment`.

   .. function:: Part part()

      The part object for this experiment.

      :Game Scenes: All

   .. function:: void run()

      Run the experiment.


      :Game Scenes: All

   .. function:: void transmit()

      Transmit all experimental data contained by this part.


      :Game Scenes: All

   .. function:: void dump()

      Dump the experimental data contained by the experiment.


      :Game Scenes: All

   .. function:: void reset()

      Reset the experiment.


      :Game Scenes: All

   .. function:: bool deployed()

      Whether the experiment has been deployed.

      :Game Scenes: All

   .. function:: bool rerunnable()

      Whether the experiment can be re-run.

      :Game Scenes: All

   .. function:: bool inoperable()

      Whether the experiment is inoperable.

      :Game Scenes: All

   .. function:: bool has_data()

      Whether the experiment contains data.

      :Game Scenes: All

   .. function:: std::vector<ScienceData> data()

      The data contained in this experiment.

      :Game Scenes: All

   .. function:: std::string biome()

      The name of the biome the experiment is currently in.

      :Game Scenes: All

   .. function:: bool available()

      Determines if the experiment is available given the current conditions.

      :Game Scenes: All

   .. function:: ScienceSubject science_subject()

      Containing information on the corresponding specific science result for the current
      conditions. Returns ``NULL`` if the experiment is unavailable.

      :Game Scenes: All



.. class:: ScienceData

   Obtained by calling :func:`Experiment::data`.

   .. function:: float data_amount()

      Data amount.

      :Game Scenes: All

   .. function:: float science_value()

      Science value.

      :Game Scenes: All

   .. function:: float transmit_value()

      Transmit value.

      :Game Scenes: All



.. class:: ScienceSubject

   Obtained by calling :func:`Experiment::science_subject`.

   .. function:: std::string title()

      Title of science subject, displayed in science archives

      :Game Scenes: All

   .. function:: bool is_complete()

      Whether the experiment has been completed.

      :Game Scenes: All

   .. function:: float science()

      Amount of science already earned from this subject, not updated until after
      transmission/recovery.

      :Game Scenes: All

   .. function:: float science_cap()

      Total science allowable for this subject.

      :Game Scenes: All

   .. function:: float data_scale()

      Multiply science value by this to determine data amount in mits.

      :Game Scenes: All

   .. function:: float subject_value()

      Multiplier for specific Celestial Body/Experiment Situation combination.

      :Game Scenes: All

   .. function:: float scientific_value()

      Diminishing value multiplier for decreasing the science value returned from repeated
      experiments.

      :Game Scenes: All



Fairing
^^^^^^^


.. class:: Fairing

   A fairing. Obtained by calling :func:`Part::fairing`.

   .. function:: Part part()

      The part object for this fairing.

      :Game Scenes: All

   .. function:: void jettison()

      Jettison the fairing. Has no effect if it has already been jettisoned.


      :Game Scenes: All

   .. function:: bool jettisoned()

      Whether the fairing has been jettisoned.

      :Game Scenes: All



Intake
^^^^^^


.. class:: Intake

   An air intake. Obtained by calling :func:`Part::intake`.

   .. function:: Part part()

      The part object for this intake.

      :Game Scenes: All

   .. function:: bool open()
   .. function:: void set_open(bool value)

      Whether the intake is open.

      :Game Scenes: All

   .. function:: float speed()

      Speed of the flow into the intake, in :math:`m/s`.

      :Game Scenes: All

   .. function:: float flow()

      The rate of flow into the intake, in units of resource per second.

      :Game Scenes: All

   .. function:: float area()

      The area of the intake's opening, in square meters.

      :Game Scenes: All



Leg
^^^


.. class:: Leg

   A landing leg. Obtained by calling :func:`Part::leg`.

   .. function:: Part part()

      The part object for this landing leg.

      :Game Scenes: All

   .. function:: LegState state()

      The current state of the landing leg.

      :Game Scenes: All

   .. function:: bool deployable()

      Whether the leg is deployable.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      Whether the landing leg is deployed.

      :Game Scenes: All


      .. note::

         Fixed landing legs are always deployed.
         Returns an error if you try to deploy fixed landing gear.

   .. function:: bool is_grounded()

      Returns whether the leg is touching the ground.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: LegState

   The state of a landing leg. See :func:`Leg::state`.


   .. enumerator:: deployed

      Landing leg is fully deployed.


   .. enumerator:: retracted

      Landing leg is fully retracted.


   .. enumerator:: deploying

      Landing leg is being deployed.


   .. enumerator:: retracting

      Landing leg is being retracted.


   .. enumerator:: broken

      Landing leg is broken.



Launch Clamp
^^^^^^^^^^^^


.. class:: LaunchClamp

   A launch clamp. Obtained by calling :func:`Part::launch_clamp`.

   .. function:: Part part()

      The part object for this launch clamp.

      :Game Scenes: All

   .. function:: void release()

      Releases the docking clamp. Has no effect if the clamp has already been released.


      :Game Scenes: All



Light
^^^^^


.. class:: Light

   A light. Obtained by calling :func:`Part::light`.

   .. function:: Part part()

      The part object for this light.

      :Game Scenes: All

   .. function:: bool active()
   .. function:: void set_active(bool value)

      Whether the light is switched on.

      :Game Scenes: All

   .. function:: std::tuple<float, float, float> color()
   .. function:: void set_color(std::tuple<float, float, float> value)

      The color of the light, as an RGB triple.

      :Game Scenes: All

   .. function:: float power_usage()

      The current power usage, in units of charge per second.

      :Game Scenes: All



Parachute
^^^^^^^^^


.. class:: Parachute

   A parachute. Obtained by calling :func:`Part::parachute`.

   .. function:: Part part()

      The part object for this parachute.

      :Game Scenes: All

   .. function:: void deploy()

      Deploys the parachute. This has no effect if the parachute has already
      been deployed.


      :Game Scenes: All

   .. function:: bool deployed()

      Whether the parachute has been deployed.

      :Game Scenes: All

   .. function:: void arm()

      Deploys the parachute. This has no effect if the parachute has already
      been armed or deployed. Only applicable to RealChutes parachutes.


      :Game Scenes: All

   .. function:: bool armed()

      Whether the parachute has been armed or deployed. Only applicable to
      RealChutes parachutes.

      :Game Scenes: All

   .. function:: ParachuteState state()

      The current state of the parachute.

      :Game Scenes: All

   .. function:: float deploy_altitude()
   .. function:: void set_deploy_altitude(float value)

      The altitude at which the parachute will full deploy, in meters.
      Only applicable to stock parachutes.

      :Game Scenes: All

   .. function:: float deploy_min_pressure()
   .. function:: void set_deploy_min_pressure(float value)

      The minimum pressure at which the parachute will semi-deploy, in atmospheres.
      Only applicable to stock parachutes.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: ParachuteState

   The state of a parachute. See :func:`Parachute::state`.


   .. enumerator:: stowed

      The parachute is safely tucked away inside its housing.


   .. enumerator:: armed

      The parachute is armed for deployment. (RealChutes only)


   .. enumerator:: active

      The parachute is still stowed, but ready to semi-deploy.
      (Stock parachutes only)


   .. enumerator:: semi_deployed

      The parachute has been deployed and is providing some drag,
      but is not fully deployed yet. (Stock parachutes only)


   .. enumerator:: deployed

      The parachute is fully deployed.


   .. enumerator:: cut

      The parachute has been cut.



Radiator
^^^^^^^^


.. class:: Radiator

   A radiator. Obtained by calling :func:`Part::radiator`.

   .. function:: Part part()

      The part object for this radiator.

      :Game Scenes: All

   .. function:: bool deployable()

      Whether the radiator is deployable.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      For a deployable radiator, ``true`` if the radiator is extended.
      If the radiator is not deployable, this is always ``true``.

      :Game Scenes: All

   .. function:: RadiatorState state()

      The current state of the radiator.

      :Game Scenes: All


      .. note::

         A fixed radiator is always :enumerator:`RadiatorState::extended`.



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: RadiatorState

   The state of a radiator. :enum:`RadiatorState`


   .. enumerator:: extended

      Radiator is fully extended.


   .. enumerator:: retracted

      Radiator is fully retracted.


   .. enumerator:: extending

      Radiator is being extended.


   .. enumerator:: retracting

      Radiator is being retracted.


   .. enumerator:: broken

      Radiator is being broken.



Resource Converter
^^^^^^^^^^^^^^^^^^


.. class:: ResourceConverter

   A resource converter. Obtained by calling :func:`Part::resource_converter`.

   .. function:: Part part()

      The part object for this converter.

      :Game Scenes: All

   .. function:: int32_t count()

      The number of converters in the part.

      :Game Scenes: All

   .. function:: std::string name(int32_t index)

      The name of the specified converter.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: bool active(int32_t index)

      True if the specified converter is active.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: void start(int32_t index)

      Start the specified converter.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: void stop(int32_t index)

      Stop the specified converter.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: ResourceConverterState state(int32_t index)

      The state of the specified converter.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: std::string status_info(int32_t index)

      Status information for the specified converter.
      This is the full status message shown in the in-game UI.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: std::vector<std::string> inputs(int32_t index)

      List of the names of resources consumed by the specified converter.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: std::vector<std::string> outputs(int32_t index)

      List of the names of resources produced by the specified converter.

      :Parameters:

       * **index** -- Index of the converter.

      :Game Scenes: All

   .. function:: float optimum_core_temperature()

      The core temperature at which the converter will operate with peak efficiency, in Kelvin.

      :Game Scenes: All

   .. function:: float core_temperature()

      The core temperature of the converter, in Kelvin.

      :Game Scenes: All

   .. function:: float thermal_efficiency()

      The thermal efficiency of the converter, as a percentage of its maximum.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: ResourceConverterState

   The state of a resource converter. See :func:`ResourceConverter::state`.


   .. enumerator:: running

      Converter is running.


   .. enumerator:: idle

      Converter is idle.


   .. enumerator:: missing_resource

      Converter is missing a required resource.


   .. enumerator:: storage_full

      No available storage for output resource.


   .. enumerator:: capacity

      At preset resource capacity.


   .. enumerator:: unknown

      Unknown state. Possible with modified resource converters.
      In this case, check :func:`ResourceConverter::status_info` for more information.



Resource Harvester
^^^^^^^^^^^^^^^^^^


.. class:: ResourceHarvester

   A resource harvester (drill). Obtained by calling :func:`Part::resource_harvester`.

   .. function:: Part part()

      The part object for this harvester.

      :Game Scenes: All

   .. function:: ResourceHarvesterState state()

      The state of the harvester.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      Whether the harvester is deployed.

      :Game Scenes: All

   .. function:: bool active()
   .. function:: void set_active(bool value)

      Whether the harvester is actively drilling.

      :Game Scenes: All

   .. function:: float extraction_rate()

      The rate at which the drill is extracting ore, in units per second.

      :Game Scenes: All

   .. function:: float thermal_efficiency()

      The thermal efficiency of the drill, as a percentage of its maximum.

      :Game Scenes: All

   .. function:: float core_temperature()

      The core temperature of the drill, in Kelvin.

      :Game Scenes: All

   .. function:: float optimum_core_temperature()

      The core temperature at which the drill will operate with peak efficiency, in Kelvin.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: ResourceHarvesterState

   The state of a resource harvester. See :func:`ResourceHarvester::state`.


   .. enumerator:: deploying

      The drill is deploying.


   .. enumerator:: deployed

      The drill is deployed and ready.


   .. enumerator:: retracting

      The drill is retracting.


   .. enumerator:: retracted

      The drill is retracted.


   .. enumerator:: active

      The drill is running.



Reaction Wheel
^^^^^^^^^^^^^^


.. class:: ReactionWheel

   A reaction wheel. Obtained by calling :func:`Part::reaction_wheel`.

   .. function:: Part part()

      The part object for this reaction wheel.

      :Game Scenes: All

   .. function:: bool active()
   .. function:: void set_active(bool value)

      Whether the reaction wheel is active.

      :Game Scenes: All

   .. function:: bool broken()

      Whether the reaction wheel is broken.

      :Game Scenes: All

   .. function:: std::tuple<std::tuple<double, double, double>, std::tuple<double, double, double>> available_torque()

      The available torque, in Newton meters, that can be produced by this reaction wheel,
      in the positive and negative pitch, roll and yaw axes of the vessel. These axes
      correspond to the coordinate axes of the :func:`Vessel::reference_frame`.
      Returns zero if the reaction wheel is inactive or broken.

      :Game Scenes: All

   .. function:: std::tuple<std::tuple<double, double, double>, std::tuple<double, double, double>> max_torque()

      The maximum torque, in Newton meters, that can be produced by this reaction wheel,
      when it is active, in the positive and negative pitch, roll and yaw axes of the vessel.
      These axes correspond to the coordinate axes of the :func:`Vessel::reference_frame`.

      :Game Scenes: All



RCS
^^^


.. class:: RCS

   An RCS block or thruster. Obtained by calling :func:`Part::rcs`.

   .. function:: Part part()

      The part object for this RCS.

      :Game Scenes: All

   .. function:: bool active()

      Whether the RCS thrusters are active.
      An RCS thruster is inactive if the RCS action group is disabled
      (:func:`Control::rcs`), the RCS thruster itself is not enabled
      (:func:`RCS::enabled`) or it is covered by a fairing (:func:`Part::shielded`).

      :Game Scenes: All

   .. function:: bool enabled()
   .. function:: void set_enabled(bool value)

      Whether the RCS thrusters are enabled.

      :Game Scenes: All

   .. function:: bool pitch_enabled()
   .. function:: void set_pitch_enabled(bool value)

      Whether the RCS thruster will fire when pitch control input is given.

      :Game Scenes: All

   .. function:: bool yaw_enabled()
   .. function:: void set_yaw_enabled(bool value)

      Whether the RCS thruster will fire when yaw control input is given.

      :Game Scenes: All

   .. function:: bool roll_enabled()
   .. function:: void set_roll_enabled(bool value)

      Whether the RCS thruster will fire when roll control input is given.

      :Game Scenes: All

   .. function:: bool forward_enabled()
   .. function:: void set_forward_enabled(bool value)

      Whether the RCS thruster will fire when pitch control input is given.

      :Game Scenes: All

   .. function:: bool up_enabled()
   .. function:: void set_up_enabled(bool value)

      Whether the RCS thruster will fire when yaw control input is given.

      :Game Scenes: All

   .. function:: bool right_enabled()
   .. function:: void set_right_enabled(bool value)

      Whether the RCS thruster will fire when roll control input is given.

      :Game Scenes: All

   .. function:: std::tuple<std::tuple<double, double, double>, std::tuple<double, double, double>> available_torque()

      The available torque, in Newton meters, that can be produced by this RCS,
      in the positive and negative pitch, roll and yaw axes of the vessel. These axes
      correspond to the coordinate axes of the :func:`Vessel::reference_frame`.
      Returns zero if RCS is disable.

      :Game Scenes: All

   .. function:: float max_thrust()

      The maximum amount of thrust that can be produced by the RCS thrusters when active,
      in Newtons.

      :Game Scenes: All

   .. function:: float max_vacuum_thrust()

      The maximum amount of thrust that can be produced by the RCS thrusters when active
      in a vacuum, in Newtons.

      :Game Scenes: All

   .. function:: std::vector<Thruster> thrusters()

      A list of thrusters, one of each nozzel in the RCS part.

      :Game Scenes: All

   .. function:: float specific_impulse()

      The current specific impulse of the RCS, in seconds. Returns zero
      if the RCS is not active.

      :Game Scenes: All

   .. function:: float vacuum_specific_impulse()

      The vacuum specific impulse of the RCS, in seconds.

      :Game Scenes: All

   .. function:: float kerbin_sea_level_specific_impulse()

      The specific impulse of the RCS at sea level on Kerbin, in seconds.

      :Game Scenes: All

   .. function:: std::vector<std::string> propellants()

      The names of resources that the RCS consumes.

      :Game Scenes: All

   .. function:: std::map<std::string, float> propellant_ratios()

      The ratios of resources that the RCS consumes. A dictionary mapping resource names
      to the ratios at which they are consumed by the RCS.

      :Game Scenes: All

   .. function:: bool has_fuel()

      Whether the RCS has fuel available.

      :Game Scenes: All


      .. note::

         The RCS thruster must be activated for this property to update correctly.



Sensor
^^^^^^


.. class:: Sensor

   A sensor, such as a thermometer. Obtained by calling :func:`Part::sensor`.

   .. function:: Part part()

      The part object for this sensor.

      :Game Scenes: All

   .. function:: bool active()
   .. function:: void set_active(bool value)

      Whether the sensor is active.

      :Game Scenes: All

   .. function:: std::string value()

      The current value of the sensor.

      :Game Scenes: All



Solar Panel
^^^^^^^^^^^


.. class:: SolarPanel

   A solar panel. Obtained by calling :func:`Part::solar_panel`.

   .. function:: Part part()

      The part object for this solar panel.

      :Game Scenes: All

   .. function:: bool deployable()

      Whether the solar panel is deployable.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      Whether the solar panel is extended.

      :Game Scenes: All

   .. function:: SolarPanelState state()

      The current state of the solar panel.

      :Game Scenes: All

   .. function:: float energy_flow()

      The current amount of energy being generated by the solar panel, in
      units of charge per second.

      :Game Scenes: All

   .. function:: float sun_exposure()

      The current amount of sunlight that is incident on the solar panel,
      as a percentage. A value between 0 and 1.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: SolarPanelState

   The state of a solar panel. See :func:`SolarPanel::state`.


   .. enumerator:: extended

      Solar panel is fully extended.


   .. enumerator:: retracted

      Solar panel is fully retracted.


   .. enumerator:: extending

      Solar panel is being extended.


   .. enumerator:: retracting

      Solar panel is being retracted.


   .. enumerator:: broken

      Solar panel is broken.



Thruster
^^^^^^^^


.. class:: Thruster

   The component of an :class:`Engine` or :class:`RCS` part that generates thrust.
   Can obtained by calling :func:`Engine::thrusters` or :func:`RCS::thrusters`.

   .. note::

      Engines can consist of multiple thrusters.
      For example, the S3 KS-25x4 "Mammoth" has four rocket nozzels, and so consists of
      four thrusters.

   .. function:: Part part()

      The :class:`Part` that contains this thruster.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> thrust_position(ReferenceFrame reference_frame)

      The position at which the thruster generates thrust, in the given reference frame.
      For gimballed engines, this takes into account the current rotation of the gimbal.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> thrust_direction(ReferenceFrame reference_frame)

      The direction of the force generated by the thruster, in the given reference frame.
      This is opposite to the direction in which the thruster expels propellant.
      For gimballed engines, this takes into account the current rotation of the gimbal.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned direction is in.

      :returns: The direction as a unit vector.
      :Game Scenes: All

   .. function:: ReferenceFrame thrust_reference_frame()

      A reference frame that is fixed relative to the thruster and orientated with
      its thrust direction (:func:`Thruster::thrust_direction`).
      For gimballed engines, this takes into account the current rotation of the gimbal.

      * The origin is at the position of thrust for this thruster
        (:func:`Thruster::thrust_position`).
      * The axes rotate with the thrust direction.
        This is the direction in which the thruster expels propellant, including any gimballing.
      * The y-axis points along the thrust direction.
      * The x-axis and z-axis are perpendicular to the thrust direction.

      :Game Scenes: All

   .. function:: bool gimballed()

      Whether the thruster is gimballed.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> gimbal_position(ReferenceFrame reference_frame)

      Position around which the gimbal pivots.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> gimbal_angle()

      The current gimbal angle in the pitch, roll and yaw axes, in degrees.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> initial_thrust_position(ReferenceFrame reference_frame)

      The position at which the thruster generates thrust, when the engine is in its
      initial position (no gimballing), in the given reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All


      .. note::

         This position can move when the gimbal rotates. This is because the thrust position and
         gimbal position are not necessarily the same.

   .. function:: std::tuple<double, double, double> initial_thrust_direction(ReferenceFrame reference_frame)

      The direction of the force generated by the thruster, when the engine is in its
      initial position (no gimballing), in the given reference frame.
      This is opposite to the direction in which the thruster expels propellant.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned direction is in.

      :returns: The direction as a unit vector.
      :Game Scenes: All



Wheel
^^^^^


.. class:: Wheel

   A wheel. Includes landing gear and rover wheels.
   Obtained by calling :func:`Part::wheel`.
   Can be used to control the motors, steering and deployment of wheels, among other things.

   .. function:: Part part()

      The part object for this wheel.

      :Game Scenes: All

   .. function:: WheelState state()

      The current state of the wheel.

      :Game Scenes: All

   .. function:: float radius()

      Radius of the wheel, in meters.

      :Game Scenes: All

   .. function:: bool grounded()

      Whether the wheel is touching the ground.

      :Game Scenes: All

   .. function:: bool has_brakes()

      Whether the wheel has brakes.

      :Game Scenes: All

   .. function:: float brakes()
   .. function:: void set_brakes(float value)

      The braking force, as a percentage of maximum, when the brakes are applied.

      :Game Scenes: All

   .. function:: bool auto_friction_control()
   .. function:: void set_auto_friction_control(bool value)

      Whether automatic friction control is enabled.

      :Game Scenes: All

   .. function:: float manual_friction_control()
   .. function:: void set_manual_friction_control(float value)

      Manual friction control value. Only has an effect if automatic friction control is disabled.
      A value between 0 and 5 inclusive.

      :Game Scenes: All

   .. function:: bool deployable()

      Whether the wheel is deployable.

      :Game Scenes: All

   .. function:: bool deployed()
   .. function:: void set_deployed(bool value)

      Whether the wheel is deployed.

      :Game Scenes: All

   .. function:: bool powered()

      Whether the wheel is powered by a motor.

      :Game Scenes: All

   .. function:: bool motor_enabled()
   .. function:: void set_motor_enabled(bool value)

      Whether the motor is enabled.

      :Game Scenes: All

   .. function:: bool motor_inverted()
   .. function:: void set_motor_inverted(bool value)

      Whether the direction of the motor is inverted.

      :Game Scenes: All

   .. function:: MotorState motor_state()

      Whether the direction of the motor is inverted.

      :Game Scenes: All

   .. function:: float motor_output()

      The output of the motor. This is the torque currently being generated, in Newton meters.

      :Game Scenes: All

   .. function:: bool traction_control_enabled()
   .. function:: void set_traction_control_enabled(bool value)

      Whether automatic traction control is enabled.
      A wheel only has traction control if it is powered.

      :Game Scenes: All

   .. function:: float traction_control()
   .. function:: void set_traction_control(float value)

      Setting for the traction control.
      Only takes effect if the wheel has automatic traction control enabled.
      A value between 0 and 5 inclusive.

      :Game Scenes: All

   .. function:: float drive_limiter()
   .. function:: void set_drive_limiter(float value)

      Manual setting for the motor limiter.
      Only takes effect if the wheel has automatic traction control disabled.
      A value between 0 and 100 inclusive.

      :Game Scenes: All

   .. function:: bool steerable()

      Whether the wheel has steering.

      :Game Scenes: All

   .. function:: bool steering_enabled()
   .. function:: void set_steering_enabled(bool value)

      Whether the wheel steering is enabled.

      :Game Scenes: All

   .. function:: bool steering_inverted()
   .. function:: void set_steering_inverted(bool value)

      Whether the wheel steering is inverted.

      :Game Scenes: All

   .. function:: bool has_suspension()

      Whether the wheel has suspension.

      :Game Scenes: All

   .. function:: float suspension_spring_strength()

      Suspension spring strength, as set in the editor.

      :Game Scenes: All

   .. function:: float suspension_damper_strength()

      Suspension damper strength, as set in the editor.

      :Game Scenes: All

   .. function:: bool broken()

      Whether the wheel is broken.

      :Game Scenes: All

   .. function:: bool repairable()

      Whether the wheel is repairable.

      :Game Scenes: All

   .. function:: float stress()

      Current stress on the wheel.

      :Game Scenes: All

   .. function:: float stress_tolerance()

      Stress tolerance of the wheel.

      :Game Scenes: All

   .. function:: float stress_percentage()

      Current stress on the wheel as a percentage of its stress tolerance.

      :Game Scenes: All

   .. function:: float deflection()

      Current deflection of the wheel.

      :Game Scenes: All

   .. function:: float slip()

      Current slip of the wheel.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: WheelState

   The state of a wheel. See :func:`Wheel::state`.


   .. enumerator:: deployed

      Wheel is fully deployed.


   .. enumerator:: retracted

      Wheel is fully retracted.


   .. enumerator:: deploying

      Wheel is being deployed.


   .. enumerator:: retracting

      Wheel is being retracted.


   .. enumerator:: broken

      Wheel is broken.



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: MotorState

   The state of the motor on a powered wheel. See :func:`Wheel::motor_state`.


   .. enumerator:: idle

      The motor is idle.


   .. enumerator:: running

      The motor is running.


   .. enumerator:: disabled

      The motor is disabled.


   .. enumerator:: inoperable

      The motor is inoperable.


   .. enumerator:: not_enough_resources

      The motor does not have enough resources to run.



.. _cpp-api-parts-trees-of-parts:

Trees of Parts
--------------

Vessels in KSP are comprised of a number of parts, connected to one another in a
*tree* structure. An example vessel is shown in Figure 1, and the corresponding
tree of parts in Figure 2. The craft file for this example can also be
:download:`downloaded here </crafts/PartsTree.craft>`.

.. figure:: /images/api/parts.png
   :align: left
   :figwidth: 275

   **Figure 1** -- Example parts making up a vessel.

.. figure:: /images/api/parts-tree.png
   :align: right
   :figwidth: 275

   **Figure 2** -- Tree of parts for the vessel in Figure 1. Arrows point from
   the parent part to the child part.

.. container:: clearer

   ..

Traversing the Tree
^^^^^^^^^^^^^^^^^^^

The tree of parts can be traversed using the attributes :func:`Parts::root`,
:func:`Part::parent` and :func:`Part::children`.

The root of the tree is the same as the vessels *root part* (part number 1 in
the example above) and can be obtained by calling :func:`Parts::root`.
A parts children can be obtained by calling :func:`Part::children`.
If the part does not have any children, :func:`Part::children`
returns an empty list. A parts parent can be obtained by calling
:func:`Part::parent`. If the part does not have a parent
(as is the case for the root part), :func:`Part::parent`
returns ``NULL``.

The following C++ example uses these attributes to perform a
depth-first traversal over all of the parts in a vessel:

.. literalinclude:: /scripts/services/space-center/TreeTraversal.cpp

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

    Command Pod Mk1
     TR-18A Stack Decoupler
      FL-T400 Fuel Tank
       LV-909 Liquid Fuel Engine
        TR-18A Stack Decoupler
         FL-T800 Fuel Tank
          LV-909 Liquid Fuel Engine
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
       LT-1 Landing Struts
       LT-1 Landing Struts
     Mk16 Parachute

.. _cpp-api-parts-attachment-modes:

Attachment Modes
^^^^^^^^^^^^^^^^

Parts can be attached to other parts either *radially* (on the side of the
parent part) or *axially* (on the end of the parent part, to form a stack).

For example, in the vessel pictured above, the parachute (part 2) is *axially*
connected to its parent (the command pod -- part 1), and the landing leg
(part 5) is *radially* connected to its parent (the fuel tank -- part 4).

The root part of a vessel (for example the command pod -- part 1) does not have
a parent part, so does not have an attachment mode. However, the part is
consider to be *axially* attached to nothing.

The following C++ example does a depth-first traversal as before,
but also prints out the attachment mode used by the part:

.. literalinclude:: /scripts/services/space-center/AttachmentModes.cpp

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

 Command Pod Mk1 - axial
  TR-18A Stack Decoupler - axial
   FL-T400 Fuel Tank - axial
    LV-909 Liquid Fuel Engine - axial
     TR-18A Stack Decoupler - axial
      FL-T800 Fuel Tank - axial
       LV-909 Liquid Fuel Engine - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
    LT-1 Landing Struts - radial
    LT-1 Landing Struts - radial
  Mk16 Parachute - axial

.. _cpp-api-parts-fuel-lines:

Fuel Lines
----------

.. figure:: /images/api/parts-fuel-lines.png
   :align: right
   :figwidth: 200

   **Figure 5** -- Fuel lines from the example in Figure 1. Fuel flows from the
   parts highlighted in green, into the part highlighted in blue.

.. figure:: /images/api/parts-fuel-lines-tree.png
   :align: right
   :figwidth: 200

   **Figure 4** -- A subset of the parts tree from Figure 2 above.

Fuel lines are considered parts, and are included in the parts tree (for
example, as pictured in Figure 4). However, the parts tree does not contain
information about which parts fuel lines connect to. The parent part of a fuel
line is the part from which it will take fuel (as shown in Figure 4) however the
part that it will send fuel to is not represented in the parts tree.

Figure 5 shows the fuel lines from the example vessel pictured earlier. Fuel
line part 15 (in red) takes fuel from a fuel tank (part 11 -- in green) and
feeds it into another fuel tank (part 9 -- in blue). The fuel line is therefore
a child of part 11, but its connection to part 9 is not represented in the tree.

The attributes :func:`Part::fuel_lines_from` and
:func:`Part::fuel_lines_to` can be used to discover these
connections. In the example in Figure 5, when
:func:`Part::fuel_lines_to` is called on fuel tank part
11, it will return a list of parts containing just fuel tank part 9 (the blue
part). When :func:`Part::fuel_lines_from` is called on
fuel tank part 9, it will return a list containing fuel tank parts 11 and 17
(the parts colored green).

.. _cpp-api-parts-staging:

Staging
-------

.. figure:: /images/api/parts-staging.png
   :align: right
   :figwidth: 340

   **Figure 6** -- Example vessel from Figure 1 with a staging sequence.

Each part has two staging numbers associated with it: the stage in which the
part is *activated* and the stage in which the part is *decoupled*. These values
can be obtained using :func:`Part::stage` and
:func:`Part::decouple_stage` respectively. For parts that
are not activated by staging, :func:`Part::stage` returns
-1. For parts that are never decoupled,
:func:`Part::decouple_stage` returns a value of -1.

Figure 6 shows an example staging sequence for a vessel. Figure 7 shows the
stages in which each part of the vessel will be *activated*. Figure 8 shows the
stages in which each part of the vessel will be *decoupled*.

.. container:: clearer

   ..

.. figure:: /images/api/parts-staging-activate.png
   :align: left
   :figwidth: 250

   **Figure 7** -- The stage in which each part is *activated*.

.. figure:: /images/api/parts-staging-decouple.png
   :align: right
   :figwidth: 250

   **Figure 8** -- The stage in which each part is *decoupled*.

.. container:: clearer

   ..
