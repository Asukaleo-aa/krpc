.. default-domain:: cpp
.. highlight:: cpp
.. namespace:: krpc::services::SpaceCenter

CelestialBody
=============


.. class:: CelestialBody

   Represents a celestial body (such as a planet or moon).
   See :func:`bodies`.

   .. function:: std::string name()

      The name of the body.

      :Game Scenes: All

   .. function:: std::vector<CelestialBody> satellites()

      A list of celestial bodies that are in orbit around this celestial body.

      :Game Scenes: All

   .. function:: Orbit orbit()

      The orbit of the body.

      :Game Scenes: All

   .. function:: float mass()

      The mass of the body, in kilograms.

      :Game Scenes: All

   .. function:: float gravitational_parameter()

      The `standard gravitational parameter <https://en.wikipedia.org/wiki/Standard_gravitational_parameter>`_ of the body in :math:`m^3s^{-2}`.

      :Game Scenes: All

   .. function:: float surface_gravity()

      The acceleration due to gravity at sea level (mean altitude) on the body,
      in :math:`m/s^2`.

      :Game Scenes: All

   .. function:: float rotational_period()

      The sidereal rotational period of the body, in seconds.

      :Game Scenes: All

   .. function:: float rotational_speed()

      The rotational speed of the body, in radians per second.

      :Game Scenes: All

   .. function:: double rotation_angle()

      The current rotation angle of the body, in radians.
      A value between 0 and :math:`2\pi`

      :Game Scenes: All

   .. function:: double initial_rotation()

      The initial rotation angle of the body (at UT 0), in radians.
      A value between 0 and :math:`2\pi`

      :Game Scenes: All

   .. function:: float equatorial_radius()

      The equatorial radius of the body, in meters.

      :Game Scenes: All

   .. function:: double surface_height(double latitude, double longitude)

      The height of the surface relative to mean sea level, in meters,
      at the given position. When over water this is equal to 0.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.

      :Game Scenes: All

   .. function:: double bedrock_height(double latitude, double longitude)

      The height of the surface relative to mean sea level, in meters,
      at the given position. When over water, this is the height
      of the sea-bed and is therefore  negative value.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> msl_position(double latitude, double longitude, ReferenceFrame reference_frame)

      The position at mean sea level at the given latitude and longitude,
      in the given reference frame.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **reference_frame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> surface_position(double latitude, double longitude, ReferenceFrame reference_frame)

      The position of the surface at the given latitude and longitude, in the given
      reference frame. When over water, this is the position of the surface of the water.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **reference_frame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> bedrock_position(double latitude, double longitude, ReferenceFrame reference_frame)

      The position of the surface at the given latitude and longitude, in the given
      reference frame. When over water, this is the position at the bottom of the sea-bed.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **reference_frame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> position_at_altitude(double latitude, double longitude, double altitude, ReferenceFrame reference_frame)

      The position at the given latitude, longitude and altitude, in the given reference frame.

      :Parameters:

       * **latitude** -- Latitude in degrees.
       * **longitude** -- Longitude in degrees.
       * **altitude** -- Altitude in meters above sea level.
       * **reference_frame** -- Reference frame for the returned position vector.

      :returns: Position as a vector.
      :Game Scenes: All

   .. function:: double altitude_at_position(std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      The altitude, in meters, of the given position in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **reference_frame** -- Reference frame for the position vector.

      :Game Scenes: All

   .. function:: double latitude_at_position(std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      The latitude of the given position, in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **reference_frame** -- Reference frame for the position vector.

      :Game Scenes: All

   .. function:: double longitude_at_position(std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      The longitude of the given position, in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **reference_frame** -- Reference frame for the position vector.

      :Game Scenes: All

   .. function:: float sphere_of_influence()

      The radius of the sphere of influence of the body, in meters.

      :Game Scenes: All

   .. function:: bool has_atmosphere()

      ``true`` if the body has an atmosphere.

      :Game Scenes: All

   .. function:: float atmosphere_depth()

      The depth of the atmosphere, in meters.

      :Game Scenes: All

   .. function:: double atmospheric_density_at_position(std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      The atmospheric density at the given position, in :math:`kg/m^3`,
      in the given reference frame.

      :Parameters:

       * **position** -- The position vector at which to measure the density.
       * **reference_frame** -- Reference frame that the position vector is in.

      :Game Scenes: All

   .. function:: bool has_atmospheric_oxygen()

      ``true`` if there is oxygen in the atmosphere, required for air-breathing engines.

      :Game Scenes: All

   .. function:: double temperature_at(std::tuple<double, double, double> position, ReferenceFrame reference_frame)

      The temperature on the body at the given position, in the given reference frame.

      :Parameters:

       * **position** -- Position as a vector.
       * **reference_frame** -- The reference frame that the position is in.

      :Game Scenes: All


      .. note::

         This calculation is performed using the bodies current position, which means that
         the value could be wrong if you want to know the temperature in the far future.

   .. function:: double density_at(double altitude)

      Gets the air density, in :math:`kg/m^3`, for the specified
      altitude above sea level, in meters.

      :Parameters:



      :Game Scenes: All


      .. note::

         This is an approximation, because actual calculations, taking sun exposure into account
         to compute air temperature, require us to know the exact point on the body where the
         density is to be computed (knowing the altitude is not enough).
         However, the difference is small for high altitudes, so it makes very little difference
         for trajectory prediction.

   .. function:: double pressure_at(double altitude)

      Gets the air pressure, in Pascals, for the specified
      altitude above sea level, in meters.

      :Parameters:



      :Game Scenes: All

   .. function:: std::set<std::string> biomes()

      The biomes present on this body.

      :Game Scenes: All

   .. function:: std::string biome_at(double latitude, double longitude)

      The biome at the given latitude and longitude, in degrees.

      :Parameters:




      :Game Scenes: All

   .. function:: float flying_high_altitude_threshold()

      The altitude, in meters, above which a vessel is considered to be
      flying "high" when doing science.

      :Game Scenes: All

   .. function:: float space_high_altitude_threshold()

      The altitude, in meters, above which a vessel is considered to be
      in "high" space when doing science.

      :Game Scenes: All

   .. function:: ReferenceFrame reference_frame()

      The reference frame that is fixed relative to the celestial body.

      * The origin is at the center of the body.
      * The axes rotate with the body.
      * The x-axis points from the center of the body
        towards the intersection of the prime meridian and equator (the
        position at 0° longitude, 0° latitude).
      * The y-axis points from the center of the body
        towards the north pole.
      * The z-axis points from the center of the body
        towards the equator at 90°E longitude.

      :Game Scenes: All


      .. figure:: /images/reference-frames/celestial-body.png
         :align: center

         Celestial body reference frame origin and axes. The equator is shown in
         blue, and the prime meridian in red.

   .. function:: ReferenceFrame non_rotating_reference_frame()

      The reference frame that is fixed relative to this celestial body, and
      orientated in a fixed direction (it does not rotate with the body).

      * The origin is at the center of the body.
      * The axes do not rotate.
      * The x-axis points in an arbitrary direction through the
        equator.
      * The y-axis points from the center of the body towards
        the north pole.
      * The z-axis points in an arbitrary direction through the
        equator.

      :Game Scenes: All

   .. function:: ReferenceFrame orbital_reference_frame()

      The reference frame that is fixed relative to this celestial body, but
      orientated with the body's orbital prograde/normal/radial directions.

      * The origin is at the center of the body.
      * The axes rotate with the orbital prograde/normal/radial
        directions.
      * The x-axis points in the orbital anti-radial direction.
      * The y-axis points in the orbital prograde direction.
      * The z-axis points in the orbital normal direction.

      :Game Scenes: All

   .. function:: std::tuple<double, double, double> position(ReferenceFrame reference_frame)

      The position of the center of the body, in the specified reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned position vector is in.

      :returns: The position as a vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> velocity(ReferenceFrame reference_frame)

      The linear velocity of the body, in the specified reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned velocity vector is in.

      :returns: The velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the body in meters per second.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double, double> rotation(ReferenceFrame reference_frame)

      The rotation of the body, in the specified reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned rotation is in.

      :returns: The rotation as a quaternion of the form :math:`(x, y, z, w)`.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> direction(ReferenceFrame reference_frame)

      The direction in which the north pole of the celestial body is pointing,
      in the specified reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame that the returned direction is in.

      :returns: The direction as a unit vector.
      :Game Scenes: All

   .. function:: std::tuple<double, double, double> angular_velocity(ReferenceFrame reference_frame)

      The angular velocity of the body in the specified reference frame.

      :Parameters:

       * **reference_frame** -- The reference frame the returned angular velocity is in.

      :returns: The angular velocity as a vector. The magnitude of the vector is the rotational speed of the body, in radians per second. The direction of the vector indicates the axis of rotation, using the right-hand rule.
      :Game Scenes: All
