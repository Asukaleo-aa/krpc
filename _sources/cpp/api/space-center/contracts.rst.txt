.. default-domain:: cpp
.. highlight:: cpp
.. namespace:: krpc::services::SpaceCenter

Contracts
=========


.. class:: ContractManager

   Contracts manager.
   Obtained by calling :func:`contract_manager`.

   .. function:: std::set<std::string> types()

      A list of all contract types.

      :Game Scenes: All

   .. function:: std::vector<Contract> all_contracts()

      A list of all contracts.

      :Game Scenes: All

   .. function:: std::vector<Contract> active_contracts()

      A list of all active contracts.

      :Game Scenes: All

   .. function:: std::vector<Contract> offered_contracts()

      A list of all offered, but unaccepted, contracts.

      :Game Scenes: All

   .. function:: std::vector<Contract> completed_contracts()

      A list of all completed contracts.

      :Game Scenes: All

   .. function:: std::vector<Contract> failed_contracts()

      A list of all failed contracts.

      :Game Scenes: All



.. class:: Contract

   A contract. Can be accessed using :func:`contract_manager`.

   .. function:: std::string type()

      Type of the contract.

      :Game Scenes: All

   .. function:: std::string title()

      Title of the contract.

      :Game Scenes: All

   .. function:: std::string description()

      Description of the contract.

      :Game Scenes: All

   .. function:: std::string notes()

      Notes for the contract.

      :Game Scenes: All

   .. function:: std::string synopsis()

      Synopsis for the contract.

      :Game Scenes: All

   .. function:: std::vector<std::string> keywords()

      Keywords for the contract.

      :Game Scenes: All

   .. function:: ContractState state()

      State of the contract.

      :Game Scenes: All

   .. function:: bool seen()

      Whether the contract has been seen.

      :Game Scenes: All

   .. function:: bool read()

      Whether the contract has been read.

      :Game Scenes: All

   .. function:: bool active()

      Whether the contract is active.

      :Game Scenes: All

   .. function:: bool failed()

      Whether the contract has been failed.

      :Game Scenes: All

   .. function:: bool can_be_canceled()

      Whether the contract can be canceled.

      :Game Scenes: All

   .. function:: bool can_be_declined()

      Whether the contract can be declined.

      :Game Scenes: All

   .. function:: bool can_be_failed()

      Whether the contract can be failed.

      :Game Scenes: All

   .. function:: void accept()

      Accept an offered contract.


      :Game Scenes: All

   .. function:: void cancel()

      Cancel an active contract.


      :Game Scenes: All

   .. function:: void decline()

      Decline an offered contract.


      :Game Scenes: All

   .. function:: double funds_advance()

      Funds received when accepting the contract.

      :Game Scenes: All

   .. function:: double funds_completion()

      Funds received on completion of the contract.

      :Game Scenes: All

   .. function:: double funds_failure()

      Funds lost if the contract is failed.

      :Game Scenes: All

   .. function:: double reputation_completion()

      Reputation gained on completion of the contract.

      :Game Scenes: All

   .. function:: double reputation_failure()

      Reputation lost if the contract is failed.

      :Game Scenes: All

   .. function:: double science_completion()

      Science gained on completion of the contract.

      :Game Scenes: All

   .. function:: std::vector<ContractParameter> parameters()

      Parameters for the contract.

      :Game Scenes: All



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: ContractState

   The state of a contract. See :func:`Contract::state`.


   .. enumerator:: active

      The contract is active.


   .. enumerator:: canceled

      The contract has been canceled.


   .. enumerator:: completed

      The contract has been completed.


   .. enumerator:: deadline_expired

      The deadline for the contract has expired.


   .. enumerator:: declined

      The contract has been declined.


   .. enumerator:: failed

      The contract has been failed.


   .. enumerator:: generated

      The contract has been generated.


   .. enumerator:: offered

      The contract has been offered to the player.


   .. enumerator:: offer_expired

      The contract was offered to the player, but the offer expired.


   .. enumerator:: withdrawn

      The contract has been withdrawn.



.. class:: ContractParameter

   A contract parameter. See :func:`Contract::parameters`.

   .. function:: std::string title()

      Title of the parameter.

      :Game Scenes: All

   .. function:: std::string notes()

      Notes for the parameter.

      :Game Scenes: All

   .. function:: std::vector<ContractParameter> children()

      Child contract parameters.

      :Game Scenes: All

   .. function:: bool completed()

      Whether the parameter has been completed.

      :Game Scenes: All

   .. function:: bool failed()

      Whether the parameter has been failed.

      :Game Scenes: All

   .. function:: bool optional()

      Whether the contract parameter is optional.

      :Game Scenes: All

   .. function:: double funds_completion()

      Funds received on completion of the contract parameter.

      :Game Scenes: All

   .. function:: double funds_failure()

      Funds lost if the contract parameter is failed.

      :Game Scenes: All

   .. function:: double reputation_completion()

      Reputation gained on completion of the contract parameter.

      :Game Scenes: All

   .. function:: double reputation_failure()

      Reputation lost if the contract parameter is failed.

      :Game Scenes: All

   .. function:: double science_completion()

      Science gained on completion of the contract parameter.

      :Game Scenes: All
