.. default-domain:: cpp
.. highlight:: cpp


Node
====

.. namespace:: krpc::services::SpaceCenter
.. class:: Node

   Represents a maneuver node. Can be created using :func:`Control::add_node`.

   .. function:: float prograde()
   .. function:: void set_prograde(float value)

      The magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.

   .. function:: float normal()
   .. function:: void set_normal(float value)

      The magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.

   .. function:: float radial()
   .. function:: void set_radial(float value)

      The magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.

   .. function:: float delta_v()
   .. function:: void set_delta_v(float value)

      The delta-v of the maneuver node, in meters per second.


      .. note::

         Does not change when executing the maneuver node. See :func:`Node::remaining_delta_v`.

   .. function:: float remaining_delta_v()

      Gets the remaining delta-v of the maneuver node, in meters per second. Changes as the node
      is executed. This is equivalent to the delta-v reported in-game.

   .. function:: std::tuple<double, double, double> burn_vector(ReferenceFrame reference_frame = None)

      Returns a vector whose direction the direction of the maneuver node burn, and whose magnitude
      is the delta-v of the burn in m/s.

      :Parameters:




      .. note::

         Does not change when executing the maneuver node. See :func:`Node::remaining_burn_vector`.

   .. function:: std::tuple<double, double, double> remaining_burn_vector(ReferenceFrame reference_frame = None)

      Returns a vector whose direction the direction of the maneuver node burn, and whose magnitude
      is the delta-v of the burn in m/s. The direction and magnitude change as the burn is executed.

      :Parameters:

   .. function:: double ut()
   .. function:: void set_ut(double value)

      The universal time at which the maneuver will occur, in seconds.

   .. function:: double time_to()

      The time until the maneuver node will be encountered, in seconds.

   .. function:: Orbit orbit()

      The orbit that results from executing the maneuver node.

   .. function:: void remove()

      Removes the maneuver node.

   .. function:: ReferenceFrame reference_frame()

      Gets the reference frame that is fixed relative to the maneuver node's burn.

      * The origin is at the position of the maneuver node.
      * The y-axis points in the direction of the burn.
      * The x-axis and z-axis point in arbitrary but fixed directions.

   .. function:: ReferenceFrame orbital_reference_frame()

      Gets the reference frame that is fixed relative to the maneuver node, and
      orientated with the orbital prograde/normal/radial directions of the
      original orbit at the maneuver node's position.

      * The origin is at the position of the maneuver node.
      * The x-axis points in the orbital anti-radial direction of the original
        orbit, at the position of the maneuver node.
      * The y-axis points in the orbital prograde direction of the original
        orbit, at the position of the maneuver node.
      * The z-axis points in the orbital normal direction of the original orbit,
        at the position of the maneuver node.

   .. function:: std::tuple<double, double, double> position(ReferenceFrame reference_frame)

      Returns the position vector of the maneuver node in the given reference frame.

      :Parameters:

   .. function:: std::tuple<double, double, double> direction(ReferenceFrame reference_frame)

      Returns the unit direction vector of the maneuver nodes burn in the given reference frame.

      :Parameters:
