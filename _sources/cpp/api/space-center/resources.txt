.. default-domain:: cpp
.. highlight:: cpp


Resources
=========


.. namespace:: krpc::services::SpaceCenter
.. class:: Resources

   Created by calling :func:`SpaceCenter::Vessel::resources`,
   :func:`SpaceCenter::Vessel::resources_in_decouple_stage` or
   :func:`SpaceCenter::Part::resources`.

   .. function:: std::vector<SpaceCenter::Resource> all()

      All the individual resources that can be stored.

   .. function:: std::vector<SpaceCenter::Resource> with_resource(std::string name)

      All the individual resources with the given name that can be stored.

      :Parameters:

   .. function:: std::vector<std::string> names()

      A list of resource names that can be stored.

   .. function:: bool has_resource(std::string name)

      Check whether the named resource can be stored.

      :Parameters:

       * **name** -- The name of the resource.

   .. function:: float amount(std::string name)

      Returns the amount of a resource that is currently stored.

      :Parameters:

       * **name** -- The name of the resource.

   .. function:: float max(std::string name)

      Returns the amount of a resource that can be stored.

      :Parameters:

       * **name** -- The name of the resource.

   .. function:: static float density(std::string name)

      Returns the density of a resource, in kg/l.

      :Parameters:

       * **name** -- The name of the resource.

   .. function:: static SpaceCenter::ResourceFlowMode flow_mode(std::string name)

      Returns the flow mode of a resource.

      :Parameters:

       * **name** -- The name of the resource.



.. namespace:: krpc::services::SpaceCenter
.. class:: Resource

   A resource stored within a part.

   .. function:: std::string name()

      The name of the resource.

   .. function:: SpaceCenter::Part part()

      The part containing the resource.

   .. function:: float amount()

      The amount of the resource that is currently stored in the part.

   .. function:: float max()

      The total amount of the resource that can be stored in the part.

   .. function:: float density()

      The density of the resource, in :math:`kg/l`.

   .. function:: SpaceCenter::ResourceFlowMode flow_mode()

      The flow mode of the resource.

   .. function:: bool enabled()
   .. function:: void set_enabled(bool value)

      Whether use of this resource is enabled.



.. namespace:: krpc::services::SpaceCenter
.. class:: ResourceTransfer

   Transfer resources between parts.

   .. function:: static SpaceCenter::ResourceTransfer start(SpaceCenter::Part from_part, SpaceCenter::Part to_part, std::string resource, float max_amount)

      Start transferring a resource transfer between a pair of parts. The transfer will move at most
      *max_amount* units of the resource, depending on how much of the resource is
      available in the source part and how much storage is available in the destination part.
      Use :func:`SpaceCenter::ResourceTransfer::complete` to check if the transfer is complete.
      Use :func:`SpaceCenter::ResourceTransfer::amount` to see how much of the resource has been transferred.

      :Parameters:

       * **from_part** -- The part to transfer to.
       * **to_part** -- The part to transfer from.
       * **resource** -- The name of the resource to transfer.
       * **max_amount** -- The maximum amount of resource to transfer.

   .. function:: float amount()

      The amount of the resource that has been transferred.

   .. function:: bool complete()

      Whether the transfer has completed.



.. namespace:: krpc::services::SpaceCenter
.. enum-struct:: ResourceFlowMode

   See :func:`SpaceCenter::Resources::flow_mode`.


   .. enumerator:: vessel

      The resource flows to any part in the vessel. For example, electric charge.


   .. enumerator:: stage

      The resource flows from parts in the first stage, followed by the second,
      and so on. For example, mono-propellant.


   .. enumerator:: adjacent

      The resource flows between adjacent parts within the vessel. For example,
      liquid fuel or oxidizer.


   .. enumerator:: none

      The resource does not flow. For example, solid fuel.
