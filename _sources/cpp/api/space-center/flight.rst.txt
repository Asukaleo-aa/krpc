.. default-domain:: cpp
.. highlight:: cpp
.. namespace:: krpc::services::SpaceCenter

Flight
======


.. class:: Flight

   Used to get flight telemetry for a vessel, by calling :func:`Vessel::flight`.
   All of the information returned by this class is given in the reference frame
   passed to that method.
   Obtained by calling :func:`Vessel::flight`.

   .. note::

      To get orbital information, such as the apoapsis or inclination, see :class:`Orbit`.

   .. function:: float g_force()

      The current G force acting on the vessel in :math:`m/s^2`.

   .. function:: double mean_altitude()

      The altitude above sea level, in meters.
      Measured from the center of mass of the vessel.

   .. function:: double surface_altitude()

      The altitude above the surface of the body or sea level, whichever is closer, in meters.
      Measured from the center of mass of the vessel.

   .. function:: double bedrock_altitude()

      The altitude above the surface of the body, in meters. When over water, this is the altitude above the sea floor.
      Measured from the center of mass of the vessel.

   .. function:: double elevation()

      The elevation of the terrain under the vessel, in meters. This is the height of the terrain above sea level,
      and is negative when the vessel is over the sea.

   .. function:: double latitude()

      The `latitude <https://en.wikipedia.org/wiki/Latitude>`_ of the vessel for the body being orbited, in degrees.

   .. function:: double longitude()

      The `longitude <https://en.wikipedia.org/wiki/Longitude>`_ of the vessel for the body being orbited, in degrees.

   .. function:: std::tuple<double, double, double> velocity()

      The velocity of the vessel, in the reference frame :class:`ReferenceFrame`.

      :returns: The velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the vessel in meters per second.

   .. function:: double speed()

      The speed of the vessel in meters per second,
      in the reference frame :class:`ReferenceFrame`.

   .. function:: double horizontal_speed()

      The horizontal speed of the vessel in meters per second,
      in the reference frame :class:`ReferenceFrame`.

   .. function:: double vertical_speed()

      The vertical speed of the vessel in meters per second,
      in the reference frame :class:`ReferenceFrame`.

   .. function:: std::tuple<double, double, double> center_of_mass()

      The position of the center of mass of the vessel,
      in the reference frame :class:`ReferenceFrame`

      :returns: The position as a vector.

   .. function:: std::tuple<double, double, double, double> rotation()

      The rotation of the vessel, in the reference frame :class:`ReferenceFrame`

      :returns: The rotation as a quaternion of the form :math:`(x, y, z, w)`.

   .. function:: std::tuple<double, double, double> direction()

      The direction that the vessel is pointing in,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: float pitch()

      The pitch of the vessel relative to the horizon, in degrees.
      A value between -90° and +90°.

   .. function:: float heading()

      The heading of the vessel (its angle relative to north), in degrees.
      A value between 0° and 360°.

   .. function:: float roll()

      The roll of the vessel relative to the horizon, in degrees.
      A value between -180° and +180°.

   .. function:: std::tuple<double, double, double> prograde()

      The prograde direction of the vessels orbit,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: std::tuple<double, double, double> retrograde()

      The retrograde direction of the vessels orbit,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: std::tuple<double, double, double> normal()

      The direction normal to the vessels orbit,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: std::tuple<double, double, double> anti_normal()

      The direction opposite to the normal of the vessels orbit,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: std::tuple<double, double, double> radial()

      The radial direction of the vessels orbit,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: std::tuple<double, double, double> anti_radial()

      The direction opposite to the radial direction of the vessels orbit,
      in the reference frame :class:`ReferenceFrame`.

      :returns: The direction as a unit vector.

   .. function:: float atmosphere_density()

      The current density of the atmosphere around the vessel, in :math:`kg/m^3`.

   .. function:: float dynamic_pressure()

      The dynamic pressure acting on the vessel, in Pascals. This is a measure of the
      strength of the aerodynamic forces. It is equal to
      :math:`\frac{1}{2} . \mbox{air density} . \mbox{velocity}^2`.
      It is commonly denoted :math:`Q`.

   .. function:: float static_pressure()

      The static atmospheric pressure acting on the vessel, in Pascals.

   .. function:: float static_pressure_at_msl()

      The static atmospheric pressure at mean sea level, in Pascals.

   .. function:: std::tuple<double, double, double> aerodynamic_force()

      The total aerodynamic forces acting on the vessel,
      in reference frame :class:`ReferenceFrame`.

      :returns: A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.

   .. function:: std::tuple<double, double, double> simulate_aerodynamic_force_at(CelestialBody body, std::tuple<double, double, double> position, std::tuple<double, double, double> velocity)

      Simulate and return the total aerodynamic forces acting on the vessel,
      if it where to be traveling with the given velocity at the given position in the
      atmosphere of the given celestial body.

      :Parameters:





      :returns: A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.

   .. function:: std::tuple<double, double, double> lift()

      The `aerodynamic lift <https://en.wikipedia.org/wiki/Aerodynamic_force>`_
      currently acting on the vessel.

      :returns: A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.

   .. function:: std::tuple<double, double, double> drag()

      The `aerodynamic drag <https://en.wikipedia.org/wiki/Aerodynamic_force>`_ currently acting on the vessel.

      :returns: A vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.

   .. function:: float speed_of_sound()

      The speed of sound, in the atmosphere around the vessel, in :math:`m/s`.

   .. function:: float mach()

      The speed of the vessel, in multiples of the speed of sound.

   .. function:: float reynolds_number()

      The vessels Reynolds number.


      .. note::

         Requires `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_.

   .. function:: float true_air_speed()

      The `true air speed <https://en.wikipedia.org/wiki/True_airspeed>`_
      of the vessel, in meters per second.

   .. function:: float equivalent_air_speed()

      The `equivalent air speed <https://en.wikipedia.org/wiki/Equivalent_airspeed>`_
      of the vessel, in meters per second.

   .. function:: float terminal_velocity()

      An estimate of the current terminal velocity of the vessel, in meters per second.
      This is the speed at which the drag forces cancel out the force of gravity.

   .. function:: float angle_of_attack()

      The pitch angle between the orientation of the vessel and its velocity vector,
      in degrees.

   .. function:: float sideslip_angle()

      The yaw angle between the orientation of the vessel and its velocity vector, in degrees.

   .. function:: float total_air_temperature()

      The `total air temperature <https://en.wikipedia.org/wiki/Total_air_temperature>`_
      of the atmosphere around the vessel, in Kelvin.
      This includes the :func:`Flight::static_air_temperature` and the vessel's kinetic energy.

   .. function:: float static_air_temperature()

      The `static (ambient) temperature <https://en.wikipedia.org/wiki/Total_air_temperature>`_ of the atmosphere around the vessel, in Kelvin.

   .. function:: float stall_fraction()

      The current amount of stall, between 0 and 1. A value greater than 0.005 indicates
      a minor stall and a value greater than 0.5 indicates a large-scale stall.


      .. note::

         Requires `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_.

   .. function:: float drag_coefficient()

      The coefficient of drag. This is the amount of drag produced by the vessel.
      It depends on air speed, air density and wing area.


      .. note::

         Requires `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_.

   .. function:: float lift_coefficient()

      The coefficient of lift. This is the amount of lift produced by the vessel, and
      depends on air speed, air density and wing area.


      .. note::

         Requires `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_.

   .. function:: float ballistic_coefficient()

      The `ballistic coefficient <https://en.wikipedia.org/wiki/Ballistic_coefficient>`_.


      .. note::

         Requires `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_.

   .. function:: float thrust_specific_fuel_consumption()

      The thrust specific fuel consumption for the jet engines on the vessel. This is a
      measure of the efficiency of the engines, with a lower value indicating a more
      efficient vessel. This value is the number of Newtons of fuel that are burned,
      per hour, to produce one newton of thrust.


      .. note::

         Requires `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/>`_.
